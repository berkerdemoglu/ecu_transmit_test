
ECU_Transmit_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005920  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005af8  08005af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b38  08005b38  0000701c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b38  08005b38  00006b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b40  08005b40  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b40  08005b40  00006b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005b48  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000020  08005b64  00007020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08005b64  00007370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001453a  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002627  00000000  00000000  0001b586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc9  00000000  00000000  0001ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc5b  00000000  00000000  0001f921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120a3  00000000  00000000  0003f57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1cd7  00000000  00000000  0005161f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001232f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  0012333c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00127a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005ae0 	.word	0x08005ae0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08005ae0 	.word	0x08005ae0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <convert_float_display>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void convert_float_display(can_message_four* msg_in, can_message_four* msg_out, int decimal_points) {
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
    // Used for MoTeC
	msg_out->sensor_int = (uint32_t) (msg_in->sensor_float * decimal_points);
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	ed93 7a00 	vldr	s14, [r3]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	ee07 3a90 	vmov	s15, r3
 800055c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000568:	ee17 2a90 	vmov	r2, s15
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	601a      	str	r2, [r3, #0]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <send_CAN_message>:


void send_CAN_message(uint16_t address, can_message_eight* msg) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	80fb      	strh	r3, [r7, #6]
    // Update ID of the transmit header
    tx_header.Identifier = address;
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4a0b      	ldr	r2, [pc, #44]	@ (80005b8 <send_CAN_message+0x3c>)
 800058c:	6013      	str	r3, [r2, #0]

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);  // Toggle LED
 800058e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000592:	480a      	ldr	r0, [pc, #40]	@ (80005bc <send_CAN_message+0x40>)
 8000594:	f003 fd46 	bl	8004024 <HAL_GPIO_TogglePin>

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, msg->bytes) != HAL_OK) {
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	4906      	ldr	r1, [pc, #24]	@ (80005b8 <send_CAN_message+0x3c>)
 800059e:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <send_CAN_message+0x44>)
 80005a0:	f003 f802 	bl	80035a8 <HAL_FDCAN_AddMessageToTxFifoQ>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <send_CAN_message+0x32>
        Error_Handler();
 80005aa:	f000 fbf3 	bl	8000d94 <Error_Handler>
    }
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200002a4 	.word	0x200002a4
 80005bc:	48000400 	.word	0x48000400
 80005c0:	20000118 	.word	0x20000118

080005c4 <send_turn_on_inverter>:

void send_turn_on_inverter(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	// Sends a ON message to the inverter
	send_CAN_message(0x201, &inverter_on_msg);
 80005c8:	4903      	ldr	r1, [pc, #12]	@ (80005d8 <send_turn_on_inverter+0x14>)
 80005ca:	f240 2001 	movw	r0, #513	@ 0x201
 80005ce:	f7ff ffd5 	bl	800057c <send_CAN_message>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <send_velocity_ref_inverter>:

void send_velocity_ref_inverter(struct Throttle* th) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	// Check for safe throttle (and RPM) values
	if (throttle_sensor.throttle_value.sensor_float <= 100.0f) {
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <send_velocity_ref_inverter+0x44>)
 80005e6:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 80005ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000624 <send_velocity_ref_inverter+0x48>
 80005ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f6:	d900      	bls.n	80005fa <send_velocity_ref_inverter+0x1e>
		tx_data.second.sensor_float = throttle_sensor.throttle_value.sensor_float;
		send_CAN_message(0x301, &tx_data);

		send_turn_on_inverter();
	}
}
 80005f8:	e00e      	b.n	8000618 <send_velocity_ref_inverter+0x3c>
		tx_data.first.sensor_int = 0;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <send_velocity_ref_inverter+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
		tx_data.second.sensor_float = throttle_sensor.throttle_value.sensor_float;
 8000600:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <send_velocity_ref_inverter+0x44>)
 8000602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000606:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <send_velocity_ref_inverter+0x4c>)
 8000608:	6053      	str	r3, [r2, #4]
		send_CAN_message(0x301, &tx_data);
 800060a:	4907      	ldr	r1, [pc, #28]	@ (8000628 <send_velocity_ref_inverter+0x4c>)
 800060c:	f240 3001 	movw	r0, #769	@ 0x301
 8000610:	f7ff ffb4 	bl	800057c <send_CAN_message>
		send_turn_on_inverter();
 8000614:	f7ff ffd6 	bl	80005c4 <send_turn_on_inverter>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000017c 	.word	0x2000017c
 8000624:	42c80000 	.word	0x42c80000
 8000628:	200002c8 	.word	0x200002c8

0800062c <send_throttle_steering_display>:

void send_throttle_steering_display(struct Throttle* th, struct SteeringAngle* sa) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	 // Send throttle in the first 4 bytes
	 convert_float_display(&th->throttle_value, &tx_data.first, DECIMAL_POINT_2);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3388      	adds	r3, #136	@ 0x88
 800063a:	2264      	movs	r2, #100	@ 0x64
 800063c:	4909      	ldr	r1, [pc, #36]	@ (8000664 <send_throttle_steering_display+0x38>)
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff80 	bl	8000544 <convert_float_display>

	 // Send steering angle in the last 4 bytes
	 convert_float_display(&sa->steering_value, &tx_data.second, DECIMAL_POINT_2);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2264      	movs	r2, #100	@ 0x64
 8000648:	4907      	ldr	r1, [pc, #28]	@ (8000668 <send_throttle_steering_display+0x3c>)
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff7a 	bl	8000544 <convert_float_display>

	 send_CAN_message(0x102, &tx_data);
 8000650:	4904      	ldr	r1, [pc, #16]	@ (8000664 <send_throttle_steering_display+0x38>)
 8000652:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8000656:	f7ff ff91 	bl	800057c <send_CAN_message>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200002c8 	.word	0x200002c8
 8000668:	200002cc 	.word	0x200002cc

0800066c <throttle_init>:

// Throttle functions
void throttle_init(struct Throttle* thr) {
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	thr->adc_sum = 0;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	thr->buffer_index = 0;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	thr->hysteresis = 2.0f;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800068a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	thr->hysteresis_min = 5.0f;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a11      	ldr	r2, [pc, #68]	@ (80006d8 <throttle_init+0x6c>)
 8000692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	thr->throttle_activated = 0;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	// Init buffer with zeroes
	// maybe this can also be done at initialization
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e00a      	b.n	80006ba <throttle_init+0x4e>
		thr->buffer[i] = 0;
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	3304      	adds	r3, #4
 80006ae:	f04f 0200 	mov.w	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b1f      	cmp	r3, #31
 80006be:	ddf1      	ble.n	80006a4 <throttle_init+0x38>
	}

	thr->throttle_value.sensor_float = 0.0f;  // init with 0 for safety
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f04f 0200 	mov.w	r2, #0
 80006c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40a00000 	.word	0x40a00000

080006dc <convert_adc_throttle>:

void convert_adc_throttle(struct Throttle* th, uint16_t adc_value) {
 80006dc:	b480      	push	{r7}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	807b      	strh	r3, [r7, #2]
	 // Calibration
	 float volt = 3.3f*((float) adc_value) / 4096.0f;  // TODO: we should always get 0 ?
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006f2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8000830 <convert_adc_throttle+0x154>
 80006f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006fa:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8000834 <convert_adc_throttle+0x158>
 80006fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000702:	edc7 7a04 	vstr	s15, [r7, #16]
	 float calc = ((float) volt-0.42f)*100.0f/1.65f;
 8000706:	edd7 7a04 	vldr	s15, [r7, #16]
 800070a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000838 <convert_adc_throttle+0x15c>
 800070e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000712:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800083c <convert_adc_throttle+0x160>
 8000716:	ee27 7a87 	vmul.f32	s14, s15, s14
 800071a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8000840 <convert_adc_throttle+0x164>
 800071e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000722:	edc7 7a03 	vstr	s15, [r7, #12]

	 th->adc_sum -= th->buffer[th->buffer_index];
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	ed93 7a00 	vldr	s14, [r3]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	3304      	adds	r3, #4
 800073a:	edd3 7a00 	vldr	s15, [r3]
 800073e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	edc3 7a00 	vstr	s15, [r3]

	 // Add new sample
	 th->buffer[th->buffer_index] = calc;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	3304      	adds	r3, #4
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	601a      	str	r2, [r3, #0]
	 th->adc_sum += calc;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	ed93 7a00 	vldr	s14, [r3]
 8000760:	edd7 7a03 	vldr	s15, [r7, #12]
 8000764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	edc3 7a00 	vstr	s15, [r3]

	 // Increment index
	 th->buffer_index++;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	 if (th->buffer_index >= THROTTLE_BUFFER_SIZE) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000784:	2b1f      	cmp	r3, #31
 8000786:	d903      	bls.n	8000790 <convert_adc_throttle+0xb4>
		 th->buffer_index = 0;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	 }


	 float output_value = th->adc_sum / THROTTLE_BUFFER_SIZE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	ed93 7a00 	vldr	s14, [r3]
 8000796:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000844 <convert_adc_throttle+0x168>
 800079a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800079e:	edc7 7a05 	vstr	s15, [r7, #20]

	 if (output_value > 100.0f){
 80007a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007a6:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800083c <convert_adc_throttle+0x160>
 80007aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b2:	dd01      	ble.n	80007b8 <convert_adc_throttle+0xdc>
		 output_value = 100.0f;
 80007b4:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <convert_adc_throttle+0x16c>)
 80007b6:	617b      	str	r3, [r7, #20]
	 }

	 // Hysteresis -- TODO: This could be cleaned up?
	 if (output_value > th->hysteresis_min){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80007be:	ed97 7a05 	vldr	s14, [r7, #20]
 80007c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ca:	dd03      	ble.n	80007d4 <convert_adc_throttle+0xf8>
		 th->throttle_activated = 1;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2201      	movs	r2, #1
 80007d0:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	 }
	 if (th->throttle_activated == 1 && output_value < (th->hysteresis_min - th->hysteresis)){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d112      	bne.n	8000804 <convert_adc_throttle+0x128>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80007ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80007f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d503      	bpl.n	8000804 <convert_adc_throttle+0x128>
		 th->throttle_activated = 0;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	 }

	 // Write output value
	 if (th->throttle_activated == 1) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800080a:	2b01      	cmp	r3, #1
 800080c:	d104      	bne.n	8000818 <convert_adc_throttle+0x13c>
		 th->throttle_value.sensor_float = output_value;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	 } else {
		 th->throttle_value.sensor_float = 0.0f;
	 }
}
 8000816:	e004      	b.n	8000822 <convert_adc_throttle+0x146>
		 th->throttle_value.sensor_float = 0.0f;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f04f 0200 	mov.w	r2, #0
 800081e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000822:	bf00      	nop
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40533333 	.word	0x40533333
 8000834:	45800000 	.word	0x45800000
 8000838:	3ed70a3d 	.word	0x3ed70a3d
 800083c:	42c80000 	.word	0x42c80000
 8000840:	3fd33333 	.word	0x3fd33333
 8000844:	42000000 	.word	0x42000000
 8000848:	42c80000 	.word	0x42c80000

0800084c <steering_angle_init>:

// Steering angle functions
void steering_angle_init(struct SteeringAngle* sa) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	sa->adc_sum = 0;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
	sa->buffer_index = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	// Init buffer with zeroes
	// maybe this can also be done at initialization
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e00b      	b.n	8000882 <steering_angle_init+0x36>
		sa->buffer[i] = 0;
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3302      	adds	r3, #2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	3304      	adds	r3, #4
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3301      	adds	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2b1f      	cmp	r3, #31
 8000886:	ddf0      	ble.n	800086a <steering_angle_init+0x1e>
	}

	sa->steering_value.sensor_float = 0.0f;  // init with 0 for safety
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <steering_angle_avg>:

void steering_angle_avg(struct SteeringAngle* sa, float steering_value) {
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	ed87 0a00 	vstr	s0, [r7]
	sa->adc_sum -= sa->buffer[sa->buffer_index];
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	3302      	adds	r3, #2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	3304      	adds	r3, #4
 80008be:	edd3 7a00 	vldr	s15, [r3]
 80008c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add new sample
	sa->buffer[sa->buffer_index] = steering_value;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	3302      	adds	r3, #2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	3304      	adds	r3, #4
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	601a      	str	r2, [r3, #0]
	sa->adc_sum += steering_value;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80008e6:	edd7 7a00 	vldr	s15, [r7]
 80008ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	edc3 7a02 	vstr	s15, [r3, #8]

	// Increment index
	sa->buffer_index++;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80008fa:	3301      	adds	r3, #1
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	if (sa->buffer_index >= 32) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800090a:	2b1f      	cmp	r3, #31
 800090c:	d903      	bls.n	8000916 <steering_angle_avg+0x7a>
		sa->buffer_index = 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	}

	// Write average value
	sa->steering_value.sensor_float = sa->adc_sum / 32.0f;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	ed93 7a02 	vldr	s14, [r3, #8]
 800091c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000938 <steering_angle_avg+0x9c>
 8000920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	edc3 7a00 	vstr	s15, [r3]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	42000000 	.word	0x42000000

0800093c <HAL_ADC_ConvCpltCallback>:

// ADC functions
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	adc_complete_flag = 1;
 8000944:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200002d0 	.word	0x200002d0

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 fc9f 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f8ad 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 f9fb 	bl	8000d64 <MX_GPIO_Init>
  MX_DMA_Init();
 800096e:	f000 f9cf 	bl	8000d10 <MX_DMA_Init>
  MX_ADC2_Init();
 8000972:	f000 f8f3 	bl	8000b5c <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000976:	f000 f967 	bl	8000c48 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // Start ADC2
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) raw_adc_values, 2);
 800097a:	2202      	movs	r2, #2
 800097c:	4948      	ldr	r1, [pc, #288]	@ (8000aa0 <main+0x144>)
 800097e:	4849      	ldr	r0, [pc, #292]	@ (8000aa4 <main+0x148>)
 8000980:	f001 f8e6 	bl	8001b50 <HAL_ADC_Start_DMA>

  // Start FDCAN1
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000984:	4848      	ldr	r0, [pc, #288]	@ (8000aa8 <main+0x14c>)
 8000986:	f002 fde7 	bl	8003558 <HAL_FDCAN_Start>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <main+0x38>
    {
      Error_Handler();
 8000990:	f000 fa00 	bl	8000d94 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000994:	2200      	movs	r2, #0
 8000996:	2101      	movs	r1, #1
 8000998:	4843      	ldr	r0, [pc, #268]	@ (8000aa8 <main+0x14c>)
 800099a:	f002 fe49 	bl	8003630 <HAL_FDCAN_ActivateNotification>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <main+0x4c>
    {
      /* Notification Error */
      Error_Handler();
 80009a4:	f000 f9f6 	bl	8000d94 <Error_Handler>
    }

  // Init sensor structs
  throttle_init(&throttle_sensor);
 80009a8:	4840      	ldr	r0, [pc, #256]	@ (8000aac <main+0x150>)
 80009aa:	f7ff fe5f 	bl	800066c <throttle_init>
  steering_angle_init(&steering_sensor);
 80009ae:	4840      	ldr	r0, [pc, #256]	@ (8000ab0 <main+0x154>)
 80009b0:	f7ff ff4c 	bl	800084c <steering_angle_init>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 fb91 	bl	80010dc <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009ba:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab4 <main+0x158>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009c2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab4 <main+0x158>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80009c8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab4 <main+0x158>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80009ce:	4b39      	ldr	r3, [pc, #228]	@ (8000ab4 <main+0x158>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80009d4:	4b37      	ldr	r3, [pc, #220]	@ (8000ab4 <main+0x158>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80009da:	4936      	ldr	r1, [pc, #216]	@ (8000ab4 <main+0x158>)
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 fbb3 	bl	8001148 <BSP_COM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <main+0x90>
  {
    Error_Handler();
 80009e8:	f000 f9d4 	bl	8000d94 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Turn on the inverter


  int time_sum = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  while (time_sum < 5000) {
 80009f0:	e007      	b.n	8000a02 <main+0xa6>
	 send_turn_on_inverter();
 80009f2:	f7ff fde7 	bl	80005c4 <send_turn_on_inverter>

	 // CAN messages at 50 ms interval
	 time_sum += 50;
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3332      	adds	r3, #50	@ 0x32
 80009fa:	617b      	str	r3, [r7, #20]
	 HAL_Delay(50);
 80009fc:	2032      	movs	r0, #50	@ 0x32
 80009fe:	f000 fcc1 	bl	8001384 <HAL_Delay>
  while (time_sum < 5000) {
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	ddf2      	ble.n	80009f2 <main+0x96>
  }

  uint32_t time_last_5ms = HAL_GetTick();
 8000a0c:	f000 fcae 	bl	800136c <HAL_GetTick>
 8000a10:	6138      	str	r0, [r7, #16]
  uint32_t time_last_50ms = HAL_GetTick();
 8000a12:	f000 fcab 	bl	800136c <HAL_GetTick>
 8000a16:	60f8      	str	r0, [r7, #12]
  uint32_t time_now;
  while (1)
  {
	 time_now = HAL_GetTick();
 8000a18:	f000 fca8 	bl	800136c <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]

	 // Display
	 if (time_now - time_last_5ms > 5) {
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	2b05      	cmp	r3, #5
 8000a26:	d905      	bls.n	8000a34 <main+0xd8>
		 send_throttle_steering_display(&throttle_sensor, &steering_sensor);
 8000a28:	4921      	ldr	r1, [pc, #132]	@ (8000ab0 <main+0x154>)
 8000a2a:	4820      	ldr	r0, [pc, #128]	@ (8000aac <main+0x150>)
 8000a2c:	f7ff fdfe 	bl	800062c <send_throttle_steering_display>
		 time_last_5ms = time_now;  // update last time
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	613b      	str	r3, [r7, #16]
	 }

	 // Inverter
	 if (time_now - time_last_50ms > 50) {
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	2b32      	cmp	r3, #50	@ 0x32
 8000a3c:	d904      	bls.n	8000a48 <main+0xec>
		 send_velocity_ref_inverter(&throttle_sensor);
 8000a3e:	481b      	ldr	r0, [pc, #108]	@ (8000aac <main+0x150>)
 8000a40:	f7ff fdcc 	bl	80005dc <send_velocity_ref_inverter>
		 time_last_50ms = time_now;  // update last time
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60fb      	str	r3, [r7, #12]
	 }

	 // Other tasks
	 if (adc_complete_flag) {
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <main+0x15c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0e2      	beq.n	8000a18 <main+0xbc>
		 // Get throttle
		 convert_adc_throttle(&throttle_sensor, raw_adc_values[0]);
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <main+0x144>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4814      	ldr	r0, [pc, #80]	@ (8000aac <main+0x150>)
 8000a5a:	f7ff fe3f 	bl	80006dc <convert_adc_throttle>
//	     SpeedReference = ThrottleValue*MaxRPM/100.0;  // TODO: remove

		 // Get steering angle
		 float steering_value = (raw_adc_values[1]-3200)/4095.0f*110.0f;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <main+0x144>)
 8000a60:	885b      	ldrh	r3, [r3, #2]
 8000a62:	f5a3 6348 	sub.w	r3, r3, #3200	@ 0xc80
 8000a66:	ee07 3a90 	vmov	s15, r3
 8000a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a6e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8000abc <main+0x160>
 8000a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a76:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000ac0 <main+0x164>
 8000a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7e:	edc7 7a01 	vstr	s15, [r7, #4]
		 steering_angle_avg(&steering_sensor, steering_value);
 8000a82:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a86:	480a      	ldr	r0, [pc, #40]	@ (8000ab0 <main+0x154>)
 8000a88:	f7ff ff08 	bl	800089c <steering_angle_avg>

		 // Reset ADC input
		 HAL_ADC_Start_DMA(&hadc2, (uint32_t*) raw_adc_values, 2);
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	4904      	ldr	r1, [pc, #16]	@ (8000aa0 <main+0x144>)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <main+0x148>)
 8000a92:	f001 f85d 	bl	8001b50 <HAL_ADC_Start_DMA>
		 adc_complete_flag = 0;
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <main+0x15c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
	 time_now = HAL_GetTick();
 8000a9c:	e7bc      	b.n	8000a18 <main+0xbc>
 8000a9e:	bf00      	nop
 8000aa0:	200002d4 	.word	0x200002d4
 8000aa4:	2000004c 	.word	0x2000004c
 8000aa8:	20000118 	.word	0x20000118
 8000aac:	2000017c 	.word	0x2000017c
 8000ab0:	20000214 	.word	0x20000214
 8000ab4:	2000003c 	.word	0x2000003c
 8000ab8:	200002d0 	.word	0x200002d0
 8000abc:	457ff000 	.word	0x457ff000
 8000ac0:	42dc0000 	.word	0x42dc0000

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	@ 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2238      	movs	r2, #56	@ 0x38
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 ffd7 	bl	8005a86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000aea:	f003 fab5 	bl	8004058 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2340      	movs	r3, #64	@ 0x40
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2302      	movs	r3, #2
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b00:	2302      	movs	r3, #2
 8000b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fb4f 	bl	80041c0 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b28:	f000 f934 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2303      	movs	r3, #3
 8000b32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2102      	movs	r1, #2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fe4d 	bl	80047e4 <HAL_RCC_ClockConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b50:	f000 f920 	bl	8000d94 <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3750      	adds	r7, #80	@ 0x50
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2220      	movs	r2, #32
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 ff8c 	bl	8005a86 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b6e:	4b32      	ldr	r3, [pc, #200]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000b70:	4a32      	ldr	r2, [pc, #200]	@ (8000c3c <MX_ADC2_Init+0xe0>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b74:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000b76:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b94:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = ENABLE;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ba0:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bd6:	4818      	ldr	r0, [pc, #96]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000bd8:	f000 fe36 	bl	8001848 <HAL_ADC_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000be2:	f000 f8d7 	bl	8000d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <MX_ADC2_Init+0xe4>)
 8000be8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bea:	2306      	movs	r3, #6
 8000bec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bf2:	237f      	movs	r3, #127	@ 0x7f
 8000bf4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000c04:	f001 fa90 	bl	8002128 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000c0e:	f000 f8c1 	bl	8000d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_ADC2_Init+0xe8>)
 8000c14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c16:	230c      	movs	r3, #12
 8000c18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <MX_ADC2_Init+0xdc>)
 8000c20:	f001 fa82 	bl	8002128 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000c2a:	f000 f8b3 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000004c 	.word	0x2000004c
 8000c3c:	50000100 	.word	0x50000100
 8000c40:	10c00010 	.word	0x10c00010
 8000c44:	0c900008 	.word	0x0c900008

08000c48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d08 <MX_FDCAN1_Init+0xc0>)
 8000c50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c52:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c58:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c5e:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c64:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c70:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000c76:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c78:	2208      	movs	r2, #8
 8000c7a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c84:	220d      	movs	r2, #13
 8000c86:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000cb8:	4812      	ldr	r0, [pc, #72]	@ (8000d04 <MX_FDCAN1_Init+0xbc>)
 8000cba:	f002 faf3 	bl	80032a4 <HAL_FDCAN_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000cc4:	f000 f866 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  tx_header.Identifier = 0x301;  // no need to init address yet
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000cca:	f240 3201 	movw	r2, #769	@ 0x301
 8000cce:	601a      	str	r2, [r3, #0]
    tx_header.IdType = FDCAN_STANDARD_ID;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
    tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
    tx_header.DataLength = FDCAN_DLC_BYTES_8;
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	60da      	str	r2, [r3, #12]
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
    tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
    tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
    tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
    tx_header.MessageMarker = 0;
 8000cfa:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <MX_FDCAN1_Init+0xc4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000118 	.word	0x20000118
 8000d08:	40006400 	.word	0x40006400
 8000d0c:	200002a4 	.word	0x200002a4

08000d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_DMA_Init+0x50>)
 8000d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d1a:	4a11      	ldr	r2, [pc, #68]	@ (8000d60 <MX_DMA_Init+0x50>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_DMA_Init+0x50>)
 8000d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_DMA_Init+0x50>)
 8000d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <MX_DMA_Init+0x50>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_DMA_Init+0x50>)
 8000d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200b      	movs	r0, #11
 8000d4c:	f002 f803 	bl	8002d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d50:	200b      	movs	r0, #11
 8000d52:	f002 f81a 	bl	8002d8a <HAL_NVIC_EnableIRQ>

}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_GPIO_Init+0x2c>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <MX_GPIO_Init+0x2c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_GPIO_Init+0x2c>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <Error_Handler+0x8>

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dd6:	f003 f9e3 	bl	80041a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b09a      	sub	sp, #104	@ 0x68
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2244      	movs	r2, #68	@ 0x44
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 fe3c 	bl	8005a86 <memset>
  if(hadc->Instance==ADC2)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a38      	ldr	r2, [pc, #224]	@ (8000ef4 <HAL_ADC_MspInit+0x10c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d168      	bne.n	8000eea <HAL_ADC_MspInit+0x102>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000e1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fef7 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e34:	f7ff ffae 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e38:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef8 <HAL_ADC_MspInit+0x110>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef8 <HAL_ADC_MspInit+0x110>)
 8000e3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e44:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef8 <HAL_ADC_MspInit+0x110>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <HAL_ADC_MspInit+0x110>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	4a28      	ldr	r2, [pc, #160]	@ (8000ef8 <HAL_ADC_MspInit+0x110>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <HAL_ADC_MspInit+0x110>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e68:	23c0      	movs	r3, #192	@ 0xc0
 8000e6a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f002 ff37 	bl	8003cf0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000e84:	4a1e      	ldr	r2, [pc, #120]	@ (8000f00 <HAL_ADC_MspInit+0x118>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000e8a:	2224      	movs	r2, #36	@ 0x24
 8000e8c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000e9c:	2280      	movs	r2, #128	@ 0x80
 8000e9e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000ea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000eaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eae:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ebc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ebe:	480f      	ldr	r0, [pc, #60]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000ec0:	f001 ff7e 	bl	8002dc0 <HAL_DMA_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8000eca:	f7ff ff63 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ed4:	4a09      	ldr	r2, [pc, #36]	@ (8000efc <HAL_ADC_MspInit+0x114>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2012      	movs	r0, #18
 8000ee0:	f001 ff39 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ee4:	2012      	movs	r0, #18
 8000ee6:	f001 ff50 	bl	8002d8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	3768      	adds	r7, #104	@ 0x68
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	50000100 	.word	0x50000100
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	200000b8 	.word	0x200000b8
 8000f00:	40020008 	.word	0x40020008

08000f04 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09a      	sub	sp, #104	@ 0x68
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2244      	movs	r2, #68	@ 0x44
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 fdae 	bl	8005a86 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a24      	ldr	r2, [pc, #144]	@ (8000fc0 <HAL_FDCAN_MspInit+0xbc>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d141      	bne.n	8000fb8 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000f3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f3e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fe69 	bl	8004c1c <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000f50:	f7ff ff20 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <HAL_FDCAN_MspInit+0xc0>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f58:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <HAL_FDCAN_MspInit+0xc0>)
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <HAL_FDCAN_MspInit+0xc0>)
 8000f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <HAL_FDCAN_MspInit+0xc0>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f70:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <HAL_FDCAN_MspInit+0xc0>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_FDCAN_MspInit+0xc0>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f88:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f96:	2309      	movs	r3, #9
 8000f98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa4:	f002 fea4 	bl	8003cf0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2015      	movs	r0, #21
 8000fae:	f001 fed2 	bl	8002d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000fb2:	2015      	movs	r0, #21
 8000fb4:	f001 fee9 	bl	8002d8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000fb8:	bf00      	nop
 8000fba:	3768      	adds	r7, #104	@ 0x68
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40006400 	.word	0x40006400
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101e:	f000 f993 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <DMA1_Channel1_IRQHandler+0x10>)
 800102e:	f001 ffea 	bl	8003006 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000b8 	.word	0x200000b8

0800103c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <ADC1_2_IRQHandler+0x10>)
 8001042:	f000 fe39 	bl	8001cb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000004c 	.word	0x2000004c

08001050 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <FDCAN1_IT0_IRQHandler+0x10>)
 8001056:	f002 fbd1 	bl	80037fc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000118 	.word	0x20000118

08001064 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001088:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800108a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800108c:	f7ff ffea 	bl	8001064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	@ (80010c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <LoopForever+0xe>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	@ (80010d4 <LoopForever+0x16>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f004 fcef 	bl	8005a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ba:	f7ff fc4f 	bl	800095c <main>

080010be <LoopForever>:

LoopForever:
    b LoopForever
 80010be:	e7fe      	b.n	80010be <LoopForever>
  ldr   r0, =_estack
 80010c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80010cc:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 80010d0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80010d4:	20000370 	.word	0x20000370

080010d8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <COMP1_2_3_IRQHandler>
	...

080010dc <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <BSP_LED_Init+0x64>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <BSP_LED_Init+0x64>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <BSP_LED_Init+0x64>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80010fe:	2320      	movs	r3, #32
 8001100:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <BSP_LED_Init+0x68>)
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	f107 020c 	add.w	r2, r7, #12
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f002 fde7 	bl	8003cf0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <BSP_LED_Init+0x68>)
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	2120      	movs	r1, #32
 800112c:	2200      	movs	r2, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f002 ff60 	bl	8003ff4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	2000000c 	.word	0x2000000c

08001148 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d903      	bls.n	8001166 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800115e:	f06f 0301 	mvn.w	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e018      	b.n	8001198 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2294      	movs	r2, #148	@ 0x94
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <BSP_COM_Init+0x5c>)
 8001170:	4413      	add	r3, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f84a 	bl	800120c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2294      	movs	r2, #148	@ 0x94
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <BSP_COM_Init+0x5c>)
 8001182:	4413      	add	r3, r2
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f80e 	bl	80011a8 <MX_LPUART1_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001192:	f06f 0303 	mvn.w	r3, #3
 8001196:	e000      	b.n	800119a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001198:	68fb      	ldr	r3, [r7, #12]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002d8 	.word	0x200002d8

080011a8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_LPUART1_Init+0x60>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	220c      	movs	r2, #12
 80011c6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	895b      	ldrh	r3, [r3, #10]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	899b      	ldrh	r3, [r3, #12]
 80011e8:	461a      	mov	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011f4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f003 ff00 	bl	8004ffc <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000010 	.word	0x20000010

0800120c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <COM1_MspInit+0x94>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	4a21      	ldr	r2, [pc, #132]	@ (80012a0 <COM1_MspInit+0x94>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001220:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <COM1_MspInit+0x94>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800122c:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <COM1_MspInit+0x94>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <COM1_MspInit+0x94>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001238:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <COM1_MspInit+0x94>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <COM1_MspInit+0x94>)
 8001246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001248:	4a15      	ldr	r2, [pc, #84]	@ (80012a0 <COM1_MspInit+0x94>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <COM1_MspInit+0x94>)
 8001252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800125c:	2304      	movs	r3, #4
 800125e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800126c:	230c      	movs	r3, #12
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f002 fd39 	bl	8003cf0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800127e:	2308      	movs	r3, #8
 8001280:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001286:	230c      	movs	r3, #12
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001294:	f002 fd2c 	bl	8003cf0 <HAL_GPIO_Init>
}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	@ 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f001 fd46 	bl	8002d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 f80d 	bl	80012d4 <HAL_InitTick>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	e001      	b.n	80012ca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c6:	f7ff fd6b 	bl	8000da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ca:	79fb      	ldrb	r3, [r7, #7]

}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <HAL_InitTick+0x68>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d022      	beq.n	800132e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_InitTick+0x6c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <HAL_InitTick+0x68>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fd52 	bl	8002da6 <HAL_SYSTICK_Config>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10f      	bne.n	8001328 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	d809      	bhi.n	8001322 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130e:	2200      	movs	r2, #0
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	f04f 30ff 	mov.w	r0, #4294967295
 8001316:	f001 fd1e 	bl	8002d56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_InitTick+0x70>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	e007      	b.n	8001332 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e004      	b.n	8001332 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000018 	.word	0x20000018
 8001340:	20000008 	.word	0x20000008
 8001344:	20000014 	.word	0x20000014

08001348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_IncTick+0x1c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_IncTick+0x20>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4413      	add	r3, r2
 8001356:	4a03      	ldr	r2, [pc, #12]	@ (8001364 <HAL_IncTick+0x1c>)
 8001358:	6013      	str	r3, [r2, #0]
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	2000036c 	.word	0x2000036c
 8001368:	20000018 	.word	0x20000018

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	2000036c 	.word	0x2000036c

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d004      	beq.n	80013a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <HAL_Delay+0x40>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4413      	add	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a8:	bf00      	nop
 80013aa:	f7ff ffdf 	bl	800136c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d8f7      	bhi.n	80013aa <HAL_Delay+0x26>
  {
  }
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000018 	.word	0x20000018

080013c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3360      	adds	r3, #96	@ 0x60
 8001442:	461a      	mov	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <LL_ADC_SetOffset+0x44>)
 8001452:	4013      	ands	r3, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	4313      	orrs	r3, r2
 8001460:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001468:	bf00      	nop
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	03fff000 	.word	0x03fff000

08001478 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3360      	adds	r3, #96	@ 0x60
 8001486:	461a      	mov	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3360      	adds	r3, #96	@ 0x60
 80014b4:	461a      	mov	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014da:	b480      	push	{r7}
 80014dc:	b087      	sub	sp, #28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3360      	adds	r3, #96	@ 0x60
 80014ea:	461a      	mov	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	431a      	orrs	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3360      	adds	r3, #96	@ 0x60
 8001520:	461a      	mov	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	431a      	orrs	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	615a      	str	r2, [r3, #20]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001592:	b480      	push	{r7}
 8001594:	b087      	sub	sp, #28
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3330      	adds	r3, #48	@ 0x30
 80015a2:	461a      	mov	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	4413      	add	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	211f      	movs	r1, #31
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	401a      	ands	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	0e9b      	lsrs	r3, r3, #26
 80015ca:	f003 011f 	and.w	r1, r3, #31
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	431a      	orrs	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015de:	bf00      	nop
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3314      	adds	r3, #20
 8001620:	461a      	mov	r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	0e5b      	lsrs	r3, r3, #25
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	4413      	add	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	0d1b      	lsrs	r3, r3, #20
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2107      	movs	r1, #7
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	401a      	ands	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	0d1b      	lsrs	r3, r3, #20
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0318 	and.w	r3, r3, #24
 800168a:	4908      	ldr	r1, [pc, #32]	@ (80016ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800168c:	40d9      	lsrs	r1, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	400b      	ands	r3, r1
 8001692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001696:	431a      	orrs	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	0007ffff 	.word	0x0007ffff

080016b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 031f 	and.w	r3, r3, #31
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6093      	str	r3, [r2, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800171c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001720:	d101      	bne.n	8001726 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001748:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001770:	d101      	bne.n	8001776 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001794:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <LL_ADC_IsEnabled+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_ADC_IsEnabled+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017e6:	f043 0204 	orr.w	r2, r3, #4
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b04      	cmp	r3, #4
 800180c:	d101      	bne.n	8001812 <LL_ADC_REG_IsConversionOngoing+0x18>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b08      	cmp	r3, #8
 8001832:	d101      	bne.n	8001838 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b089      	sub	sp, #36	@ 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e167      	b.n	8001b32 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fab9 	bl	8000de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff3f 	bl	800170c <LL_ADC_IsDeepPowerDownEnabled>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff25 	bl	80016e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff5a 	bl	800175c <LL_ADC_IsInternalRegulatorEnabled>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d115      	bne.n	80018da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff3e 	bl	8001734 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b8:	4ba0      	ldr	r3, [pc, #640]	@ (8001b3c <HAL_ADC_Init+0x2f4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	4aa0      	ldr	r2, [pc, #640]	@ (8001b40 <HAL_ADC_Init+0x2f8>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f9      	bne.n	80018ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff3c 	bl	800175c <LL_ADC_IsInternalRegulatorEnabled>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10d      	bne.n	8001906 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ee:	f043 0210 	orr.w	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff75 	bl	80017fa <LL_ADC_REG_IsConversionOngoing>
 8001910:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 8100 	bne.w	8001b20 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80fc 	bne.w	8001b20 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001930:	f043 0202 	orr.w	r2, r3, #2
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff35 	bl	80017ac <LL_ADC_IsEnabled>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d111      	bne.n	800196c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001948:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800194c:	f7ff ff2e 	bl	80017ac <LL_ADC_IsEnabled>
 8001950:	4604      	mov	r4, r0
 8001952:	487c      	ldr	r0, [pc, #496]	@ (8001b44 <HAL_ADC_Init+0x2fc>)
 8001954:	f7ff ff2a 	bl	80017ac <LL_ADC_IsEnabled>
 8001958:	4603      	mov	r3, r0
 800195a:	4323      	orrs	r3, r4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4619      	mov	r1, r3
 8001966:	4878      	ldr	r0, [pc, #480]	@ (8001b48 <HAL_ADC_Init+0x300>)
 8001968:	f7ff fd2e 	bl	80013c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7f5b      	ldrb	r3, [r3, #29]
 8001970:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001976:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800197c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001982:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800198a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001996:	2b01      	cmp	r3, #1
 8001998:	d106      	bne.n	80019a8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199e:	3b01      	subs	r3, #1
 80019a0:	045b      	lsls	r3, r3, #17
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d009      	beq.n	80019c4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	4b60      	ldr	r3, [pc, #384]	@ (8001b4c <HAL_ADC_Init+0x304>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff14 	bl	8001820 <LL_ADC_INJ_IsConversionOngoing>
 80019f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d16d      	bne.n	8001adc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d16a      	bne.n	8001adc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a0a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d017      	beq.n	8001a68 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6911      	ldr	r1, [r2, #16]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a66:	e013      	b.n	8001a90 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d118      	bne.n	8001acc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001abc:	430a      	orrs	r2, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	e007      	b.n	8001adc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10c      	bne.n	8001afe <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f023 010f 	bic.w	r1, r3, #15
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	1e5a      	subs	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001afc:	e007      	b.n	8001b0e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 020f 	bic.w	r2, r2, #15
 8001b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b1e:	e007      	b.n	8001b30 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	@ 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd90      	pop	{r4, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	053e2d63 	.word	0x053e2d63
 8001b44:	50000100 	.word	0x50000100
 8001b48:	50000300 	.word	0x50000300
 8001b4c:	fff04007 	.word	0xfff04007

08001b50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b5c:	4851      	ldr	r0, [pc, #324]	@ (8001ca4 <HAL_ADC_Start_DMA+0x154>)
 8001b5e:	f7ff fda7 	bl	80016b0 <LL_ADC_GetMultimode>
 8001b62:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fe46 	bl	80017fa <LL_ADC_REG_IsConversionOngoing>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 808f 	bne.w	8001c94 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_Start_DMA+0x34>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e08a      	b.n	8001c9a <HAL_ADC_Start_DMA+0x14a>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d002      	beq.n	8001b9e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b09      	cmp	r3, #9
 8001b9c:	d173      	bne.n	8001c86 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 feb2 	bl	8002908 <ADC_Enable>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d166      	bne.n	8001c7c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a38      	ldr	r2, [pc, #224]	@ (8001ca8 <HAL_ADC_Start_DMA+0x158>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d002      	beq.n	8001bd2 <HAL_ADC_Start_DMA+0x82>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	e001      	b.n	8001bd6 <HAL_ADC_Start_DMA+0x86>
 8001bd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d002      	beq.n	8001be4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c00:	f023 0206 	bic.w	r2, r3, #6
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c08:	e002      	b.n	8001c10 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c14:	4a25      	ldr	r2, [pc, #148]	@ (8001cac <HAL_ADC_Start_DMA+0x15c>)
 8001c16:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1c:	4a24      	ldr	r2, [pc, #144]	@ (8001cb0 <HAL_ADC_Start_DMA+0x160>)
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c24:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <HAL_ADC_Start_DMA+0x164>)
 8001c26:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	221c      	movs	r2, #28
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0210 	orr.w	r2, r2, #16
 8001c46:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3340      	adds	r3, #64	@ 0x40
 8001c62:	4619      	mov	r1, r3
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f001 f952 	bl	8002f10 <HAL_DMA_Start_IT>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fdac 	bl	80017d2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c7a:	e00d      	b.n	8001c98 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001c84:	e008      	b.n	8001c98 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001c92:	e001      	b.n	8001c98 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
 8001c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	50000300 	.word	0x50000300
 8001ca8:	50000100 	.word	0x50000100
 8001cac:	08002a15 	.word	0x08002a15
 8001cb0:	08002aed 	.word	0x08002aed
 8001cb4:	08002b09 	.word	0x08002b09

08001cb8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cd4:	4883      	ldr	r0, [pc, #524]	@ (8001ee4 <HAL_ADC_IRQHandler+0x22c>)
 8001cd6:	f7ff fceb 	bl	80016b0 <LL_ADC_GetMultimode>
 8001cda:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d017      	beq.n	8001d16 <HAL_ADC_IRQHandler+0x5e>
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d012      	beq.n	8001d16 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d00:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 ff3f 	bl	8002b8c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2202      	movs	r2, #2
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x72>
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8085 	beq.w	8001e40 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d07f      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fc05 	bl	800156c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d064      	beq.n	8001e32 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ee8 <HAL_ADC_IRQHandler+0x230>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d002      	beq.n	8001d78 <HAL_ADC_IRQHandler+0xc0>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e001      	b.n	8001d7c <HAL_ADC_IRQHandler+0xc4>
 8001d78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d008      	beq.n	8001d96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d002      	beq.n	8001d96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b09      	cmp	r3, #9
 8001d94:	d104      	bne.n	8001da0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	623b      	str	r3, [r7, #32]
 8001d9e:	e00d      	b.n	8001dbc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a50      	ldr	r2, [pc, #320]	@ (8001ee8 <HAL_ADC_IRQHandler+0x230>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d002      	beq.n	8001db0 <HAL_ADC_IRQHandler+0xf8>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	e001      	b.n	8001db4 <HAL_ADC_IRQHandler+0xfc>
 8001db0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001db4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d135      	bne.n	8001e32 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d12e      	bne.n	8001e32 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fd0e 	bl	80017fa <LL_ADC_REG_IsConversionOngoing>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d11a      	bne.n	8001e1a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 020c 	bic.w	r2, r2, #12
 8001df2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d112      	bne.n	8001e32 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e18:	e00b      	b.n	8001e32 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	f043 0210 	orr.w	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fd82 	bl	800093c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_ADC_IRQHandler+0x19c>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 809e 	beq.w	8001f9c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8098 	beq.w	8001f9c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fbae 	bl	80015ea <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e8e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fb69 	bl	800156c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e9a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <HAL_ADC_IRQHandler+0x230>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d002      	beq.n	8001eac <HAL_ADC_IRQHandler+0x1f4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e001      	b.n	8001eb0 <HAL_ADC_IRQHandler+0x1f8>
 8001eac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d008      	beq.n	8001eca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d002      	beq.n	8001eca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b07      	cmp	r3, #7
 8001ec8:	d104      	bne.n	8001ed4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	623b      	str	r3, [r7, #32]
 8001ed2:	e011      	b.n	8001ef8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a03      	ldr	r2, [pc, #12]	@ (8001ee8 <HAL_ADC_IRQHandler+0x230>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d006      	beq.n	8001eec <HAL_ADC_IRQHandler+0x234>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e005      	b.n	8001ef0 <HAL_ADC_IRQHandler+0x238>
 8001ee4:	50000300 	.word	0x50000300
 8001ee8:	50000100 	.word	0x50000100
 8001eec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ef0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d047      	beq.n	8001f8e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x260>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03f      	beq.n	8001f8e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d13a      	bne.n	8001f8e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f22:	2b40      	cmp	r3, #64	@ 0x40
 8001f24:	d133      	bne.n	8001f8e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d12e      	bne.n	8001f8e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fc73 	bl	8001820 <LL_ADC_INJ_IsConversionOngoing>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d11a      	bne.n	8001f76 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f4e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d112      	bne.n	8001f8e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f74:	e00b      	b.n	8001f8e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fdd4 	bl	8002b3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2260      	movs	r2, #96	@ 0x60
 8001f9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d011      	beq.n	8001fca <HAL_ADC_IRQHandler+0x312>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00c      	beq.n	8001fca <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f89f 	bl	8002100 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x342>
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00d      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fdba 	bl	8002b64 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <HAL_ADC_IRQHandler+0x372>
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00d      	beq.n	800202a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002012:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fdac 	bl	8002b78 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d036      	beq.n	80020a2 <HAL_ADC_IRQHandler+0x3ea>
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d031      	beq.n	80020a2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002046:	2301      	movs	r3, #1
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
 800204a:	e014      	b.n	8002076 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002052:	4825      	ldr	r0, [pc, #148]	@ (80020e8 <HAL_ADC_IRQHandler+0x430>)
 8002054:	f7ff fb3a 	bl	80016cc <LL_ADC_GetMultiDMATransfer>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800205e:	2301      	movs	r3, #1
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
 8002062:	e008      	b.n	8002076 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002072:	2301      	movs	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10e      	bne.n	800209a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002080:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208c:	f043 0202 	orr.w	r2, r3, #2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f83d 	bl	8002114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2210      	movs	r2, #16
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d018      	beq.n	80020de <HAL_ADC_IRQHandler+0x426>
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d013      	beq.n	80020de <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c6:	f043 0208 	orr.w	r2, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fd39 	bl	8002b50 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	@ 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	50000300 	.word	0x50000300

080020ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b0b6      	sub	sp, #216	@ 0xd8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x22>
 8002146:	2302      	movs	r3, #2
 8002148:	e3c8      	b.n	80028dc <HAL_ADC_ConfigChannel+0x7b4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fb4f 	bl	80017fa <LL_ADC_REG_IsConversionOngoing>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 83ad 	bne.w	80028be <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	f7ff fa0e 	bl	8001592 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fb3d 	bl	80017fa <LL_ADC_REG_IsConversionOngoing>
 8002180:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fb49 	bl	8001820 <LL_ADC_INJ_IsConversionOngoing>
 800218e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 81d9 	bne.w	800254e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800219c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 81d4 	bne.w	800254e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021ae:	d10f      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7ff fa28 	bl	8001610 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f9bc 	bl	8001546 <LL_ADC_SetSamplingTimeCommonConfig>
 80021ce:	e00e      	b.n	80021ee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	461a      	mov	r2, r3
 80021de:	f7ff fa17 	bl	8001610 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff f9ac 	bl	8001546 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d022      	beq.n	8002256 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6919      	ldr	r1, [r3, #16]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002220:	f7ff f906 	bl	8001430 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6919      	ldr	r1, [r3, #16]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	461a      	mov	r2, r3
 8002232:	f7ff f952 	bl	80014da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_ADC_ConfigChannel+0x124>
 8002246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800224a:	e000      	b.n	800224e <HAL_ADC_ConfigChannel+0x126>
 800224c:	2300      	movs	r3, #0
 800224e:	461a      	mov	r2, r3
 8002250:	f7ff f95e 	bl	8001510 <LL_ADC_SetOffsetSaturation>
 8002254:	e17b      	b.n	800254e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f90b 	bl	8001478 <LL_ADC_GetOffsetChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x15a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f900 	bl	8001478 <LL_ADC_GetOffsetChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	e01e      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x198>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f8f5 	bl	8001478 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e004      	b.n	80022be <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80022b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1b0>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	e018      	b.n	800230a <HAL_ADC_ConfigChannel+0x1e2>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80022ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80022f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e004      	b.n	800230a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002300:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800230a:	429a      	cmp	r2, r3
 800230c:	d106      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f8c4 	bl	80014a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f8a8 	bl	8001478 <LL_ADC_GetOffsetChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x220>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f89d 	bl	8001478 <LL_ADC_GetOffsetChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	f003 021f 	and.w	r2, r3, #31
 8002346:	e01e      	b.n	8002386 <HAL_ADC_ConfigChannel+0x25e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f892 	bl	8001478 <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800236a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800236e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e004      	b.n	8002384 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800237a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_ConfigChannel+0x276>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	e018      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x2a8>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80023b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e004      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80023c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d106      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f861 	bl	80014a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff f845 	bl	8001478 <LL_ADC_GetOffsetChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <HAL_ADC_ConfigChannel+0x2e6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2102      	movs	r1, #2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f83a 	bl	8001478 <LL_ADC_GetOffsetChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	e01e      	b.n	800244c <HAL_ADC_ConfigChannel+0x324>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff f82f 	bl	8001478 <LL_ADC_GetOffsetChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800242c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002434:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e004      	b.n	800244a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002440:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x33c>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	e016      	b.n	8002492 <HAL_ADC_ConfigChannel+0x36a>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002476:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800247c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e004      	b.n	8002492 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002488:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002492:	429a      	cmp	r2, r3
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f800 	bl	80014a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe ffe4 	bl	8001478 <LL_ADC_GetOffsetChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x3a8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2103      	movs	r1, #3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe ffd9 	bl	8001478 <LL_ADC_GetOffsetChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	f003 021f 	and.w	r2, r3, #31
 80024ce:	e017      	b.n	8002500 <HAL_ADC_ConfigChannel+0x3d8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2103      	movs	r1, #3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe ffce 	bl	8001478 <LL_ADC_GetOffsetChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024ea:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80024ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e003      	b.n	80024fe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80024f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x3f0>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	e011      	b.n	800253c <HAL_ADC_ConfigChannel+0x414>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002528:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800252a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800253c:	429a      	cmp	r2, r3
 800253e:	d106      	bne.n	800254e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	2103      	movs	r1, #3
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe ffab 	bl	80014a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f92a 	bl	80017ac <LL_ADC_IsEnabled>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 8140 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	461a      	mov	r2, r3
 800256e:	f7ff f87b 	bl	8001668 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a8f      	ldr	r2, [pc, #572]	@ (80027b4 <HAL_ADC_ConfigChannel+0x68c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	f040 8131 	bne.w	80027e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x47e>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0e9b      	lsrs	r3, r3, #26
 8002594:	3301      	adds	r3, #1
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2b09      	cmp	r3, #9
 800259c:	bf94      	ite	ls
 800259e:	2301      	movls	r3, #1
 80025a0:	2300      	movhi	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	e019      	b.n	80025da <HAL_ADC_ConfigChannel+0x4b2>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80025b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025b6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80025b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80025c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d079      	beq.n	80026d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d107      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x4d2>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	3301      	adds	r3, #1
 80025f2:	069b      	lsls	r3, r3, #26
 80025f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025f8:	e015      	b.n	8002626 <HAL_ADC_ConfigChannel+0x4fe>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800260a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800260c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e003      	b.n	800261e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	069b      	lsls	r3, r3, #26
 8002622:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x51e>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0e9b      	lsrs	r3, r3, #26
 8002638:	3301      	adds	r3, #1
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2101      	movs	r1, #1
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	e017      	b.n	8002676 <HAL_ADC_ConfigChannel+0x54e>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002656:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e003      	b.n	800266a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2101      	movs	r1, #1
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	ea42 0103 	orr.w	r1, r2, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10a      	bne.n	800269c <HAL_ADC_ConfigChannel+0x574>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	3301      	adds	r3, #1
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	051b      	lsls	r3, r3, #20
 800269a:	e018      	b.n	80026ce <HAL_ADC_ConfigChannel+0x5a6>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80026ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80026b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 021f 	and.w	r2, r3, #31
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ce:	430b      	orrs	r3, r1
 80026d0:	e081      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d107      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x5c6>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	3301      	adds	r3, #1
 80026e6:	069b      	lsls	r3, r3, #26
 80026e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026ec:	e015      	b.n	800271a <HAL_ADC_ConfigChannel+0x5f2>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002706:	2320      	movs	r3, #32
 8002708:	e003      	b.n	8002712 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	3301      	adds	r3, #1
 8002714:	069b      	lsls	r3, r3, #26
 8002716:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_ADC_ConfigChannel+0x612>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0e9b      	lsrs	r3, r3, #26
 800272c:	3301      	adds	r3, #1
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	e017      	b.n	800276a <HAL_ADC_ConfigChannel+0x642>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	61fb      	str	r3, [r7, #28]
  return result;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e003      	b.n	800275e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	ea42 0103 	orr.w	r1, r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x66e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	3301      	adds	r3, #1
 8002782:	f003 021f 	and.w	r2, r3, #31
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	3b1e      	subs	r3, #30
 800278e:	051b      	lsls	r3, r3, #20
 8002790:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002794:	e01e      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x6ac>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	613b      	str	r3, [r7, #16]
  return result;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d104      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e006      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x698>
 80027b2:	bf00      	nop
 80027b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b1e      	subs	r3, #30
 80027ce:	051b      	lsls	r3, r3, #20
 80027d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe ff18 	bl	8001610 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b3f      	ldr	r3, [pc, #252]	@ (80028e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d071      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ec:	483e      	ldr	r0, [pc, #248]	@ (80028e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80027ee:	f7fe fe11 	bl	8001414 <LL_ADC_GetCommonPathInternalCh>
 80027f2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3c      	ldr	r2, [pc, #240]	@ (80028ec <HAL_ADC_ConfigChannel+0x7c4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_ADC_ConfigChannel+0x6e2>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3a      	ldr	r2, [pc, #232]	@ (80028f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d127      	bne.n	800285a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800280a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800280e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d121      	bne.n	800285a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800281e:	d157      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002824:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002828:	4619      	mov	r1, r3
 800282a:	482f      	ldr	r0, [pc, #188]	@ (80028e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800282c:	f7fe fddf 	bl	80013ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002830:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	4a30      	ldr	r2, [pc, #192]	@ (80028f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800284a:	e002      	b.n	8002852 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3b01      	subs	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f9      	bne.n	800284c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002858:	e03a      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a27      	ldr	r2, [pc, #156]	@ (80028fc <HAL_ADC_ConfigChannel+0x7d4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d113      	bne.n	800288c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a22      	ldr	r2, [pc, #136]	@ (8002900 <HAL_ADC_ConfigChannel+0x7d8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02a      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800287a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002882:	4619      	mov	r1, r3
 8002884:	4818      	ldr	r0, [pc, #96]	@ (80028e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002886:	f7fe fdb2 	bl	80013ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800288a:	e021      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1c      	ldr	r2, [pc, #112]	@ (8002904 <HAL_ADC_ConfigChannel+0x7dc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d11c      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800289a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d116      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a16      	ldr	r2, [pc, #88]	@ (8002900 <HAL_ADC_ConfigChannel+0x7d8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d011      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028b4:	4619      	mov	r1, r3
 80028b6:	480c      	ldr	r0, [pc, #48]	@ (80028e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80028b8:	f7fe fd99 	bl	80013ee <LL_ADC_SetCommonPathInternalCh>
 80028bc:	e008      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80028dc:	4618      	mov	r0, r3
 80028de:	37d8      	adds	r7, #216	@ 0xd8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	80080000 	.word	0x80080000
 80028e8:	50000300 	.word	0x50000300
 80028ec:	c3210000 	.word	0xc3210000
 80028f0:	90c00010 	.word	0x90c00010
 80028f4:	20000008 	.word	0x20000008
 80028f8:	053e2d63 	.word	0x053e2d63
 80028fc:	c7520000 	.word	0xc7520000
 8002900:	50000100 	.word	0x50000100
 8002904:	cb840000 	.word	0xcb840000

08002908 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe ff47 	bl	80017ac <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d169      	bne.n	80029f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <ADC_Enable+0xfc>)
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e055      	b.n	80029fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe ff16 	bl	8001784 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002958:	482b      	ldr	r0, [pc, #172]	@ (8002a08 <ADC_Enable+0x100>)
 800295a:	f7fe fd5b 	bl	8001414 <LL_ADC_GetCommonPathInternalCh>
 800295e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002968:	4b28      	ldr	r3, [pc, #160]	@ (8002a0c <ADC_Enable+0x104>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	4a28      	ldr	r2, [pc, #160]	@ (8002a10 <ADC_Enable+0x108>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002982:	e002      	b.n	800298a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3b01      	subs	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002990:	f7fe fcec 	bl	800136c <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002996:	e028      	b.n	80029ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe ff05 	bl	80017ac <LL_ADC_IsEnabled>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fee9 	bl	8001784 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b2:	f7fe fcdb 	bl	800136c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d914      	bls.n	80029ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d00d      	beq.n	80029ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d2:	f043 0210 	orr.w	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e007      	b.n	80029fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d1cf      	bne.n	8002998 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	8000003f 	.word	0x8000003f
 8002a08:	50000300 	.word	0x50000300
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	053e2d63 	.word	0x053e2d63

08002a14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d14b      	bne.n	8002ac6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d021      	beq.n	8002a8c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fd8d 	bl	800156c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d032      	beq.n	8002abe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d12b      	bne.n	8002abe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11f      	bne.n	8002abe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a8a:	e018      	b.n	8002abe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d111      	bne.n	8002abe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7fd ff3c 	bl	800093c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ac4:	e00e      	b.n	8002ae4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff fb1e 	bl	8002114 <HAL_ADC_ErrorCallback>
}
 8002ad8:	e004      	b.n	8002ae4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff faf6 	bl	80020ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b26:	f043 0204 	orr.w	r2, r3, #4
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff faf0 	bl	8002114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd2:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60d3      	str	r3, [r2, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <__NVIC_GetPriorityGrouping+0x18>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0307 	and.w	r3, r3, #7
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db0b      	blt.n	8002c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	4907      	ldr	r1, [pc, #28]	@ (8002c3c <__NVIC_EnableIRQ+0x38>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	db0a      	blt.n	8002c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	490c      	ldr	r1, [pc, #48]	@ (8002c8c <__NVIC_SetPriority+0x4c>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	0112      	lsls	r2, r2, #4
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	440b      	add	r3, r1
 8002c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c68:	e00a      	b.n	8002c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4908      	ldr	r1, [pc, #32]	@ (8002c90 <__NVIC_SetPriority+0x50>)
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	3b04      	subs	r3, #4
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	761a      	strb	r2, [r3, #24]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f1c3 0307 	rsb	r3, r3, #7
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	bf28      	it	cs
 8002cb2:	2304      	movcs	r3, #4
 8002cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d902      	bls.n	8002cc4 <NVIC_EncodePriority+0x30>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3b03      	subs	r3, #3
 8002cc2:	e000      	b.n	8002cc6 <NVIC_EncodePriority+0x32>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43d9      	mvns	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	4313      	orrs	r3, r2
         );
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	@ 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d0c:	d301      	bcc.n	8002d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d12:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <SysTick_Config+0x40>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1a:	210f      	movs	r1, #15
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f7ff ff8e 	bl	8002c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <SysTick_Config+0x40>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2a:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <SysTick_Config+0x40>)
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	e000e010 	.word	0xe000e010

08002d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff29 	bl	8002ba0 <__NVIC_SetPriorityGrouping>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d64:	f7ff ff40 	bl	8002be8 <__NVIC_GetPriorityGrouping>
 8002d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff ff90 	bl	8002c94 <NVIC_EncodePriority>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff5f 	bl	8002c40 <__NVIC_SetPriority>
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff33 	bl	8002c04 <__NVIC_EnableIRQ>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffa4 	bl	8002cfc <SysTick_Config>
 8002db4:	4603      	mov	r3, r0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e08d      	b.n	8002eee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_DMA_Init+0x138>)
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d80f      	bhi.n	8002dfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b45      	ldr	r3, [pc, #276]	@ (8002efc <HAL_DMA_Init+0x13c>)
 8002de6:	4413      	add	r3, r2
 8002de8:	4a45      	ldr	r2, [pc, #276]	@ (8002f00 <HAL_DMA_Init+0x140>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	009a      	lsls	r2, r3, #2
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a42      	ldr	r2, [pc, #264]	@ (8002f04 <HAL_DMA_Init+0x144>)
 8002dfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dfc:	e00e      	b.n	8002e1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <HAL_DMA_Init+0x148>)
 8002e06:	4413      	add	r3, r2
 8002e08:	4a3d      	ldr	r2, [pc, #244]	@ (8002f00 <HAL_DMA_Init+0x140>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a3c      	ldr	r2, [pc, #240]	@ (8002f0c <HAL_DMA_Init+0x14c>)
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9b6 	bl	80031e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e7c:	d102      	bne.n	8002e84 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e98:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_DMA_Init+0x104>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d80c      	bhi.n	8002ec4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f9d6 	bl	800325c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	e008      	b.n	8002ed6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40020407 	.word	0x40020407
 8002efc:	bffdfff8 	.word	0xbffdfff8
 8002f00:	cccccccd 	.word	0xcccccccd
 8002f04:	40020000 	.word	0x40020000
 8002f08:	bffdfbf8 	.word	0xbffdfbf8
 8002f0c:	40020400 	.word	0x40020400

08002f10 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_DMA_Start_IT+0x20>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e066      	b.n	8002ffe <HAL_DMA_Start_IT+0xee>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d155      	bne.n	8002ff0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f8fb 	bl	8003164 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 020e 	orr.w	r2, r2, #14
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e00f      	b.n	8002fa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 020a 	orr.w	r2, r2, #10
 8002fa6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fc4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fdc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	e005      	b.n	8002ffc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2204      	movs	r2, #4
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d026      	beq.n	8003080 <HAL_DMA_IRQHandler+0x7a>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d021      	beq.n	8003080 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0204 	bic.w	r2, r2, #4
 8003058:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	2104      	movs	r1, #4
 8003068:	fa01 f202 	lsl.w	r2, r1, r2
 800306c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	2b00      	cmp	r3, #0
 8003074:	d071      	beq.n	800315a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800307e:	e06c      	b.n	800315a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2202      	movs	r2, #2
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d02e      	beq.n	80030f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d029      	beq.n	80030f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 020a 	bic.w	r2, r2, #10
 80030ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	2102      	movs	r1, #2
 80030d2:	fa01 f202 	lsl.w	r2, r1, r2
 80030d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d038      	beq.n	800315a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80030f0:	e033      	b.n	800315a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2208      	movs	r2, #8
 80030fc:	409a      	lsls	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02a      	beq.n	800315c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d025      	beq.n	800315c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 020e 	bic.w	r2, r2, #14
 800311e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800315a:	bf00      	nop
 800315c:	bf00      	nop
}
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800317a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800318c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f003 021f 	and.w	r2, r3, #31
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f202 	lsl.w	r2, r1, r2
 80031a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d108      	bne.n	80031c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031c2:	e007      	b.n	80031d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d802      	bhi.n	80031fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80031f4:	4b15      	ldr	r3, [pc, #84]	@ (800324c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e001      	b.n	80031fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031fc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3b08      	subs	r3, #8
 800320a:	4a12      	ldr	r2, [pc, #72]	@ (8003254 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	009a      	lsls	r2, r3, #2
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a0b      	ldr	r2, [pc, #44]	@ (8003258 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800322a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2201      	movs	r2, #1
 8003234:	409a      	lsls	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40020407 	.word	0x40020407
 800324c:	40020800 	.word	0x40020800
 8003250:	40020820 	.word	0x40020820
 8003254:	cccccccd 	.word	0xcccccccd
 8003258:	40020880 	.word	0x40020880

0800325c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	461a      	mov	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a08      	ldr	r2, [pc, #32]	@ (80032a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800327e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2201      	movs	r2, #1
 800328a:	409a      	lsls	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	1000823f 	.word	0x1000823f
 80032a0:	40020940 	.word	0x40020940

080032a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e147      	b.n	8003546 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fe1a 	bl	8000f04 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e0:	f7fe f844 	bl	800136c <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80032e6:	e012      	b.n	800330e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80032e8:	f7fe f840 	bl	800136c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b0a      	cmp	r3, #10
 80032f4:	d90b      	bls.n	800330e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e11b      	b.n	8003546 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d0e5      	beq.n	80032e8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800332c:	f7fe f81e 	bl	800136c <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003332:	e012      	b.n	800335a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003334:	f7fe f81a 	bl	800136c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b0a      	cmp	r3, #10
 8003340:	d90b      	bls.n	800335a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0f5      	b.n	8003546 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0e5      	beq.n	8003334 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0202 	orr.w	r2, r2, #2
 8003376:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a74      	ldr	r2, [pc, #464]	@ (8003550 <HAL_FDCAN_Init+0x2ac>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d103      	bne.n	800338a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003382:	4a74      	ldr	r2, [pc, #464]	@ (8003554 <HAL_FDCAN_Init+0x2b0>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7c1b      	ldrb	r3, [r3, #16]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d108      	bne.n	80033a4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033a0:	619a      	str	r2, [r3, #24]
 80033a2:	e007      	b.n	80033b4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7c5b      	ldrb	r3, [r3, #17]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d108      	bne.n	80033ce <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ca:	619a      	str	r2, [r3, #24]
 80033cc:	e007      	b.n	80033de <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033dc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7c9b      	ldrb	r3, [r3, #18]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d108      	bne.n	80033f8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033f4:	619a      	str	r2, [r3, #24]
 80033f6:	e007      	b.n	8003408 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003406:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800342c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0210 	bic.w	r2, r2, #16
 800343c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d108      	bne.n	8003458 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0204 	orr.w	r2, r2, #4
 8003454:	619a      	str	r2, [r3, #24]
 8003456:	e02c      	b.n	80034b2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d028      	beq.n	80034b2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d01c      	beq.n	80034a2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003476:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0210 	orr.w	r2, r2, #16
 8003486:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d110      	bne.n	80034b2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	619a      	str	r2, [r3, #24]
 80034a0:	e007      	b.n	80034b2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	3b01      	subs	r3, #1
 80034c0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034c2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034ca:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034da:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034dc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034e6:	d115      	bne.n	8003514 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f2:	3b01      	subs	r3, #1
 80034f4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80034f6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	3b01      	subs	r3, #1
 80034fe:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003500:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	3b01      	subs	r3, #1
 800350a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003510:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003512:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fb0e 	bl	8003b4c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40006400 	.word	0x40006400
 8003554:	40006500 	.word	0x40006500

08003558 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d110      	bne.n	800358e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e006      	b.n	800359c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003592:	f043 0204 	orr.w	r2, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d12c      	bne.n	800361a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e023      	b.n	8003628 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fafe 	bl	8003bf8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	fa01 f202 	lsl.w	r2, r1, r2
 8003608:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800360c:	2201      	movs	r2, #1
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	409a      	lsls	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e006      	b.n	8003628 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	f043 0208 	orr.w	r2, r3, #8
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003642:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d003      	beq.n	8003652 <HAL_FDCAN_ActivateNotification+0x22>
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b02      	cmp	r3, #2
 800364e:	f040 80c8 	bne.w	80037e2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003658:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03b      	beq.n	80036e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d031      	beq.n	80036e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d027      	beq.n	80036e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800369c:	2b00      	cmp	r3, #0
 800369e:	d004      	beq.n	80036aa <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01d      	beq.n	80036e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00c      	beq.n	80036f6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d107      	bne.n	80036f6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d13b      	bne.n	8003782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d131      	bne.n	8003782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d127      	bne.n	8003782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11d      	bne.n	8003782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d113      	bne.n	8003782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00c      	beq.n	8003792 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0202 	orr.w	r2, r2, #2
 8003790:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	430a      	orrs	r2, r1
 80037dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e006      	b.n	80037f0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	@ 0x30
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800380e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003818:	4013      	ands	r3, r2
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003830:	4013      	ands	r3, r2
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003848:	4013      	ands	r3, r2
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003852:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003856:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	6a3a      	ldr	r2, [r7, #32]
 8003860:	4013      	ands	r3, r2
 8003862:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800386e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	4013      	ands	r3, r2
 800387a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	099b      	lsrs	r3, r3, #6
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d006      	beq.n	80038b2 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2240      	movs	r2, #64	@ 0x40
 80038aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f92d 	bl	8003b0c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01a      	beq.n	80038f4 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d014      	beq.n	80038f4 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038d2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80038ec:	6939      	ldr	r1, [r7, #16]
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8ed 	bl	8003ace <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80038f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003900:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003902:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8ac 	bl	8003a62 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003916:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8ac 	bl	8003a78 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800392e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8ac 	bl	8003a8e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	0a5b      	lsrs	r3, r3, #9
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	0a5b      	lsrs	r3, r3, #9
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003956:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f8a3 	bl	8003aa4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	09db      	lsrs	r3, r3, #7
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d019      	beq.n	800399e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	09db      	lsrs	r3, r3, #7
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d013      	beq.n	800399e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800397e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4013      	ands	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2280      	movs	r2, #128	@ 0x80
 8003994:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f88d 	bl	8003ab8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	0b5b      	lsrs	r3, r3, #13
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	0b5b      	lsrs	r3, r3, #13
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039be:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f88f 	bl	8003ae4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	0bdb      	lsrs	r3, r3, #15
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	0bdb      	lsrs	r3, r3, #15
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80039e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f885 	bl	8003af8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	0b9b      	lsrs	r3, r3, #14
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	0b9b      	lsrs	r3, r3, #14
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003a2a:	69f9      	ldr	r1, [r7, #28]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f881 	bl	8003b34 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f863 	bl	8003b20 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3730      	adds	r7, #48	@ 0x30
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003b56:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b66:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6e:	041a      	lsls	r2, r3, #16
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b8c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	061a      	lsls	r2, r3, #24
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e005      	b.n	8003bda <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d3f3      	bcc.n	8003bce <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003be6:	bf00      	nop
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	4000a400 	.word	0x4000a400

08003bf8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	@ 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003c16:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	e00a      	b.n	8003c3a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003c2c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003c32:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c38:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003c44:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003c4a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003c50:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	3304      	adds	r3, #4
 8003c78:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	3304      	adds	r3, #4
 8003c84:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e020      	b.n	8003cce <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3303      	adds	r3, #3
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	440b      	add	r3, r1
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ca4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	440b      	add	r3, r1
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003cb2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	440a      	add	r2, r1
 8003cba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003cbc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4a06      	ldr	r2, [pc, #24]	@ (8003cec <FDCAN_CopyMessageToRAM+0xf4>)
 8003cd4:	5cd3      	ldrb	r3, [r2, r3]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d3d6      	bcc.n	8003c8c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	3724      	adds	r7, #36	@ 0x24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	08005b10 	.word	0x08005b10

08003cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cfe:	e15a      	b.n	8003fb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 814c 	beq.w	8003fb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d005      	beq.n	8003d30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d130      	bne.n	8003d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d66:	2201      	movs	r2, #1
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	f003 0201 	and.w	r2, r3, #1
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d017      	beq.n	8003dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	2203      	movs	r2, #3
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d123      	bne.n	8003e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	08da      	lsrs	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3208      	adds	r2, #8
 8003de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	220f      	movs	r2, #15
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	08da      	lsrs	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3208      	adds	r2, #8
 8003e1c:	6939      	ldr	r1, [r7, #16]
 8003e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0203 	and.w	r2, r3, #3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a6 	beq.w	8003fb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e64:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd4 <HAL_GPIO_Init+0x2e4>)
 8003e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e68:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd4 <HAL_GPIO_Init+0x2e4>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e70:	4b58      	ldr	r3, [pc, #352]	@ (8003fd4 <HAL_GPIO_Init+0x2e4>)
 8003e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e7c:	4a56      	ldr	r2, [pc, #344]	@ (8003fd8 <HAL_GPIO_Init+0x2e8>)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	3302      	adds	r3, #2
 8003e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	220f      	movs	r2, #15
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ea6:	d01f      	beq.n	8003ee8 <HAL_GPIO_Init+0x1f8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a4c      	ldr	r2, [pc, #304]	@ (8003fdc <HAL_GPIO_Init+0x2ec>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d019      	beq.n	8003ee4 <HAL_GPIO_Init+0x1f4>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe0 <HAL_GPIO_Init+0x2f0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <HAL_GPIO_Init+0x1f0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe4 <HAL_GPIO_Init+0x2f4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00d      	beq.n	8003edc <HAL_GPIO_Init+0x1ec>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a49      	ldr	r2, [pc, #292]	@ (8003fe8 <HAL_GPIO_Init+0x2f8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d007      	beq.n	8003ed8 <HAL_GPIO_Init+0x1e8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a48      	ldr	r2, [pc, #288]	@ (8003fec <HAL_GPIO_Init+0x2fc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_GPIO_Init+0x1e4>
 8003ed0:	2305      	movs	r3, #5
 8003ed2:	e00a      	b.n	8003eea <HAL_GPIO_Init+0x1fa>
 8003ed4:	2306      	movs	r3, #6
 8003ed6:	e008      	b.n	8003eea <HAL_GPIO_Init+0x1fa>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e006      	b.n	8003eea <HAL_GPIO_Init+0x1fa>
 8003edc:	2303      	movs	r3, #3
 8003ede:	e004      	b.n	8003eea <HAL_GPIO_Init+0x1fa>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e002      	b.n	8003eea <HAL_GPIO_Init+0x1fa>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_GPIO_Init+0x1fa>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	f002 0203 	and.w	r2, r2, #3
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	4093      	lsls	r3, r2
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003efa:	4937      	ldr	r1, [pc, #220]	@ (8003fd8 <HAL_GPIO_Init+0x2e8>)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	3302      	adds	r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f08:	4b39      	ldr	r3, [pc, #228]	@ (8003ff0 <HAL_GPIO_Init+0x300>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f2c:	4a30      	ldr	r2, [pc, #192]	@ (8003ff0 <HAL_GPIO_Init+0x300>)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f32:	4b2f      	ldr	r3, [pc, #188]	@ (8003ff0 <HAL_GPIO_Init+0x300>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f56:	4a26      	ldr	r2, [pc, #152]	@ (8003ff0 <HAL_GPIO_Init+0x300>)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <HAL_GPIO_Init+0x300>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f80:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_GPIO_Init+0x300>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f86:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff0 <HAL_GPIO_Init+0x300>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003faa:	4a11      	ldr	r2, [pc, #68]	@ (8003ff0 <HAL_GPIO_Init+0x300>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f ae9d 	bne.w	8003d00 <HAL_GPIO_Init+0x10>
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	48000400 	.word	0x48000400
 8003fe0:	48000800 	.word	0x48000800
 8003fe4:	48000c00 	.word	0x48000c00
 8003fe8:	48001000 	.word	0x48001000
 8003fec:	48001400 	.word	0x48001400
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004010:	e002      	b.n	8004018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4013      	ands	r3, r2
 800403c:	041a      	lsls	r2, r3, #16
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	43d9      	mvns	r1, r3
 8004042:	887b      	ldrh	r3, [r7, #2]
 8004044:	400b      	ands	r3, r1
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d141      	bne.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004066:	4b4b      	ldr	r3, [pc, #300]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004072:	d131      	bne.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004074:	4b47      	ldr	r3, [pc, #284]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800407a:	4a46      	ldr	r2, [pc, #280]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004084:	4b43      	ldr	r3, [pc, #268]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800408c:	4a41      	ldr	r2, [pc, #260]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004094:	4b40      	ldr	r3, [pc, #256]	@ (8004198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2232      	movs	r2, #50	@ 0x32
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	4a3f      	ldr	r2, [pc, #252]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	0c9b      	lsrs	r3, r3, #18
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040aa:	e002      	b.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040b2:	4b38      	ldr	r3, [pc, #224]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040be:	d102      	bne.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f2      	bne.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c6:	4b33      	ldr	r3, [pc, #204]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d2:	d158      	bne.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e057      	b.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040de:	4a2d      	ldr	r2, [pc, #180]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040e8:	e04d      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f0:	d141      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040f2:	4b28      	ldr	r3, [pc, #160]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fe:	d131      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004100:	4b24      	ldr	r3, [pc, #144]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004106:	4a23      	ldr	r2, [pc, #140]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004110:	4b20      	ldr	r3, [pc, #128]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004118:	4a1e      	ldr	r2, [pc, #120]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800411a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800411e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2232      	movs	r2, #50	@ 0x32
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	4a1c      	ldr	r2, [pc, #112]	@ (800419c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004136:	e002      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414a:	d102      	bne.n	8004152 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f2      	bne.n	8004138 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004152:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d112      	bne.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e011      	b.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004164:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800416a:	4a0a      	ldr	r2, [pc, #40]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004170:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004174:	e007      	b.n	8004186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004176:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800417e:	4a05      	ldr	r2, [pc, #20]	@ (8004194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004180:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004184:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40007000 	.word	0x40007000
 8004198:	20000008 	.word	0x20000008
 800419c:	431bde83 	.word	0x431bde83

080041a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a04      	ldr	r2, [pc, #16]	@ (80041bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041ae:	6093      	str	r3, [r2, #8]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40007000 	.word	0x40007000

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e2fe      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d075      	beq.n	80042ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041de:	4b97      	ldr	r3, [pc, #604]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041e8:	4b94      	ldr	r3, [pc, #592]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_OscConfig+0x3e>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d002      	beq.n	8004204 <HAL_RCC_OscConfig+0x44>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d10b      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	4b8d      	ldr	r3, [pc, #564]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05b      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e2d9      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x74>
 8004226:	4b85      	ldr	r3, [pc, #532]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a84      	ldr	r2, [pc, #528]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x98>
 800423e:	4b7f      	ldr	r3, [pc, #508]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a7e      	ldr	r2, [pc, #504]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b7c      	ldr	r3, [pc, #496]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7b      	ldr	r2, [pc, #492]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004258:	4b78      	ldr	r3, [pc, #480]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a77      	ldr	r2, [pc, #476]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b75      	ldr	r3, [pc, #468]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a74      	ldr	r2, [pc, #464]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800426e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd f878 	bl	800136c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd f874 	bl	800136c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	@ 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e29e      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004292:	4b6a      	ldr	r3, [pc, #424]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xc0>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd f864 	bl	800136c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fd f860 	bl	800136c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e28a      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ba:	4b60      	ldr	r3, [pc, #384]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d075      	beq.n	80043c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e0:	4b56      	ldr	r3, [pc, #344]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d102      	bne.n	80042f6 <HAL_RCC_OscConfig+0x136>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d002      	beq.n	80042fc <HAL_RCC_OscConfig+0x13c>
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d11f      	bne.n	800433c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fc:	4b4f      	ldr	r3, [pc, #316]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x154>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e25d      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004314:	4b49      	ldr	r3, [pc, #292]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	4946      	ldr	r1, [pc, #280]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004328:	4b45      	ldr	r3, [pc, #276]	@ (8004440 <HAL_RCC_OscConfig+0x280>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7fc ffd1 	bl	80012d4 <HAL_InitTick>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d043      	beq.n	80043c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e249      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004344:	4b3d      	ldr	r3, [pc, #244]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a3c      	ldr	r2, [pc, #240]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800434a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd f80c 	bl	800136c <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004358:	f7fd f808 	bl	800136c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e232      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800436a:	4b34      	ldr	r3, [pc, #208]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	4b31      	ldr	r3, [pc, #196]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	492d      	ldr	r1, [pc, #180]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]
 800438a:	e01a      	b.n	80043c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438c:	4b2b      	ldr	r3, [pc, #172]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2a      	ldr	r2, [pc, #168]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004392:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fc ffe8 	bl	800136c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fc ffe4 	bl	800136c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e20e      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b2:	4b22      	ldr	r3, [pc, #136]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1e0>
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d041      	beq.n	8004452 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01c      	beq.n	8004410 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d6:	4b19      	ldr	r3, [pc, #100]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80043d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fc ffc1 	bl	800136c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ee:	f7fc ffbd 	bl	800136c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e1e7      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004400:	4b0e      	ldr	r3, [pc, #56]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0ef      	beq.n	80043ee <HAL_RCC_OscConfig+0x22e>
 800440e:	e020      	b.n	8004452 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004410:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004416:	4a09      	ldr	r2, [pc, #36]	@ (800443c <HAL_RCC_OscConfig+0x27c>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fc ffa4 	bl	800136c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004426:	e00d      	b.n	8004444 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004428:	f7fc ffa0 	bl	800136c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d906      	bls.n	8004444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e1ca      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004444:	4b8c      	ldr	r3, [pc, #560]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ea      	bne.n	8004428 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80a6 	beq.w	80045ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004460:	2300      	movs	r3, #0
 8004462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004464:	4b84      	ldr	r3, [pc, #528]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x2b4>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x2b6>
 8004474:	2300      	movs	r3, #0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447a:	4b7f      	ldr	r3, [pc, #508]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	4a7e      	ldr	r2, [pc, #504]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004484:	6593      	str	r3, [r2, #88]	@ 0x58
 8004486:	4b7c      	ldr	r3, [pc, #496]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004492:	2301      	movs	r3, #1
 8004494:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004496:	4b79      	ldr	r3, [pc, #484]	@ (800467c <HAL_RCC_OscConfig+0x4bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d118      	bne.n	80044d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a2:	4b76      	ldr	r3, [pc, #472]	@ (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a75      	ldr	r2, [pc, #468]	@ (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ae:	f7fc ff5d 	bl	800136c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b6:	f7fc ff59 	bl	800136c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e183      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c8:	4b6c      	ldr	r3, [pc, #432]	@ (800467c <HAL_RCC_OscConfig+0x4bc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d108      	bne.n	80044ee <HAL_RCC_OscConfig+0x32e>
 80044dc:	4b66      	ldr	r3, [pc, #408]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e2:	4a65      	ldr	r2, [pc, #404]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ec:	e024      	b.n	8004538 <HAL_RCC_OscConfig+0x378>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d110      	bne.n	8004518 <HAL_RCC_OscConfig+0x358>
 80044f6:	4b60      	ldr	r3, [pc, #384]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004506:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450c:	4a5a      	ldr	r2, [pc, #360]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004516:	e00f      	b.n	8004538 <HAL_RCC_OscConfig+0x378>
 8004518:	4b57      	ldr	r3, [pc, #348]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	4a56      	ldr	r2, [pc, #344]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004528:	4b53      	ldr	r3, [pc, #332]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452e:	4a52      	ldr	r2, [pc, #328]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fc ff14 	bl	800136c <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fc ff10 	bl	800136c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e138      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455e:	4b46      	ldr	r3, [pc, #280]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ed      	beq.n	8004548 <HAL_RCC_OscConfig+0x388>
 800456c:	e015      	b.n	800459a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fc fefd 	bl	800136c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fc fef9 	bl	800136c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e121      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800458c:	4b3a      	ldr	r3, [pc, #232]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1ed      	bne.n	8004576 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800459a:	7ffb      	ldrb	r3, [r7, #31]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a0:	4b35      	ldr	r3, [pc, #212]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	4a34      	ldr	r2, [pc, #208]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d03c      	beq.n	8004632 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01c      	beq.n	80045fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fc fecc 	bl	800136c <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d8:	f7fc fec8 	bl	800136c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0f2      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045ea:	4b23      	ldr	r3, [pc, #140]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <HAL_RCC_OscConfig+0x418>
 80045f8:	e01b      	b.n	8004632 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 80045fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004600:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fc feaf 	bl	800136c <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004612:	f7fc feab 	bl	800136c <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0d5      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004624:	4b14      	ldr	r3, [pc, #80]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ef      	bne.n	8004612 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80c9 	beq.w	80047ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463c:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b0c      	cmp	r3, #12
 8004646:	f000 8083 	beq.w	8004750 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d15e      	bne.n	8004710 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004652:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a08      	ldr	r2, [pc, #32]	@ (8004678 <HAL_RCC_OscConfig+0x4b8>)
 8004658:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800465c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fc fe85 	bl	800136c <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004664:	e00c      	b.n	8004680 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004666:	f7fc fe81 	bl	800136c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d905      	bls.n	8004680 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0ab      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004680:	4b55      	ldr	r3, [pc, #340]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ec      	bne.n	8004666 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468c:	4b52      	ldr	r3, [pc, #328]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	4b52      	ldr	r3, [pc, #328]	@ (80047dc <HAL_RCC_OscConfig+0x61c>)
 8004692:	4013      	ands	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6a11      	ldr	r1, [r2, #32]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800469c:	3a01      	subs	r2, #1
 800469e:	0112      	lsls	r2, r2, #4
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046a6:	0212      	lsls	r2, r2, #8
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046ae:	0852      	lsrs	r2, r2, #1
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0552      	lsls	r2, r2, #21
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046ba:	0852      	lsrs	r2, r2, #1
 80046bc:	3a01      	subs	r2, #1
 80046be:	0652      	lsls	r2, r2, #25
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046c6:	06d2      	lsls	r2, r2, #27
 80046c8:	430a      	orrs	r2, r1
 80046ca:	4943      	ldr	r1, [pc, #268]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d0:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a40      	ldr	r2, [pc, #256]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046dc:	4b3e      	ldr	r3, [pc, #248]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a3d      	ldr	r2, [pc, #244]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 80046e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fc fe40 	bl	800136c <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fc fe3c 	bl	800136c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e066      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004702:	4b35      	ldr	r3, [pc, #212]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x530>
 800470e:	e05e      	b.n	80047ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004710:	4b31      	ldr	r3, [pc, #196]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a30      	ldr	r2, [pc, #192]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800471a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fc fe26 	bl	800136c <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fc fe22 	bl	800136c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e04c      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004736:	4b28      	ldr	r3, [pc, #160]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004742:	4b25      	ldr	r3, [pc, #148]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	4924      	ldr	r1, [pc, #144]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 8004748:	4b25      	ldr	r3, [pc, #148]	@ (80047e0 <HAL_RCC_OscConfig+0x620>)
 800474a:	4013      	ands	r3, r2
 800474c:	60cb      	str	r3, [r1, #12]
 800474e:	e03e      	b.n	80047ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e039      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800475c:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <HAL_RCC_OscConfig+0x618>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f003 0203 	and.w	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	429a      	cmp	r2, r3
 800476e:	d12c      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477a:	3b01      	subs	r3, #1
 800477c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d123      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d11b      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d113      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	3b01      	subs	r3, #1
 80047b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	3b01      	subs	r3, #1
 80047c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d001      	beq.n	80047ce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000
 80047dc:	019f800c 	.word	0x019f800c
 80047e0:	feeefffc 	.word	0xfeeefffc

080047e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e11e      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047fc:	4b91      	ldr	r3, [pc, #580]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d910      	bls.n	800482c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b8e      	ldr	r3, [pc, #568]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 020f 	bic.w	r2, r3, #15
 8004812:	498c      	ldr	r1, [pc, #560]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b8a      	ldr	r3, [pc, #552]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e106      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d073      	beq.n	8004920 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d129      	bne.n	8004894 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004840:	4b81      	ldr	r3, [pc, #516]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0f4      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004850:	f000 f99e 	bl	8004b90 <RCC_GetSysClockFreqFromPLLSource>
 8004854:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4a7c      	ldr	r2, [pc, #496]	@ (8004a4c <HAL_RCC_ClockConfig+0x268>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d93f      	bls.n	80048de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800485e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004872:	2b00      	cmp	r3, #0
 8004874:	d033      	beq.n	80048de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800487a:	2b00      	cmp	r3, #0
 800487c:	d12f      	bne.n	80048de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800487e:	4b72      	ldr	r3, [pc, #456]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004886:	4a70      	ldr	r2, [pc, #448]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800488e:	2380      	movs	r3, #128	@ 0x80
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e024      	b.n	80048de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d107      	bne.n	80048ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0c6      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ac:	4b66      	ldr	r3, [pc, #408]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0be      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048bc:	f000 f8ce 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4a61      	ldr	r2, [pc, #388]	@ (8004a4c <HAL_RCC_ClockConfig+0x268>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d909      	bls.n	80048de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048da:	2380      	movs	r3, #128	@ 0x80
 80048dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b5a      	ldr	r3, [pc, #360]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4957      	ldr	r1, [pc, #348]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fc fd3c 	bl	800136c <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fc fd38 	bl	800136c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e095      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b43      	ldr	r3, [pc, #268]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a42      	ldr	r2, [pc, #264]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800493e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004942:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004950:	4b3d      	ldr	r3, [pc, #244]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004958:	4a3b      	ldr	r2, [pc, #236]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800495a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800495e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b39      	ldr	r3, [pc, #228]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4936      	ldr	r1, [pc, #216]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
 8004972:	e008      	b.n	8004986 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b80      	cmp	r3, #128	@ 0x80
 8004978:	d105      	bne.n	8004986 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800497a:	4b33      	ldr	r3, [pc, #204]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4a32      	ldr	r2, [pc, #200]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004980:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004984:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004986:	4b2f      	ldr	r3, [pc, #188]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d21d      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004994:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 020f 	bic.w	r2, r3, #15
 800499c:	4929      	ldr	r1, [pc, #164]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049a4:	f7fc fce2 	bl	800136c <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fc fcde 	bl	800136c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e03b      	b.n	8004a3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b20      	ldr	r3, [pc, #128]	@ (8004a44 <HAL_RCC_ClockConfig+0x260>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d1ed      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4917      	ldr	r1, [pc, #92]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049fa:	4b13      	ldr	r3, [pc, #76]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	490f      	ldr	r1, [pc, #60]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a0e:	f000 f825 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <HAL_RCC_ClockConfig+0x264>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	490c      	ldr	r1, [pc, #48]	@ (8004a50 <HAL_RCC_ClockConfig+0x26c>)
 8004a20:	5ccb      	ldrb	r3, [r1, r3]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <HAL_RCC_ClockConfig+0x270>)
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_RCC_ClockConfig+0x274>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc fc4e 	bl	80012d4 <HAL_InitTick>
 8004a38:	4603      	mov	r3, r0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40022000 	.word	0x40022000
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	04c4b400 	.word	0x04c4b400
 8004a50:	08005af8 	.word	0x08005af8
 8004a54:	20000008 	.word	0x20000008
 8004a58:	20000014 	.word	0x20000014

08004a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a62:	4b2c      	ldr	r3, [pc, #176]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	e047      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a74:	4b27      	ldr	r3, [pc, #156]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a80:	4b26      	ldr	r3, [pc, #152]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e03e      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a86:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d136      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a92:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d10c      	bne.n	8004aca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aba:	68d2      	ldr	r2, [r2, #12]
 8004abc:	0a12      	lsrs	r2, r2, #8
 8004abe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
 8004ac6:	617b      	str	r3, [r7, #20]
      break;
 8004ac8:	e00c      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aca:	4a13      	ldr	r2, [pc, #76]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	4a10      	ldr	r2, [pc, #64]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad4:	68d2      	ldr	r2, [r2, #12]
 8004ad6:	0a12      	lsrs	r2, r2, #8
 8004ad8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
      break;
 8004ae2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0e5b      	lsrs	r3, r3, #25
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	3301      	adds	r3, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e001      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b04:	693b      	ldr	r3, [r7, #16]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200

08004b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000008 	.word	0x20000008

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4904      	ldr	r1, [pc, #16]	@ (8004b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	08005b08 	.word	0x08005b08

08004b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b68:	f7ff ffda 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0adb      	lsrs	r3, r3, #11
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4904      	ldr	r1, [pc, #16]	@ (8004b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	08005b08 	.word	0x08005b08

08004b90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b96:	4b1e      	ldr	r3, [pc, #120]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d10c      	bne.n	8004bce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bb4:	4a17      	ldr	r2, [pc, #92]	@ (8004c14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	4a14      	ldr	r2, [pc, #80]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bbe:	68d2      	ldr	r2, [r2, #12]
 8004bc0:	0a12      	lsrs	r2, r2, #8
 8004bc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	617b      	str	r3, [r7, #20]
    break;
 8004bcc:	e00c      	b.n	8004be8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bce:	4a12      	ldr	r2, [pc, #72]	@ (8004c18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd8:	68d2      	ldr	r2, [r2, #12]
 8004bda:	0a12      	lsrs	r2, r2, #8
 8004bdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]
    break;
 8004be6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004be8:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	0e5b      	lsrs	r3, r3, #25
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c02:	687b      	ldr	r3, [r7, #4]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40021000 	.word	0x40021000
 8004c14:	007a1200 	.word	0x007a1200
 8004c18:	00f42400 	.word	0x00f42400

08004c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c24:	2300      	movs	r3, #0
 8004c26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c28:	2300      	movs	r3, #0
 8004c2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8098 	beq.w	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3e:	4b43      	ldr	r3, [pc, #268]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10d      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c56:	4b3d      	ldr	r3, [pc, #244]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c62:	2301      	movs	r3, #1
 8004c64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c66:	4b3a      	ldr	r3, [pc, #232]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a39      	ldr	r2, [pc, #228]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c72:	f7fc fb7b 	bl	800136c <HAL_GetTick>
 8004c76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c78:	e009      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7a:	f7fc fb77 	bl	800136c <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d902      	bls.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c8c:	e005      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c8e:	4b30      	ldr	r3, [pc, #192]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ef      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c9a:	7cfb      	ldrb	r3, [r7, #19]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d159      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004caa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01e      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d019      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cbc:	4b23      	ldr	r3, [pc, #140]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cc8:	4b20      	ldr	r3, [pc, #128]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	4a1f      	ldr	r2, [pc, #124]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	4a1b      	ldr	r2, [pc, #108]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ce8:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fc fb37 	bl	800136c <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d00:	e00b      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fc fb33 	bl	800136c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d902      	bls.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	74fb      	strb	r3, [r7, #19]
            break;
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ec      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d28:	7cfb      	ldrb	r3, [r7, #19]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d2e:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	4903      	ldr	r1, [pc, #12]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d44:	e008      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	74bb      	strb	r3, [r7, #18]
 8004d4a:	e005      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d58:	7c7b      	ldrb	r3, [r7, #17]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d105      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5e:	4ba6      	ldr	r3, [pc, #664]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d62:	4aa5      	ldr	r2, [pc, #660]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d76:	4ba0      	ldr	r3, [pc, #640]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7c:	f023 0203 	bic.w	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	499c      	ldr	r1, [pc, #624]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d98:	4b97      	ldr	r3, [pc, #604]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	f023 020c 	bic.w	r2, r3, #12
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4994      	ldr	r1, [pc, #592]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dba:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	498b      	ldr	r1, [pc, #556]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ddc:	4b86      	ldr	r3, [pc, #536]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	4983      	ldr	r1, [pc, #524]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	497a      	ldr	r1, [pc, #488]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e20:	4b75      	ldr	r3, [pc, #468]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	4972      	ldr	r1, [pc, #456]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e42:	4b6d      	ldr	r3, [pc, #436]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4969      	ldr	r1, [pc, #420]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e64:	4b64      	ldr	r3, [pc, #400]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4961      	ldr	r1, [pc, #388]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e86:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	4958      	ldr	r1, [pc, #352]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d015      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea8:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	4950      	ldr	r1, [pc, #320]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec6:	d105      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ed2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d015      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee0:	4b45      	ldr	r3, [pc, #276]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4942      	ldr	r1, [pc, #264]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004efe:	d105      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f00:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a3c      	ldr	r2, [pc, #240]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d015      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f18:	4b37      	ldr	r3, [pc, #220]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	4934      	ldr	r1, [pc, #208]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f36:	d105      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f38:	4b2f      	ldr	r3, [pc, #188]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d015      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f50:	4b29      	ldr	r3, [pc, #164]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	4926      	ldr	r1, [pc, #152]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f70:	4b21      	ldr	r3, [pc, #132]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	4918      	ldr	r1, [pc, #96]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa8:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4a12      	ldr	r2, [pc, #72]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fce:	490a      	ldr	r1, [pc, #40]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fde:	d105      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fe0:	4b05      	ldr	r3, [pc, #20]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	.word	0x40021000

08004ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e042      	b.n	8005094 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f83b 	bl	800509c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2224      	movs	r2, #36	@ 0x24
 800502a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fafe 	bl	8005648 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f82f 	bl	80050b0 <UART_SetConfig>
 8005052:	4603      	mov	r3, r0
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e01b      	b.n	8005094 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800506a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800507a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fb7d 	bl	800578c <UART_CheckIdleState>
 8005092:	4603      	mov	r3, r0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b4:	b08c      	sub	sp, #48	@ 0x30
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4bab      	ldr	r3, [pc, #684]	@ (800538c <UART_SetConfig+0x2dc>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e8:	430b      	orrs	r3, r1
 80050ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4aa0      	ldr	r2, [pc, #640]	@ (8005390 <UART_SetConfig+0x2e0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005118:	4313      	orrs	r3, r2
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005126:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005130:	430b      	orrs	r3, r1
 8005132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	f023 010f 	bic.w	r1, r3, #15
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a91      	ldr	r2, [pc, #580]	@ (8005394 <UART_SetConfig+0x2e4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d125      	bne.n	80051a0 <UART_SetConfig+0xf0>
 8005154:	4b90      	ldr	r3, [pc, #576]	@ (8005398 <UART_SetConfig+0x2e8>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b03      	cmp	r3, #3
 8005160:	d81a      	bhi.n	8005198 <UART_SetConfig+0xe8>
 8005162:	a201      	add	r2, pc, #4	@ (adr r2, 8005168 <UART_SetConfig+0xb8>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	08005179 	.word	0x08005179
 800516c:	08005189 	.word	0x08005189
 8005170:	08005181 	.word	0x08005181
 8005174:	08005191 	.word	0x08005191
 8005178:	2301      	movs	r3, #1
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517e:	e0d6      	b.n	800532e <UART_SetConfig+0x27e>
 8005180:	2302      	movs	r3, #2
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005186:	e0d2      	b.n	800532e <UART_SetConfig+0x27e>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518e:	e0ce      	b.n	800532e <UART_SetConfig+0x27e>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005196:	e0ca      	b.n	800532e <UART_SetConfig+0x27e>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800519e:	e0c6      	b.n	800532e <UART_SetConfig+0x27e>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a7d      	ldr	r2, [pc, #500]	@ (800539c <UART_SetConfig+0x2ec>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d138      	bne.n	800521c <UART_SetConfig+0x16c>
 80051aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005398 <UART_SetConfig+0x2e8>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b0c      	cmp	r3, #12
 80051b6:	d82d      	bhi.n	8005214 <UART_SetConfig+0x164>
 80051b8:	a201      	add	r2, pc, #4	@ (adr r2, 80051c0 <UART_SetConfig+0x110>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	080051f5 	.word	0x080051f5
 80051c4:	08005215 	.word	0x08005215
 80051c8:	08005215 	.word	0x08005215
 80051cc:	08005215 	.word	0x08005215
 80051d0:	08005205 	.word	0x08005205
 80051d4:	08005215 	.word	0x08005215
 80051d8:	08005215 	.word	0x08005215
 80051dc:	08005215 	.word	0x08005215
 80051e0:	080051fd 	.word	0x080051fd
 80051e4:	08005215 	.word	0x08005215
 80051e8:	08005215 	.word	0x08005215
 80051ec:	08005215 	.word	0x08005215
 80051f0:	0800520d 	.word	0x0800520d
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051fa:	e098      	b.n	800532e <UART_SetConfig+0x27e>
 80051fc:	2302      	movs	r3, #2
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005202:	e094      	b.n	800532e <UART_SetConfig+0x27e>
 8005204:	2304      	movs	r3, #4
 8005206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800520a:	e090      	b.n	800532e <UART_SetConfig+0x27e>
 800520c:	2308      	movs	r3, #8
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005212:	e08c      	b.n	800532e <UART_SetConfig+0x27e>
 8005214:	2310      	movs	r3, #16
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800521a:	e088      	b.n	800532e <UART_SetConfig+0x27e>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a5f      	ldr	r2, [pc, #380]	@ (80053a0 <UART_SetConfig+0x2f0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d125      	bne.n	8005272 <UART_SetConfig+0x1c2>
 8005226:	4b5c      	ldr	r3, [pc, #368]	@ (8005398 <UART_SetConfig+0x2e8>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005230:	2b30      	cmp	r3, #48	@ 0x30
 8005232:	d016      	beq.n	8005262 <UART_SetConfig+0x1b2>
 8005234:	2b30      	cmp	r3, #48	@ 0x30
 8005236:	d818      	bhi.n	800526a <UART_SetConfig+0x1ba>
 8005238:	2b20      	cmp	r3, #32
 800523a:	d00a      	beq.n	8005252 <UART_SetConfig+0x1a2>
 800523c:	2b20      	cmp	r3, #32
 800523e:	d814      	bhi.n	800526a <UART_SetConfig+0x1ba>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <UART_SetConfig+0x19a>
 8005244:	2b10      	cmp	r3, #16
 8005246:	d008      	beq.n	800525a <UART_SetConfig+0x1aa>
 8005248:	e00f      	b.n	800526a <UART_SetConfig+0x1ba>
 800524a:	2300      	movs	r3, #0
 800524c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005250:	e06d      	b.n	800532e <UART_SetConfig+0x27e>
 8005252:	2302      	movs	r3, #2
 8005254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005258:	e069      	b.n	800532e <UART_SetConfig+0x27e>
 800525a:	2304      	movs	r3, #4
 800525c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005260:	e065      	b.n	800532e <UART_SetConfig+0x27e>
 8005262:	2308      	movs	r3, #8
 8005264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005268:	e061      	b.n	800532e <UART_SetConfig+0x27e>
 800526a:	2310      	movs	r3, #16
 800526c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005270:	e05d      	b.n	800532e <UART_SetConfig+0x27e>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a4b      	ldr	r2, [pc, #300]	@ (80053a4 <UART_SetConfig+0x2f4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d125      	bne.n	80052c8 <UART_SetConfig+0x218>
 800527c:	4b46      	ldr	r3, [pc, #280]	@ (8005398 <UART_SetConfig+0x2e8>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005282:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005286:	2bc0      	cmp	r3, #192	@ 0xc0
 8005288:	d016      	beq.n	80052b8 <UART_SetConfig+0x208>
 800528a:	2bc0      	cmp	r3, #192	@ 0xc0
 800528c:	d818      	bhi.n	80052c0 <UART_SetConfig+0x210>
 800528e:	2b80      	cmp	r3, #128	@ 0x80
 8005290:	d00a      	beq.n	80052a8 <UART_SetConfig+0x1f8>
 8005292:	2b80      	cmp	r3, #128	@ 0x80
 8005294:	d814      	bhi.n	80052c0 <UART_SetConfig+0x210>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <UART_SetConfig+0x1f0>
 800529a:	2b40      	cmp	r3, #64	@ 0x40
 800529c:	d008      	beq.n	80052b0 <UART_SetConfig+0x200>
 800529e:	e00f      	b.n	80052c0 <UART_SetConfig+0x210>
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a6:	e042      	b.n	800532e <UART_SetConfig+0x27e>
 80052a8:	2302      	movs	r3, #2
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ae:	e03e      	b.n	800532e <UART_SetConfig+0x27e>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b6:	e03a      	b.n	800532e <UART_SetConfig+0x27e>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052be:	e036      	b.n	800532e <UART_SetConfig+0x27e>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c6:	e032      	b.n	800532e <UART_SetConfig+0x27e>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a30      	ldr	r2, [pc, #192]	@ (8005390 <UART_SetConfig+0x2e0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d12a      	bne.n	8005328 <UART_SetConfig+0x278>
 80052d2:	4b31      	ldr	r3, [pc, #196]	@ (8005398 <UART_SetConfig+0x2e8>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052e0:	d01a      	beq.n	8005318 <UART_SetConfig+0x268>
 80052e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052e6:	d81b      	bhi.n	8005320 <UART_SetConfig+0x270>
 80052e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ec:	d00c      	beq.n	8005308 <UART_SetConfig+0x258>
 80052ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f2:	d815      	bhi.n	8005320 <UART_SetConfig+0x270>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <UART_SetConfig+0x250>
 80052f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fc:	d008      	beq.n	8005310 <UART_SetConfig+0x260>
 80052fe:	e00f      	b.n	8005320 <UART_SetConfig+0x270>
 8005300:	2300      	movs	r3, #0
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005306:	e012      	b.n	800532e <UART_SetConfig+0x27e>
 8005308:	2302      	movs	r3, #2
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530e:	e00e      	b.n	800532e <UART_SetConfig+0x27e>
 8005310:	2304      	movs	r3, #4
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005316:	e00a      	b.n	800532e <UART_SetConfig+0x27e>
 8005318:	2308      	movs	r3, #8
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531e:	e006      	b.n	800532e <UART_SetConfig+0x27e>
 8005320:	2310      	movs	r3, #16
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005326:	e002      	b.n	800532e <UART_SetConfig+0x27e>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <UART_SetConfig+0x2e0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	f040 80a8 	bne.w	800548a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800533a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800533e:	2b08      	cmp	r3, #8
 8005340:	d834      	bhi.n	80053ac <UART_SetConfig+0x2fc>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <UART_SetConfig+0x298>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800536d 	.word	0x0800536d
 800534c:	080053ad 	.word	0x080053ad
 8005350:	08005375 	.word	0x08005375
 8005354:	080053ad 	.word	0x080053ad
 8005358:	0800537b 	.word	0x0800537b
 800535c:	080053ad 	.word	0x080053ad
 8005360:	080053ad 	.word	0x080053ad
 8005364:	080053ad 	.word	0x080053ad
 8005368:	08005383 	.word	0x08005383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800536c:	f7ff fbe4 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8005370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005372:	e021      	b.n	80053b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005374:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <UART_SetConfig+0x2f8>)
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005378:	e01e      	b.n	80053b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537a:	f7ff fb6f 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 800537e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005380:	e01a      	b.n	80053b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005388:	e016      	b.n	80053b8 <UART_SetConfig+0x308>
 800538a:	bf00      	nop
 800538c:	cfff69f3 	.word	0xcfff69f3
 8005390:	40008000 	.word	0x40008000
 8005394:	40013800 	.word	0x40013800
 8005398:	40021000 	.word	0x40021000
 800539c:	40004400 	.word	0x40004400
 80053a0:	40004800 	.word	0x40004800
 80053a4:	40004c00 	.word	0x40004c00
 80053a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 812a 	beq.w	8005614 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	4a9e      	ldr	r2, [pc, #632]	@ (8005640 <UART_SetConfig+0x590>)
 80053c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	4413      	add	r3, r2
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d305      	bcc.n	80053f0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d903      	bls.n	80053f8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053f6:	e10d      	b.n	8005614 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	2200      	movs	r2, #0
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	60fa      	str	r2, [r7, #12]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	4a8e      	ldr	r2, [pc, #568]	@ (8005640 <UART_SetConfig+0x590>)
 8005406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800540a:	b29b      	uxth	r3, r3
 800540c:	2200      	movs	r2, #0
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800541a:	f7fa fefd 	bl	8000218 <__aeabi_uldivmod>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	020b      	lsls	r3, r1, #8
 8005430:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005434:	0202      	lsls	r2, r0, #8
 8005436:	6979      	ldr	r1, [r7, #20]
 8005438:	6849      	ldr	r1, [r1, #4]
 800543a:	0849      	lsrs	r1, r1, #1
 800543c:	2000      	movs	r0, #0
 800543e:	460c      	mov	r4, r1
 8005440:	4605      	mov	r5, r0
 8005442:	eb12 0804 	adds.w	r8, r2, r4
 8005446:	eb43 0905 	adc.w	r9, r3, r5
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	469a      	mov	sl, r3
 8005452:	4693      	mov	fp, r2
 8005454:	4652      	mov	r2, sl
 8005456:	465b      	mov	r3, fp
 8005458:	4640      	mov	r0, r8
 800545a:	4649      	mov	r1, r9
 800545c:	f7fa fedc 	bl	8000218 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4613      	mov	r3, r2
 8005466:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800546e:	d308      	bcc.n	8005482 <UART_SetConfig+0x3d2>
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005476:	d204      	bcs.n	8005482 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	e0c8      	b.n	8005614 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005488:	e0c4      	b.n	8005614 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005492:	d167      	bne.n	8005564 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005494:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005498:	2b08      	cmp	r3, #8
 800549a:	d828      	bhi.n	80054ee <UART_SetConfig+0x43e>
 800549c:	a201      	add	r2, pc, #4	@ (adr r2, 80054a4 <UART_SetConfig+0x3f4>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080054ef 	.word	0x080054ef
 80054b4:	080054df 	.word	0x080054df
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	080054ef 	.word	0x080054ef
 80054c4:	080054e7 	.word	0x080054e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7ff fb36 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80054cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054ce:	e014      	b.n	80054fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7ff fb48 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 80054d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054d6:	e010      	b.n	80054fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005644 <UART_SetConfig+0x594>)
 80054da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054dc:	e00d      	b.n	80054fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054de:	f7ff fabd 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80054e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054e4:	e009      	b.n	80054fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054ec:	e005      	b.n	80054fa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8089 	beq.w	8005614 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	4a4e      	ldr	r2, [pc, #312]	@ (8005640 <UART_SetConfig+0x590>)
 8005508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800550c:	461a      	mov	r2, r3
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	fbb3 f3f2 	udiv	r3, r3, r2
 8005514:	005a      	lsls	r2, r3, #1
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	441a      	add	r2, r3
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	2b0f      	cmp	r3, #15
 800552c:	d916      	bls.n	800555c <UART_SetConfig+0x4ac>
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005534:	d212      	bcs.n	800555c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f023 030f 	bic.w	r3, r3, #15
 800553e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	b29b      	uxth	r3, r3
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	b29a      	uxth	r2, r3
 800554c:	8bfb      	ldrh	r3, [r7, #30]
 800554e:	4313      	orrs	r3, r2
 8005550:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	8bfa      	ldrh	r2, [r7, #30]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	e05b      	b.n	8005614 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005562:	e057      	b.n	8005614 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005564:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005568:	2b08      	cmp	r3, #8
 800556a:	d828      	bhi.n	80055be <UART_SetConfig+0x50e>
 800556c:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <UART_SetConfig+0x4c4>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	08005599 	.word	0x08005599
 8005578:	080055a1 	.word	0x080055a1
 800557c:	080055a9 	.word	0x080055a9
 8005580:	080055bf 	.word	0x080055bf
 8005584:	080055af 	.word	0x080055af
 8005588:	080055bf 	.word	0x080055bf
 800558c:	080055bf 	.word	0x080055bf
 8005590:	080055bf 	.word	0x080055bf
 8005594:	080055b7 	.word	0x080055b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005598:	f7ff face 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 800559c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800559e:	e014      	b.n	80055ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055a0:	f7ff fae0 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 80055a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055a6:	e010      	b.n	80055ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a8:	4b26      	ldr	r3, [pc, #152]	@ (8005644 <UART_SetConfig+0x594>)
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055ac:	e00d      	b.n	80055ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ae:	f7ff fa55 	bl	8004a5c <HAL_RCC_GetSysClockFreq>
 80055b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055b4:	e009      	b.n	80055ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055bc:	e005      	b.n	80055ca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055c8:	bf00      	nop
    }

    if (pclk != 0U)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d021      	beq.n	8005614 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005640 <UART_SetConfig+0x590>)
 80055d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055da:	461a      	mov	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055de:	fbb3 f2f2 	udiv	r2, r3, r2
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	441a      	add	r2, r3
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	d909      	bls.n	800560e <UART_SetConfig+0x55e>
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005600:	d205      	bcs.n	800560e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	b29a      	uxth	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60da      	str	r2, [r3, #12]
 800560c:	e002      	b.n	8005614 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2201      	movs	r2, #1
 8005618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2201      	movs	r2, #1
 8005620:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2200      	movs	r2, #0
 8005628:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005630:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005634:	4618      	mov	r0, r3
 8005636:	3730      	adds	r7, #48	@ 0x30
 8005638:	46bd      	mov	sp, r7
 800563a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800563e:	bf00      	nop
 8005640:	08005b20 	.word	0x08005b20
 8005644:	00f42400 	.word	0x00f42400

08005648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d01a      	beq.n	800575e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005746:	d10a      	bne.n	800575e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b098      	sub	sp, #96	@ 0x60
 8005790:	af02      	add	r7, sp, #8
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800579c:	f7fb fde6 	bl	800136c <HAL_GetTick>
 80057a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d12f      	bne.n	8005810 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b8:	2200      	movs	r2, #0
 80057ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f88e 	bl	80058e0 <UART_WaitOnFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d022      	beq.n	8005810 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057de:	653b      	str	r3, [r7, #80]	@ 0x50
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e6      	bne.n	80057ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e063      	b.n	80058d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d149      	bne.n	80058b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800581e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005826:	2200      	movs	r2, #0
 8005828:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f857 	bl	80058e0 <UART_WaitOnFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d03c      	beq.n	80058b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	623b      	str	r3, [r7, #32]
   return(result);
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800584c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005856:	633b      	str	r3, [r7, #48]	@ 0x30
 8005858:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800585c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e6      	bne.n	8005838 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3308      	adds	r3, #8
 8005870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	60fb      	str	r3, [r7, #12]
   return(result);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800588a:	61fa      	str	r2, [r7, #28]
 800588c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	69b9      	ldr	r1, [r7, #24]
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	617b      	str	r3, [r7, #20]
   return(result);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e012      	b.n	80058d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3758      	adds	r7, #88	@ 0x58
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f0:	e04f      	b.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d04b      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fa:	f7fb fd37 	bl	800136c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <UART_WaitOnFlagUntilTimeout+0x30>
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e04e      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d037      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b80      	cmp	r3, #128	@ 0x80
 8005926:	d034      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b40      	cmp	r3, #64	@ 0x40
 800592c:	d031      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b08      	cmp	r3, #8
 800593a:	d110      	bne.n	800595e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2208      	movs	r2, #8
 8005942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f838 	bl	80059ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2208      	movs	r2, #8
 800594e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e029      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800596c:	d111      	bne.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f81e 	bl	80059ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e00f      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	429a      	cmp	r2, r3
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d0a0      	beq.n	80058f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b095      	sub	sp, #84	@ 0x54
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80059e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e3      	bne.n	80059f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d118      	bne.n	8005a66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f023 0310 	bic.w	r3, r3, #16
 8005a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6979      	ldr	r1, [r7, #20]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e6      	bne.n	8005a34 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a7a:	bf00      	nop
 8005a7c:	3754      	adds	r7, #84	@ 0x54
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <memset>:
 8005a86:	4402      	add	r2, r0
 8005a88:	4603      	mov	r3, r0
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d100      	bne.n	8005a90 <memset+0xa>
 8005a8e:	4770      	bx	lr
 8005a90:	f803 1b01 	strb.w	r1, [r3], #1
 8005a94:	e7f9      	b.n	8005a8a <memset+0x4>
	...

08005a98 <__libc_init_array>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ad0 <__libc_init_array+0x38>)
 8005a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ad4 <__libc_init_array+0x3c>)
 8005a9e:	1b64      	subs	r4, r4, r5
 8005aa0:	10a4      	asrs	r4, r4, #2
 8005aa2:	2600      	movs	r6, #0
 8005aa4:	42a6      	cmp	r6, r4
 8005aa6:	d109      	bne.n	8005abc <__libc_init_array+0x24>
 8005aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8005ad8 <__libc_init_array+0x40>)
 8005aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8005adc <__libc_init_array+0x44>)
 8005aac:	f000 f818 	bl	8005ae0 <_init>
 8005ab0:	1b64      	subs	r4, r4, r5
 8005ab2:	10a4      	asrs	r4, r4, #2
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	42a6      	cmp	r6, r4
 8005ab8:	d105      	bne.n	8005ac6 <__libc_init_array+0x2e>
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac0:	4798      	blx	r3
 8005ac2:	3601      	adds	r6, #1
 8005ac4:	e7ee      	b.n	8005aa4 <__libc_init_array+0xc>
 8005ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aca:	4798      	blx	r3
 8005acc:	3601      	adds	r6, #1
 8005ace:	e7f2      	b.n	8005ab6 <__libc_init_array+0x1e>
 8005ad0:	08005b40 	.word	0x08005b40
 8005ad4:	08005b40 	.word	0x08005b40
 8005ad8:	08005b40 	.word	0x08005b40
 8005adc:	08005b44 	.word	0x08005b44

08005ae0 <_init>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	bf00      	nop
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr

08005aec <_fini>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr
