
ECU_Transmit_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005ec4  08005ec4  00006ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f04  08005f04  0000701c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f04  08005f04  00006f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f0c  08005f0c  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f0c  08005f0c  00006f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f10  08005f10  00006f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005f14  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000020  08005f30  00007020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08005f30  000073b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145df  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002690  00000000  00000000  0001b62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cde  00000000  00000000  0001ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc60  00000000  00000000  0001fa5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121be  00000000  00000000  0003f6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1db5  00000000  00000000  0005187c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ac  00000000  00000000  00123674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00127e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005eac 	.word	0x08005eac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08005eac 	.word	0x08005eac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d04b      	beq.n	80005f0 <HAL_FDCAN_RxFifo0Callback+0xac>
	{
		// Retrieve Rx messages from RX FIFO0
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_data.bytes) != HAL_OK)
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 800055a:	4a28      	ldr	r2, [pc, #160]	@ (80005fc <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800055c:	2140      	movs	r1, #64	@ 0x40
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f003 f96a 	bl	8003838 <HAL_FDCAN_GetRxMessage>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			// Reception Error
			Error_Handler();
 800056a:	f000 fd17 	bl	8000f9c <Error_Handler>
 800056e:	e035      	b.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
		} else {
			// No error, process received payload
			switch (rx_header.Identifier) {
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f240 4281 	movw	r2, #1153	@ 0x481
 8000578:	4293      	cmp	r3, r2
 800057a:	d028      	beq.n	80005ce <HAL_FDCAN_RxFifo0Callback+0x8a>
 800057c:	f240 4281 	movw	r2, #1153	@ 0x481
 8000580:	4293      	cmp	r3, r2
 8000582:	d82b      	bhi.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
 8000584:	f240 3281 	movw	r2, #897	@ 0x381
 8000588:	4293      	cmp	r3, r2
 800058a:	d022      	beq.n	80005d2 <HAL_FDCAN_RxFifo0Callback+0x8e>
 800058c:	f240 3281 	movw	r2, #897	@ 0x381
 8000590:	4293      	cmp	r3, r2
 8000592:	d823      	bhi.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
 8000594:	f240 2281 	movw	r2, #641	@ 0x281
 8000598:	4293      	cmp	r3, r2
 800059a:	d01c      	beq.n	80005d6 <HAL_FDCAN_RxFifo0Callback+0x92>
 800059c:	f240 2281 	movw	r2, #641	@ 0x281
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d81b      	bhi.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
 80005a4:	f240 1281 	movw	r2, #385	@ 0x181
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d016      	beq.n	80005da <HAL_FDCAN_RxFifo0Callback+0x96>
 80005ac:	f240 1291 	movw	r2, #401	@ 0x191
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d113      	bne.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
				case 0x481:
					break;
				// Display
				case 0x191:
					// Read which button was pressed
					button_data_test.sensor_int = rx_data.sensor_int;
 80005b4:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 80005b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ba:	4911      	ldr	r1, [pc, #68]	@ (8000600 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80005bc:	e9c1 2300 	strd	r2, r3, [r1]
					handle_button_press(&race_state, rx_data.bytes[0]);
 80005c0:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	480f      	ldr	r0, [pc, #60]	@ (8000604 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80005c8:	f000 f81e 	bl	8000608 <handle_button_press>
					break;
 80005cc:	e006      	b.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
					break;
 80005ce:	bf00      	nop
 80005d0:	e004      	b.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
					break;
 80005d2:	bf00      	nop
 80005d4:	e002      	b.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
					break;
 80005d6:	bf00      	nop
 80005d8:	e000      	b.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x98>
					break;
 80005da:	bf00      	nop
			}
		}

		// Reactive receive notifications
		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f003 fa31 	bl	8003a48 <HAL_FDCAN_ActivateNotification>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <HAL_FDCAN_RxFifo0Callback+0xac>
		{
			Error_Handler();
 80005ec:	f000 fcd6 	bl	8000f9c <Error_Handler>
		}
	}
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000300 	.word	0x20000300
 80005fc:	200002d8 	.word	0x200002d8
 8000600:	20000308 	.word	0x20000308
 8000604:	2000017c 	.word	0x2000017c

08000608 <handle_button_press>:
void race_state_init(struct RaceState* rs) {
	rs->rain_state = STATE_NO_RAIN;
	rs->race_mode = MODE_RACE;
}

void handle_button_press(struct RaceState* rs, uint8_t button_index) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	if (button_index == 1) {
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d11b      	bne.n	8000652 <handle_button_press+0x4a>
		// Rain state update, green button
		// TODO: possibly replace with a simple bit inversion
		if (rs->rain_state == STATE_NO_RAIN) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d103      	bne.n	800062a <handle_button_press+0x22>
			rs->rain_state = STATE_RAIN;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	e002      	b.n	8000630 <handle_button_press+0x28>
		} else {  // rs->rain_state == STATE_RAIN
			rs->rain_state = STATE_NO_RAIN;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
		}

		// Send rain state update message to display
		tx_data.sensor_int = 0;  // reset transmit data
 8000630:	4931      	ldr	r1, [pc, #196]	@ (80006f8 <handle_button_press+0xf0>)
 8000632:	f04f 0200 	mov.w	r2, #0
 8000636:	f04f 0300 	mov.w	r3, #0
 800063a:	e9c1 2300 	strd	r2, r3, [r1]
		tx_data.bytes[0] = rs->rain_state;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	4b2d      	ldr	r3, [pc, #180]	@ (80006f8 <handle_button_press+0xf0>)
 8000644:	701a      	strb	r2, [r3, #0]
		send_CAN_message(0x302, &tx_data);
 8000646:	492c      	ldr	r1, [pc, #176]	@ (80006f8 <handle_button_press+0xf0>)
 8000648:	f240 3002 	movw	r0, #770	@ 0x302
 800064c:	f000 f872 	bl	8000734 <send_CAN_message>
		// Send rain state update message to display
		tx_data.sensor_int = 0;  // reset transmit data
		tx_data.bytes[0] = rs->race_mode;
		send_CAN_message(0x202, &tx_data);
	}
}
 8000650:	e04e      	b.n	80006f0 <handle_button_press+0xe8>
		switch (button_index) {
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	3b02      	subs	r3, #2
 8000656:	2b03      	cmp	r3, #3
 8000658:	d83a      	bhi.n	80006d0 <handle_button_press+0xc8>
 800065a:	a201      	add	r2, pc, #4	@ (adr r2, 8000660 <handle_button_press+0x58>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	08000671 	.word	0x08000671
 8000664:	08000689 	.word	0x08000689
 8000668:	080006a1 	.word	0x080006a1
 800066c:	080006b9 	.word	0x080006b9
				if (rs->race_mode == MODE_GYMKHANA) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	2b05      	cmp	r3, #5
 8000676:	d103      	bne.n	8000680 <handle_button_press+0x78>
					rs->race_mode = MODE_RACE;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2202      	movs	r2, #2
 800067c:	705a      	strb	r2, [r3, #1]
				break;
 800067e:	e027      	b.n	80006d0 <handle_button_press+0xc8>
					rs->race_mode = MODE_GYMKHANA;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2205      	movs	r2, #5
 8000684:	705a      	strb	r2, [r3, #1]
				break;
 8000686:	e023      	b.n	80006d0 <handle_button_press+0xc8>
				if (rs->race_mode == MODE_ECO) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	2b03      	cmp	r3, #3
 800068e:	d103      	bne.n	8000698 <handle_button_press+0x90>
					rs->race_mode = MODE_RACE;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2202      	movs	r2, #2
 8000694:	705a      	strb	r2, [r3, #1]
				break;
 8000696:	e01b      	b.n	80006d0 <handle_button_press+0xc8>
					rs->race_mode = MODE_ECO;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2203      	movs	r2, #3
 800069c:	705a      	strb	r2, [r3, #1]
				break;
 800069e:	e017      	b.n	80006d0 <handle_button_press+0xc8>
				if (rs->race_mode == MODE_SENSOR_READING) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	2b04      	cmp	r3, #4
 80006a6:	d103      	bne.n	80006b0 <handle_button_press+0xa8>
					rs->race_mode = MODE_RACE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2202      	movs	r2, #2
 80006ac:	705a      	strb	r2, [r3, #1]
				break;
 80006ae:	e00f      	b.n	80006d0 <handle_button_press+0xc8>
					rs->race_mode = MODE_SENSOR_READING;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2204      	movs	r2, #4
 80006b4:	705a      	strb	r2, [r3, #1]
				break;
 80006b6:	e00b      	b.n	80006d0 <handle_button_press+0xc8>
				if (rs->race_mode == MODE_PIT_LIMITER) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	785b      	ldrb	r3, [r3, #1]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d103      	bne.n	80006c8 <handle_button_press+0xc0>
					rs->race_mode = MODE_RACE;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2202      	movs	r2, #2
 80006c4:	705a      	strb	r2, [r3, #1]
				break;
 80006c6:	e002      	b.n	80006ce <handle_button_press+0xc6>
					rs->race_mode = MODE_PIT_LIMITER;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
				break;
 80006ce:	bf00      	nop
		tx_data.sensor_int = 0;  // reset transmit data
 80006d0:	4909      	ldr	r1, [pc, #36]	@ (80006f8 <handle_button_press+0xf0>)
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	e9c1 2300 	strd	r2, r3, [r1]
		tx_data.bytes[0] = rs->race_mode;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	785a      	ldrb	r2, [r3, #1]
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <handle_button_press+0xf0>)
 80006e4:	701a      	strb	r2, [r3, #0]
		send_CAN_message(0x202, &tx_data);
 80006e6:	4904      	ldr	r1, [pc, #16]	@ (80006f8 <handle_button_press+0xf0>)
 80006e8:	f240 2002 	movw	r0, #514	@ 0x202
 80006ec:	f000 f822 	bl	8000734 <send_CAN_message>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200002d0 	.word	0x200002d0

080006fc <convert_float_display>:


void convert_float_display(can_message_four* msg_in, can_message_four* msg_out, int decimal_points) {
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
    // Used for MoTeC
	msg_out->sensor_int = (uint32_t) (msg_in->sensor_float * decimal_points);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	ed93 7a00 	vldr	s14, [r3]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800071c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000720:	ee17 2a90 	vmov	r2, s15
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <send_CAN_message>:


void send_CAN_message(uint16_t address, can_message_eight* msg) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	80fb      	strh	r3, [r7, #6]
    // Update ID of the transmit header
    tx_header.Identifier = address;
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <send_CAN_message+0x30>)
 8000744:	6013      	str	r3, [r2, #0]

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, msg->bytes) != HAL_OK) {
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4906      	ldr	r1, [pc, #24]	@ (8000764 <send_CAN_message+0x30>)
 800074c:	4806      	ldr	r0, [pc, #24]	@ (8000768 <send_CAN_message+0x34>)
 800074e:	f003 f82f 	bl	80037b0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <send_CAN_message+0x28>
        Error_Handler();
 8000758:	f000 fc20 	bl	8000f9c <Error_Handler>
    }
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200002a8 	.word	0x200002a8
 8000768:	20000118 	.word	0x20000118

0800076c <send_turn_on_inverter>:

void send_turn_on_inverter(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	// Sends a ON message to the inverter
	send_CAN_message(0x201, &inverter_on_msg);
 8000770:	4903      	ldr	r1, [pc, #12]	@ (8000780 <send_turn_on_inverter+0x14>)
 8000772:	f240 2001 	movw	r0, #513	@ 0x201
 8000776:	f7ff ffdd 	bl	8000734 <send_CAN_message>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <send_velocity_ref_inverter>:

void send_velocity_ref_inverter(struct Throttle* th) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	// Check for safe throttle (and RPM) values
	if (throttle_sensor.throttle_value.sensor_float <= 100.0f) {
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <send_velocity_ref_inverter+0x44>)
 800078e:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8000792:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80007cc <send_velocity_ref_inverter+0x48>
 8000796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079e:	d900      	bls.n	80007a2 <send_velocity_ref_inverter+0x1e>
		tx_data.second.sensor_float = 1*throttle_sensor.throttle_value.sensor_float;
		send_CAN_message(0x301, &tx_data);

		send_turn_on_inverter();
	}
}
 80007a0:	e00e      	b.n	80007c0 <send_velocity_ref_inverter+0x3c>
		tx_data.first.sensor_int = 0;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <send_velocity_ref_inverter+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
		tx_data.second.sensor_float = 1*throttle_sensor.throttle_value.sensor_float;
 80007a8:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <send_velocity_ref_inverter+0x44>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <send_velocity_ref_inverter+0x4c>)
 80007b0:	6053      	str	r3, [r2, #4]
		send_CAN_message(0x301, &tx_data);
 80007b2:	4907      	ldr	r1, [pc, #28]	@ (80007d0 <send_velocity_ref_inverter+0x4c>)
 80007b4:	f240 3001 	movw	r0, #769	@ 0x301
 80007b8:	f7ff ffbc 	bl	8000734 <send_CAN_message>
		send_turn_on_inverter();
 80007bc:	f7ff ffd6 	bl	800076c <send_turn_on_inverter>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000180 	.word	0x20000180
 80007cc:	42c80000 	.word	0x42c80000
 80007d0:	200002d0 	.word	0x200002d0

080007d4 <send_throttle_steering_display>:

void send_throttle_steering_display(struct Throttle* th, struct SteeringAngle* sa) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	 // Send throttle in the first 4 bytes
	 th->throttle_value.sensor_float *= 2;  // TODO: fix, this could be a problem!
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 80007e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	 convert_float_display(&th->throttle_value, &tx_data.first, DECIMAL_POINT_2);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3388      	adds	r3, #136	@ 0x88
 80007f2:	2264      	movs	r2, #100	@ 0x64
 80007f4:	4918      	ldr	r1, [pc, #96]	@ (8000858 <send_throttle_steering_display+0x84>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff80 	bl	80006fc <convert_float_display>

	 // Send steering angle in the last 4 bytes
	 // todo: REMOVE THE IF STATEMENTS HERE LATER, THIS IS JUST FOR ROLLOUT

	 if (sa->steering_value.sensor_float < 0) {
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	edd3 7a00 	vldr	s15, [r3]
 8000802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d515      	bpl.n	8000838 <send_throttle_steering_display+0x64>
		 if (sa->steering_value.sensor_float < -24.0f) {
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8000816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800081a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081e:	d503      	bpl.n	8000828 <send_throttle_steering_display+0x54>
			 sa->steering_value.sensor_float = 24.0f;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <send_throttle_steering_display+0x88>)
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e007      	b.n	8000838 <send_throttle_steering_display+0x64>
		 } else {
			 sa->steering_value.sensor_float = -sa->steering_value.sensor_float;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	edd3 7a00 	vldr	s15, [r3]
 800082e:	eef1 7a67 	vneg.f32	s15, s15
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	edc3 7a00 	vstr	s15, [r3]
		 }
	 }
	 convert_float_display(&sa->steering_value, &tx_data.second, DECIMAL_POINT_2);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	2264      	movs	r2, #100	@ 0x64
 800083c:	4908      	ldr	r1, [pc, #32]	@ (8000860 <send_throttle_steering_display+0x8c>)
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff5c 	bl	80006fc <convert_float_display>

	 send_CAN_message(0x102, &tx_data);
 8000844:	4904      	ldr	r1, [pc, #16]	@ (8000858 <send_throttle_steering_display+0x84>)
 8000846:	f44f 7081 	mov.w	r0, #258	@ 0x102
 800084a:	f7ff ff73 	bl	8000734 <send_CAN_message>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200002d0 	.word	0x200002d0
 800085c:	41c00000 	.word	0x41c00000
 8000860:	200002d4 	.word	0x200002d4

08000864 <throttle_init>:

// Throttle functions
void throttle_init(struct Throttle* thr) {
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	thr->adc_sum = 0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f04f 0200 	mov.w	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
	thr->buffer_index = 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	thr->hysteresis = 2.0f;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	thr->hysteresis_min = 5.0f;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <throttle_init+0x6c>)
 800088a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	thr->throttle_activated = 0;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	// Init buffer with zeroes
	// maybe this can also be done at initialization
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e00a      	b.n	80008b2 <throttle_init+0x4e>
		thr->buffer[i] = 0;
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	3304      	adds	r3, #4
 80008a6:	f04f 0200 	mov.w	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	ddf1      	ble.n	800089c <throttle_init+0x38>
	}

	thr->throttle_value.sensor_float = 0.0f;  // init with 0 for safety
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f04f 0200 	mov.w	r2, #0
 80008be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40a00000 	.word	0x40a00000

080008d4 <convert_adc_throttle>:

void convert_adc_throttle(struct Throttle* th, uint16_t adc_value) {
 80008d4:	b480      	push	{r7}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	807b      	strh	r3, [r7, #2]
	 // Calibration
	 float volt = 3.3f*((float) adc_value) / 4096.0f;  // TODO: we should always get 0 ?
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	ee07 3a90 	vmov	s15, r3
 80008e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ea:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8000a28 <convert_adc_throttle+0x154>
 80008ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008f2:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8000a2c <convert_adc_throttle+0x158>
 80008f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008fa:	edc7 7a04 	vstr	s15, [r7, #16]
	 float calc = ((float) volt-0.42f)*100.0f/1.65f;
 80008fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000902:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000a30 <convert_adc_throttle+0x15c>
 8000906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800090a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000a34 <convert_adc_throttle+0x160>
 800090e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000912:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8000a38 <convert_adc_throttle+0x164>
 8000916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800091a:	edc7 7a03 	vstr	s15, [r7, #12]

	 th->adc_sum -= th->buffer[th->buffer_index];
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	ed93 7a00 	vldr	s14, [r3]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	3304      	adds	r3, #4
 8000932:	edd3 7a00 	vldr	s15, [r3]
 8000936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	edc3 7a00 	vstr	s15, [r3]

	 // Add new sample
	 th->buffer[th->buffer_index] = calc;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	3304      	adds	r3, #4
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	601a      	str	r2, [r3, #0]
	 th->adc_sum += calc;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	ed93 7a00 	vldr	s14, [r3]
 8000958:	edd7 7a03 	vldr	s15, [r7, #12]
 800095c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	edc3 7a00 	vstr	s15, [r3]

	 // Increment index
	 th->buffer_index++;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800096c:	3301      	adds	r3, #1
 800096e:	b2da      	uxtb	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	 if (th->buffer_index >= THROTTLE_BUFFER_SIZE) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800097c:	2b1f      	cmp	r3, #31
 800097e:	d903      	bls.n	8000988 <convert_adc_throttle+0xb4>
		 th->buffer_index = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	 }


	 float output_value = th->adc_sum / THROTTLE_BUFFER_SIZE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	ed93 7a00 	vldr	s14, [r3]
 800098e:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000a3c <convert_adc_throttle+0x168>
 8000992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000996:	edc7 7a05 	vstr	s15, [r7, #20]

	 if (output_value > 100.0f){
 800099a:	edd7 7a05 	vldr	s15, [r7, #20]
 800099e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000a34 <convert_adc_throttle+0x160>
 80009a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009aa:	dd01      	ble.n	80009b0 <convert_adc_throttle+0xdc>
		 output_value = 100.0f;
 80009ac:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <convert_adc_throttle+0x16c>)
 80009ae:	617b      	str	r3, [r7, #20]
	 }

	 // Hysteresis -- TODO: This could be cleaned up?
	 if (output_value > th->hysteresis_min){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80009b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80009ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c2:	dd03      	ble.n	80009cc <convert_adc_throttle+0xf8>
		 th->throttle_activated = 1;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	 }
	 if (th->throttle_activated == 1 && output_value < (th->hysteresis_min - th->hysteresis)){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d112      	bne.n	80009fc <convert_adc_throttle+0x128>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80009e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80009ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f2:	d503      	bpl.n	80009fc <convert_adc_throttle+0x128>
		 th->throttle_activated = 0;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	 }

	 // Write output value
	 if (th->throttle_activated == 1) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d104      	bne.n	8000a10 <convert_adc_throttle+0x13c>
		 th->throttle_value.sensor_float = output_value;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	 } else {
		 th->throttle_value.sensor_float = 0.0f;
	 }
}
 8000a0e:	e004      	b.n	8000a1a <convert_adc_throttle+0x146>
		 th->throttle_value.sensor_float = 0.0f;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000a1a:	bf00      	nop
 8000a1c:	371c      	adds	r7, #28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40533333 	.word	0x40533333
 8000a2c:	45800000 	.word	0x45800000
 8000a30:	3ed70a3d 	.word	0x3ed70a3d
 8000a34:	42c80000 	.word	0x42c80000
 8000a38:	3fd33333 	.word	0x3fd33333
 8000a3c:	42000000 	.word	0x42000000
 8000a40:	42c80000 	.word	0x42c80000

08000a44 <steering_angle_init>:

// Steering angle functions
void steering_angle_init(struct SteeringAngle* sa) {
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	sa->adc_sum = 0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
	sa->buffer_index = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	// Init buffer with zeroes
	// maybe this can also be done at initialization
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	e00b      	b.n	8000a7a <steering_angle_init+0x36>
		sa->buffer[i] = 0;
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3302      	adds	r3, #2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	ddf0      	ble.n	8000a62 <steering_angle_init+0x1e>
	}

	sa->steering_value.sensor_float = 0.0f;  // init with 0 for safety
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f04f 0200 	mov.w	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <steering_angle_avg>:

void steering_angle_avg(struct SteeringAngle* sa, float steering_value) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	ed87 0a00 	vstr	s0, [r7]
	sa->adc_sum -= sa->buffer[sa->buffer_index];
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	3302      	adds	r3, #2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add new sample
	sa->buffer[sa->buffer_index] = steering_value;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	3302      	adds	r3, #2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	601a      	str	r2, [r3, #0]
	sa->adc_sum += steering_value;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ade:	edd7 7a00 	vldr	s15, [r7]
 8000ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	edc3 7a02 	vstr	s15, [r3, #8]

	// Increment index
	sa->buffer_index++;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	if (sa->buffer_index >= 32) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000b02:	2b1f      	cmp	r3, #31
 8000b04:	d903      	bls.n	8000b0e <steering_angle_avg+0x7a>
		sa->buffer_index = 0;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	}

	// Write average value
	sa->steering_value.sensor_float = sa->adc_sum / 32.0f;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b14:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000b30 <steering_angle_avg+0x9c>
 8000b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	edc3 7a00 	vstr	s15, [r3]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	42000000 	.word	0x42000000

08000b34 <HAL_ADC_ConvCpltCallback>:

// ADC functions
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	adc_complete_flag = 1;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000310 	.word	0x20000310

08000b54 <main>:
  * @brief  The application entry point.
  * @retval int
  */
uint32_t time_now;
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5a:	f000 fca7 	bl	80014ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5e:	f000 f8b5 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b62:	f000 fa03 	bl	8000f6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b66:	f000 f9d7 	bl	8000f18 <MX_DMA_Init>
  MX_ADC2_Init();
 8000b6a:	f000 f8fb 	bl	8000d64 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000b6e:	f000 f96f 	bl	8000e50 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // Start ADC2
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) raw_adc_values, 2);
 8000b72:	2202      	movs	r2, #2
 8000b74:	494b      	ldr	r1, [pc, #300]	@ (8000ca4 <main+0x150>)
 8000b76:	484c      	ldr	r0, [pc, #304]	@ (8000ca8 <main+0x154>)
 8000b78:	f001 f8ee 	bl	8001d58 <HAL_ADC_Start_DMA>

  // Start FDCAN1
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000b7c:	484b      	ldr	r0, [pc, #300]	@ (8000cac <main+0x158>)
 8000b7e:	f002 fdef 	bl	8003760 <HAL_FDCAN_Start>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <main+0x38>
    {
      Error_Handler();
 8000b88:	f000 fa08 	bl	8000f9c <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4846      	ldr	r0, [pc, #280]	@ (8000cac <main+0x158>)
 8000b92:	f002 ff59 	bl	8003a48 <HAL_FDCAN_ActivateNotification>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <main+0x4c>
    {
      /* Notification Error */
      Error_Handler();
 8000b9c:	f000 f9fe 	bl	8000f9c <Error_Handler>
    }

  // Init sensor structs
  throttle_init(&throttle_sensor);
 8000ba0:	4843      	ldr	r0, [pc, #268]	@ (8000cb0 <main+0x15c>)
 8000ba2:	f7ff fe5f 	bl	8000864 <throttle_init>
  steering_angle_init(&steering_sensor);
 8000ba6:	4843      	ldr	r0, [pc, #268]	@ (8000cb4 <main+0x160>)
 8000ba8:	f7ff ff4c 	bl	8000a44 <steering_angle_init>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 fb99 	bl	80012e4 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000bb2:	4b41      	ldr	r3, [pc, #260]	@ (8000cb8 <main+0x164>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000bba:	4b3f      	ldr	r3, [pc, #252]	@ (8000cb8 <main+0x164>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb8 <main+0x164>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb8 <main+0x164>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb8 <main+0x164>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000bd2:	4939      	ldr	r1, [pc, #228]	@ (8000cb8 <main+0x164>)
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fbbb 	bl	8001350 <BSP_COM_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <main+0x90>
  {
    Error_Handler();
 8000be0:	f000 f9dc 	bl	8000f9c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Turn on the inverter


  int time_sum = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  while (time_sum < 5000) {
 8000be8:	e007      	b.n	8000bfa <main+0xa6>
	 send_turn_on_inverter();
 8000bea:	f7ff fdbf 	bl	800076c <send_turn_on_inverter>

	 // CAN messages at 50 ms interval
	 time_sum += 50;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3332      	adds	r3, #50	@ 0x32
 8000bf2:	60fb      	str	r3, [r7, #12]
	 HAL_Delay(50);
 8000bf4:	2032      	movs	r0, #50	@ 0x32
 8000bf6:	f000 fcc9 	bl	800158c <HAL_Delay>
  while (time_sum < 5000) {
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c00:	4293      	cmp	r3, r2
 8000c02:	ddf2      	ble.n	8000bea <main+0x96>
  }

  uint32_t time_last_5ms = HAL_GetTick();
 8000c04:	f000 fcb6 	bl	8001574 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t time_last_50ms = HAL_GetTick();
 8000c0a:	f000 fcb3 	bl	8001574 <HAL_GetTick>
 8000c0e:	6078      	str	r0, [r7, #4]

  while (1)
  {
	 time_now = HAL_GetTick();
 8000c10:	f000 fcb0 	bl	8001574 <HAL_GetTick>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a29      	ldr	r2, [pc, #164]	@ (8000cbc <main+0x168>)
 8000c18:	6013      	str	r3, [r2, #0]

	 // Display
	 if (time_now - time_last_5ms > 5) {
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <main+0x168>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d906      	bls.n	8000c34 <main+0xe0>
		 send_throttle_steering_display(&throttle_sensor, &steering_sensor);
 8000c26:	4923      	ldr	r1, [pc, #140]	@ (8000cb4 <main+0x160>)
 8000c28:	4821      	ldr	r0, [pc, #132]	@ (8000cb0 <main+0x15c>)
 8000c2a:	f7ff fdd3 	bl	80007d4 <send_throttle_steering_display>
		 time_last_5ms = time_now;  // update last time
 8000c2e:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <main+0x168>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	60bb      	str	r3, [r7, #8]
	 }

	 // Inverter
	 if (time_now - time_last_50ms > 50) {
 8000c34:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <main+0x168>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b32      	cmp	r3, #50	@ 0x32
 8000c3e:	d905      	bls.n	8000c4c <main+0xf8>
		 send_velocity_ref_inverter(&throttle_sensor);
 8000c40:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <main+0x15c>)
 8000c42:	f7ff fd9f 	bl	8000784 <send_velocity_ref_inverter>
		 time_last_50ms = time_now;  // update last time
 8000c46:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <main+0x168>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	607b      	str	r3, [r7, #4]
	 }

	 // Other tasks
	 if (adc_complete_flag) {
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <main+0x16c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0dc      	beq.n	8000c10 <main+0xbc>
		 // Get throttle
		 convert_adc_throttle(&throttle_sensor, raw_adc_values[0]);
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <main+0x150>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <main+0x15c>)
 8000c5e:	f7ff fe39 	bl	80008d4 <convert_adc_throttle>
//	     SpeedReference = ThrottleValue*MaxRPM/100.0;  // TODO: remove

		 // Get steering angle
		 float steering_value = (raw_adc_values[1]-3200)/4095.0f*110.0f;
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <main+0x150>)
 8000c64:	885b      	ldrh	r3, [r3, #2]
 8000c66:	f5a3 6348 	sub.w	r3, r3, #3200	@ 0xc80
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c72:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000cc4 <main+0x170>
 8000c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c7a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000cc8 <main+0x174>
 8000c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c82:	edc7 7a00 	vstr	s15, [r7]
		 steering_angle_avg(&steering_sensor, steering_value);
 8000c86:	ed97 0a00 	vldr	s0, [r7]
 8000c8a:	480a      	ldr	r0, [pc, #40]	@ (8000cb4 <main+0x160>)
 8000c8c:	f7ff ff02 	bl	8000a94 <steering_angle_avg>

		 // Reset ADC input
		 HAL_ADC_Start_DMA(&hadc2, (uint32_t*) raw_adc_values, 2);
 8000c90:	2202      	movs	r2, #2
 8000c92:	4904      	ldr	r1, [pc, #16]	@ (8000ca4 <main+0x150>)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <main+0x154>)
 8000c96:	f001 f85f 	bl	8001d58 <HAL_ADC_Start_DMA>
		 adc_complete_flag = 0;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <main+0x16c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
	 time_now = HAL_GetTick();
 8000ca0:	e7b6      	b.n	8000c10 <main+0xbc>
 8000ca2:	bf00      	nop
 8000ca4:	20000314 	.word	0x20000314
 8000ca8:	2000004c 	.word	0x2000004c
 8000cac:	20000118 	.word	0x20000118
 8000cb0:	20000180 	.word	0x20000180
 8000cb4:	20000218 	.word	0x20000218
 8000cb8:	2000003c 	.word	0x2000003c
 8000cbc:	20000318 	.word	0x20000318
 8000cc0:	20000310 	.word	0x20000310
 8000cc4:	457ff000 	.word	0x457ff000
 8000cc8:	42dc0000 	.word	0x42dc0000

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	@ 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	2238      	movs	r2, #56	@ 0x38
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f005 f8b9 	bl	8005e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cf2:	f003 fb97 	bl	8004424 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d00:	2340      	movs	r3, #64	@ 0x40
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d10:	2308      	movs	r3, #8
 8000d12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000d14:	2308      	movs	r3, #8
 8000d16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fc31 	bl	800458c <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d30:	f000 f934 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 ff2f 	bl	8004bb0 <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d58:	f000 f920 	bl	8000f9c <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3750      	adds	r7, #80	@ 0x50
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f005 f86e 	bl	8005e52 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d76:	4b32      	ldr	r3, [pc, #200]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000d78:	4a32      	ldr	r2, [pc, #200]	@ (8000e44 <MX_ADC2_Init+0xe0>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d7c:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000d7e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d84:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d96:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d9c:	4b28      	ldr	r3, [pc, #160]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000d9e:	2208      	movs	r2, #8
 8000da0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = ENABLE;
 8000da2:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000dae:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000db4:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dde:	4818      	ldr	r0, [pc, #96]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000de0:	f000 fe36 	bl	8001a50 <HAL_ADC_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000dea:	f000 f8d7 	bl	8000f9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_ADC2_Init+0xe4>)
 8000df0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df2:	2306      	movs	r3, #6
 8000df4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dfa:	237f      	movs	r3, #127	@ 0x7f
 8000dfc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000e0c:	f001 fa90 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000e16:	f000 f8c1 	bl	8000f9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_ADC2_Init+0xe8>)
 8000e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <MX_ADC2_Init+0xdc>)
 8000e28:	f001 fa82 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000e32:	f000 f8b3 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000004c 	.word	0x2000004c
 8000e44:	50000100 	.word	0x50000100
 8000e48:	10c00010 	.word	0x10c00010
 8000e4c:	04300002 	.word	0x04300002

08000e50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e56:	4a2e      	ldr	r2, [pc, #184]	@ (8000f10 <MX_FDCAN1_Init+0xc0>)
 8000e58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e66:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e78:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e80:	2208      	movs	r2, #8
 8000e82:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e84:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e8c:	220d      	movs	r2, #13
 8000e8e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ec0:	4812      	ldr	r0, [pc, #72]	@ (8000f0c <MX_FDCAN1_Init+0xbc>)
 8000ec2:	f002 faf3 	bl	80034ac <HAL_FDCAN_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000ecc:	f000 f866 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  tx_header.Identifier = 0x301;  // no need to init address yet
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000ed2:	f240 3201 	movw	r2, #769	@ 0x301
 8000ed6:	601a      	str	r2, [r3, #0]
    tx_header.IdType = FDCAN_STANDARD_ID;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
    tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    tx_header.DataLength = FDCAN_DLC_BYTES_8;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	60da      	str	r2, [r3, #12]
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
    tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
    tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
    tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
    tx_header.MessageMarker = 0;
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <MX_FDCAN1_Init+0xc4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000118 	.word	0x20000118
 8000f10:	40006400 	.word	0x40006400
 8000f14:	200002a8 	.word	0x200002a8

08000f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f1e:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_DMA_Init+0x50>)
 8000f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f22:	4a11      	ldr	r2, [pc, #68]	@ (8000f68 <MX_DMA_Init+0x50>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_DMA_Init+0x50>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_DMA_Init+0x50>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <MX_DMA_Init+0x50>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_DMA_Init+0x50>)
 8000f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	200b      	movs	r0, #11
 8000f54:	f002 f803 	bl	8002f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f58:	200b      	movs	r0, #11
 8000f5a:	f002 f81a 	bl	8002f92 <HAL_NVIC_EnableIRQ>

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_GPIO_Init+0x2c>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <MX_GPIO_Init+0x2c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_GPIO_Init+0x2c>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <Error_Handler+0x8>

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_MspInit+0x44>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fec <HAL_MspInit+0x44>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <HAL_MspInit+0x44>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_MspInit+0x44>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_MspInit+0x44>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_MspInit+0x44>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fde:	f003 fac5 	bl	800456c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09a      	sub	sp, #104	@ 0x68
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2244      	movs	r2, #68	@ 0x44
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f004 ff1e 	bl	8005e52 <memset>
  if(hadc->Instance==ADC2)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a38      	ldr	r2, [pc, #224]	@ (80010fc <HAL_ADC_MspInit+0x10c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d168      	bne.n	80010f2 <HAL_ADC_MspInit+0x102>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001020:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001024:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001026:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800102a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4618      	mov	r0, r3
 8001032:	f003 ffd9 	bl	8004fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800103c:	f7ff ffae 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <HAL_ADC_MspInit+0x110>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	4a2e      	ldr	r2, [pc, #184]	@ (8001100 <HAL_ADC_MspInit+0x110>)
 8001046:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800104a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104c:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <HAL_ADC_MspInit+0x110>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <HAL_ADC_MspInit+0x110>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <HAL_ADC_MspInit+0x110>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001064:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <HAL_ADC_MspInit+0x110>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001070:	2381      	movs	r3, #129	@ 0x81
 8001072:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001074:	2303      	movs	r3, #3
 8001076:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001086:	f003 f833 	bl	80040f0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 800108c:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <HAL_ADC_MspInit+0x118>)
 800108e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 8001092:	2224      	movs	r2, #36	@ 0x24
 8001094:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 80010a4:	2280      	movs	r2, #128	@ 0x80
 80010a6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 80010aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 80010b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 80010c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80010c6:	480f      	ldr	r0, [pc, #60]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 80010c8:	f001 ff7e 	bl	8002fc8 <HAL_DMA_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80010d2:	f7ff ff63 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 80010da:	655a      	str	r2, [r3, #84]	@ 0x54
 80010dc:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <HAL_ADC_MspInit+0x114>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2012      	movs	r0, #18
 80010e8:	f001 ff39 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010ec:	2012      	movs	r0, #18
 80010ee:	f001 ff50 	bl	8002f92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 80010f2:	bf00      	nop
 80010f4:	3768      	adds	r7, #104	@ 0x68
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	50000100 	.word	0x50000100
 8001100:	40021000 	.word	0x40021000
 8001104:	200000b8 	.word	0x200000b8
 8001108:	40020008 	.word	0x40020008

0800110c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b09a      	sub	sp, #104	@ 0x68
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2244      	movs	r2, #68	@ 0x44
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f004 fe90 	bl	8005e52 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a24      	ldr	r2, [pc, #144]	@ (80011c8 <HAL_FDCAN_MspInit+0xbc>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d141      	bne.n	80011c0 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800113c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001140:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001146:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4618      	mov	r0, r3
 800114e:	f003 ff4b 	bl	8004fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001158:	f7ff ff20 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_FDCAN_MspInit+0xc0>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001160:	4a1a      	ldr	r2, [pc, #104]	@ (80011cc <HAL_FDCAN_MspInit+0xc0>)
 8001162:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001166:	6593      	str	r3, [r2, #88]	@ 0x58
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_FDCAN_MspInit+0xc0>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_FDCAN_MspInit+0xc0>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <HAL_FDCAN_MspInit+0xc0>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_FDCAN_MspInit+0xc0>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800118c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001190:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800119e:	2309      	movs	r3, #9
 80011a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ac:	f002 ffa0 	bl	80040f0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2015      	movs	r0, #21
 80011b6:	f001 fed2 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80011ba:	2015      	movs	r0, #21
 80011bc:	f001 fee9 	bl	8002f92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80011c0:	bf00      	nop
 80011c2:	3768      	adds	r7, #104	@ 0x68
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40006400 	.word	0x40006400
 80011cc:	40021000 	.word	0x40021000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <MemManage_Handler+0x4>

080011e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001226:	f000 f993 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <DMA1_Channel1_IRQHandler+0x10>)
 8001236:	f001 ffea 	bl	800320e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200000b8 	.word	0x200000b8

08001244 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <ADC1_2_IRQHandler+0x10>)
 800124a:	f000 fe39 	bl	8001ec0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000004c 	.word	0x2000004c

08001258 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <FDCAN1_IT0_IRQHandler+0x10>)
 800125e:	f002 fcd9 	bl	8003c14 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000118 	.word	0x20000118

0800126c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <SystemInit+0x20>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <SystemInit+0x20>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001290:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001292:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001294:	f7ff ffea 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <LoopForever+0x6>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	@ (80012d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <LoopForever+0xe>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	@ (80012dc <LoopForever+0x16>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f004 fdd1 	bl	8005e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c2:	f7ff fc47 	bl	8000b54 <main>

080012c6 <LoopForever>:

LoopForever:
    b LoopForever
 80012c6:	e7fe      	b.n	80012c6 <LoopForever>
  ldr   r0, =_estack
 80012c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80012d4:	08005f14 	.word	0x08005f14
  ldr r2, =_sbss
 80012d8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80012dc:	200003b4 	.word	0x200003b4

080012e0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <COMP1_2_3_IRQHandler>
	...

080012e4 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80012ee:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <BSP_LED_Init+0x64>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <BSP_LED_Init+0x64>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <BSP_LED_Init+0x64>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001306:	2320      	movs	r3, #32
 8001308:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4a0c      	ldr	r2, [pc, #48]	@ (800134c <BSP_LED_Init+0x68>)
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	f107 020c 	add.w	r2, r7, #12
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fee3 	bl	80040f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4a07      	ldr	r2, [pc, #28]	@ (800134c <BSP_LED_Init+0x68>)
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	2120      	movs	r1, #32
 8001334:	2200      	movs	r2, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f003 f85c 	bl	80043f4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	2000000c 	.word	0x2000000c

08001350 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d903      	bls.n	800136e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001366:	f06f 0301 	mvn.w	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	e018      	b.n	80013a0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2294      	movs	r2, #148	@ 0x94
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <BSP_COM_Init+0x5c>)
 8001378:	4413      	add	r3, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f84a 	bl	8001414 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2294      	movs	r2, #148	@ 0x94
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <BSP_COM_Init+0x5c>)
 800138a:	4413      	add	r3, r2
 800138c:	6839      	ldr	r1, [r7, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f80e 	bl	80013b0 <MX_LPUART1_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800139a:	f06f 0303 	mvn.w	r3, #3
 800139e:	e000      	b.n	80013a2 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80013a0:	68fb      	ldr	r3, [r7, #12]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000031c 	.word	0x2000031c

080013b0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <MX_LPUART1_Init+0x60>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	220c      	movs	r2, #12
 80013ce:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	895b      	ldrh	r3, [r3, #10]
 80013d4:	461a      	mov	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	891b      	ldrh	r3, [r3, #8]
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	899b      	ldrh	r3, [r3, #12]
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013fc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f003 ffe2 	bl	80053c8 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000010 	.word	0x20000010

08001414 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <COM1_MspInit+0x94>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <COM1_MspInit+0x94>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <COM1_MspInit+0x94>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <COM1_MspInit+0x94>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <COM1_MspInit+0x94>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <COM1_MspInit+0x94>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <COM1_MspInit+0x94>)
 800144e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001450:	4a15      	ldr	r2, [pc, #84]	@ (80014a8 <COM1_MspInit+0x94>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <COM1_MspInit+0x94>)
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001464:	2304      	movs	r3, #4
 8001466:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001474:	230c      	movs	r3, #12
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001482:	f002 fe35 	bl	80040f0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001486:	2308      	movs	r3, #8
 8001488:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800148e:	230c      	movs	r3, #12
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149c:	f002 fe28 	bl	80040f0 <HAL_GPIO_Init>
}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	@ 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b6:	2003      	movs	r0, #3
 80014b8:	f001 fd46 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 f80d 	bl	80014dc <HAL_InitTick>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	e001      	b.n	80014d2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ce:	f7ff fd6b 	bl	8000fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014d2:	79fb      	ldrb	r3, [r7, #7]

}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_InitTick+0x68>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d022      	beq.n	8001536 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_InitTick+0x6c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_InitTick+0x68>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001500:	fbb2 f3f3 	udiv	r3, r2, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fd52 	bl	8002fae <HAL_SYSTICK_Config>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10f      	bne.n	8001530 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	d809      	bhi.n	800152a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001516:	2200      	movs	r2, #0
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	f04f 30ff 	mov.w	r0, #4294967295
 800151e:	f001 fd1e 	bl	8002f5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <HAL_InitTick+0x70>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e007      	b.n	800153a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e004      	b.n	800153a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e001      	b.n	800153a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000018 	.word	0x20000018
 8001548:	20000008 	.word	0x20000008
 800154c:	20000014 	.word	0x20000014

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_IncTick+0x1c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_IncTick+0x20>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4413      	add	r3, r2
 800155e:	4a03      	ldr	r2, [pc, #12]	@ (800156c <HAL_IncTick+0x1c>)
 8001560:	6013      	str	r3, [r2, #0]
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	200003b0 	.word	0x200003b0
 8001570:	20000018 	.word	0x20000018

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200003b0 	.word	0x200003b0

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d004      	beq.n	80015b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_Delay+0x40>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b0:	bf00      	nop
 80015b2:	f7ff ffdf 	bl	8001574 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d8f7      	bhi.n	80015b2 <HAL_Delay+0x26>
  {
  }
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000018 	.word	0x20000018

080015d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	609a      	str	r2, [r3, #8]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3360      	adds	r3, #96	@ 0x60
 800164a:	461a      	mov	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <LL_ADC_SetOffset+0x44>)
 800165a:	4013      	ands	r3, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	4313      	orrs	r3, r2
 8001668:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	03fff000 	.word	0x03fff000

08001680 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3360      	adds	r3, #96	@ 0x60
 800168e:	461a      	mov	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3360      	adds	r3, #96	@ 0x60
 80016bc:	461a      	mov	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016d6:	bf00      	nop
 80016d8:	371c      	adds	r7, #28
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b087      	sub	sp, #28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3360      	adds	r3, #96	@ 0x60
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	431a      	orrs	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3360      	adds	r3, #96	@ 0x60
 8001728:	461a      	mov	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	615a      	str	r2, [r3, #20]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800179a:	b480      	push	{r7}
 800179c:	b087      	sub	sp, #28
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3330      	adds	r3, #48	@ 0x30
 80017aa:	461a      	mov	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	211f      	movs	r1, #31
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	401a      	ands	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0e9b      	lsrs	r3, r3, #26
 80017d2:	f003 011f 	and.w	r1, r3, #31
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3314      	adds	r3, #20
 8001828:	461a      	mov	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	0e5b      	lsrs	r3, r3, #25
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	0d1b      	lsrs	r3, r3, #20
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2107      	movs	r1, #7
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	401a      	ands	r2, r3
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	0d1b      	lsrs	r3, r3, #20
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001862:	bf00      	nop
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0318 	and.w	r3, r3, #24
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001894:	40d9      	lsrs	r1, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	400b      	ands	r3, r1
 800189a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189e:	431a      	orrs	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	0007ffff 	.word	0x0007ffff

080018b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 031f 	and.w	r3, r3, #31
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001900:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6093      	str	r3, [r2, #8]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001928:	d101      	bne.n	800192e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800194c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001950:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001978:	d101      	bne.n	800197e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800199c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <LL_ADC_IsEnabled+0x18>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <LL_ADC_IsEnabled+0x1a>
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019ee:	f043 0204 	orr.w	r2, r3, #4
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d101      	bne.n	8001a1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d101      	bne.n	8001a40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e167      	b.n	8001d3a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fab9 	bl	8000ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff3f 	bl	8001914 <LL_ADC_IsDeepPowerDownEnabled>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff25 	bl	80018f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff5a 	bl	8001964 <LL_ADC_IsInternalRegulatorEnabled>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff3e 	bl	800193c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ac0:	4ba0      	ldr	r3, [pc, #640]	@ (8001d44 <HAL_ADC_Init+0x2f4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	4aa0      	ldr	r2, [pc, #640]	@ (8001d48 <HAL_ADC_Init+0x2f8>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	099b      	lsrs	r3, r3, #6
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ad4:	e002      	b.n	8001adc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f9      	bne.n	8001ad6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff3c 	bl	8001964 <LL_ADC_IsInternalRegulatorEnabled>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10d      	bne.n	8001b0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af6:	f043 0210 	orr.w	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff75 	bl	8001a02 <LL_ADC_REG_IsConversionOngoing>
 8001b18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 8100 	bne.w	8001d28 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 80fc 	bne.w	8001d28 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b38:	f043 0202 	orr.w	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff35 	bl	80019b4 <LL_ADC_IsEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d111      	bne.n	8001b74 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b54:	f7ff ff2e 	bl	80019b4 <LL_ADC_IsEnabled>
 8001b58:	4604      	mov	r4, r0
 8001b5a:	487c      	ldr	r0, [pc, #496]	@ (8001d4c <HAL_ADC_Init+0x2fc>)
 8001b5c:	f7ff ff2a 	bl	80019b4 <LL_ADC_IsEnabled>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4323      	orrs	r3, r4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4878      	ldr	r0, [pc, #480]	@ (8001d50 <HAL_ADC_Init+0x300>)
 8001b70:	f7ff fd2e 	bl	80015d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7f5b      	ldrb	r3, [r3, #29]
 8001b78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	045b      	lsls	r3, r3, #17
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	4b60      	ldr	r3, [pc, #384]	@ (8001d54 <HAL_ADC_Init+0x304>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff14 	bl	8001a28 <LL_ADC_INJ_IsConversionOngoing>
 8001c00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d16d      	bne.n	8001ce4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d16a      	bne.n	8001ce4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c12:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c2a:	f023 0302 	bic.w	r3, r3, #2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d017      	beq.n	8001c70 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c58:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6911      	ldr	r1, [r2, #16]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c6e:	e013      	b.n	8001c98 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c94:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d118      	bne.n	8001cd4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	e007      	b.n	8001ce4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10c      	bne.n	8001d06 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f023 010f 	bic.w	r1, r3, #15
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d04:	e007      	b.n	8001d16 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 020f 	bic.w	r2, r2, #15
 8001d14:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d26:	e007      	b.n	8001d38 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2c:	f043 0210 	orr.w	r2, r3, #16
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008
 8001d48:	053e2d63 	.word	0x053e2d63
 8001d4c:	50000100 	.word	0x50000100
 8001d50:	50000300 	.word	0x50000300
 8001d54:	fff04007 	.word	0xfff04007

08001d58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d64:	4851      	ldr	r0, [pc, #324]	@ (8001eac <HAL_ADC_Start_DMA+0x154>)
 8001d66:	f7ff fda7 	bl	80018b8 <LL_ADC_GetMultimode>
 8001d6a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fe46 	bl	8001a02 <LL_ADC_REG_IsConversionOngoing>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 808f 	bne.w	8001e9c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_Start_DMA+0x34>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e08a      	b.n	8001ea2 <HAL_ADC_Start_DMA+0x14a>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d002      	beq.n	8001da6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	d173      	bne.n	8001e8e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 feb2 	bl	8002b10 <ADC_Enable>
 8001dac:	4603      	mov	r3, r0
 8001dae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d166      	bne.n	8001e84 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a38      	ldr	r2, [pc, #224]	@ (8001eb0 <HAL_ADC_Start_DMA+0x158>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d002      	beq.n	8001dda <HAL_ADC_Start_DMA+0x82>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	e001      	b.n	8001dde <HAL_ADC_Start_DMA+0x86>
 8001dda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d002      	beq.n	8001dec <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e08:	f023 0206 	bic.w	r2, r3, #6
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	661a      	str	r2, [r3, #96]	@ 0x60
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1c:	4a25      	ldr	r2, [pc, #148]	@ (8001eb4 <HAL_ADC_Start_DMA+0x15c>)
 8001e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e24:	4a24      	ldr	r2, [pc, #144]	@ (8001eb8 <HAL_ADC_Start_DMA+0x160>)
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	4a23      	ldr	r2, [pc, #140]	@ (8001ebc <HAL_ADC_Start_DMA+0x164>)
 8001e2e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	221c      	movs	r2, #28
 8001e36:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0210 	orr.w	r2, r2, #16
 8001e4e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3340      	adds	r3, #64	@ 0x40
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f001 f952 	bl	8003118 <HAL_DMA_Start_IT>
 8001e74:	4603      	mov	r3, r0
 8001e76:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fdac 	bl	80019da <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e82:	e00d      	b.n	8001ea0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001e8c:	e008      	b.n	8001ea0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001e9a:	e001      	b.n	8001ea0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	50000300 	.word	0x50000300
 8001eb0:	50000100 	.word	0x50000100
 8001eb4:	08002c1d 	.word	0x08002c1d
 8001eb8:	08002cf5 	.word	0x08002cf5
 8001ebc:	08002d11 	.word	0x08002d11

08001ec0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001edc:	4883      	ldr	r0, [pc, #524]	@ (80020ec <HAL_ADC_IRQHandler+0x22c>)
 8001ede:	f7ff fceb 	bl	80018b8 <LL_ADC_GetMultimode>
 8001ee2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d017      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x5e>
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d012      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 ff3f 	bl	8002d94 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x72>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8085 	beq.w	8002048 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d07f      	beq.n	8002048 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fc05 	bl	8001774 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d064      	beq.n	800203a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a5e      	ldr	r2, [pc, #376]	@ (80020f0 <HAL_ADC_IRQHandler+0x230>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d002      	beq.n	8001f80 <HAL_ADC_IRQHandler+0xc0>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e001      	b.n	8001f84 <HAL_ADC_IRQHandler+0xc4>
 8001f80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d008      	beq.n	8001f9e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d002      	beq.n	8001f9e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b09      	cmp	r3, #9
 8001f9c:	d104      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	623b      	str	r3, [r7, #32]
 8001fa6:	e00d      	b.n	8001fc4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a50      	ldr	r2, [pc, #320]	@ (80020f0 <HAL_ADC_IRQHandler+0x230>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d002      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0xf8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e001      	b.n	8001fbc <HAL_ADC_IRQHandler+0xfc>
 8001fb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fbc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d135      	bne.n	800203a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d12e      	bne.n	800203a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fd0e 	bl	8001a02 <LL_ADC_REG_IsConversionOngoing>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d11a      	bne.n	8002022 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 020c 	bic.w	r2, r2, #12
 8001ffa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002020:	e00b      	b.n	800203a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fd7a 	bl	8000b34 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	220c      	movs	r2, #12
 8002046:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_ADC_IRQHandler+0x19c>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10b      	bne.n	8002074 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 809e 	beq.w	80021a4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8098 	beq.w	80021a4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002084:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fbae 	bl	80017f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002096:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fb69 	bl	8001774 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020a2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a11      	ldr	r2, [pc, #68]	@ (80020f0 <HAL_ADC_IRQHandler+0x230>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d002      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x1f4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e001      	b.n	80020b8 <HAL_ADC_IRQHandler+0x1f8>
 80020b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	4293      	cmp	r3, r2
 80020be:	d008      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	d002      	beq.n	80020d2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b07      	cmp	r3, #7
 80020d0:	d104      	bne.n	80020dc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	e011      	b.n	8002100 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a03      	ldr	r2, [pc, #12]	@ (80020f0 <HAL_ADC_IRQHandler+0x230>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d006      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x234>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e005      	b.n	80020f8 <HAL_ADC_IRQHandler+0x238>
 80020ec:	50000300 	.word	0x50000300
 80020f0:	50000100 	.word	0x50000100
 80020f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020f8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d047      	beq.n	8002196 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_ADC_IRQHandler+0x260>
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03f      	beq.n	8002196 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d13a      	bne.n	8002196 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212a:	2b40      	cmp	r3, #64	@ 0x40
 800212c:	d133      	bne.n	8002196 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d12e      	bne.n	8002196 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fc73 	bl	8001a28 <LL_ADC_INJ_IsConversionOngoing>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d11a      	bne.n	800217e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002156:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d112      	bne.n	8002196 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800217c:	e00b      	b.n	8002196 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fdd4 	bl	8002d44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2260      	movs	r2, #96	@ 0x60
 80021a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d011      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x312>
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00c      	beq.n	80021d2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f89f 	bl	8002308 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2280      	movs	r2, #128	@ 0x80
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d012      	beq.n	8002202 <HAL_ADC_IRQHandler+0x342>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00d      	beq.n	8002202 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fdba 	bl	8002d6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <HAL_ADC_IRQHandler+0x372>
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fdac 	bl	8002d80 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	d036      	beq.n	80022aa <HAL_ADC_IRQHandler+0x3ea>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d031      	beq.n	80022aa <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800224e:	2301      	movs	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
 8002252:	e014      	b.n	800227e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800225a:	4825      	ldr	r0, [pc, #148]	@ (80022f0 <HAL_ADC_IRQHandler+0x430>)
 800225c:	f7ff fb3a 	bl	80018d4 <LL_ADC_GetMultiDMATransfer>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002266:	2301      	movs	r3, #1
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
 800226a:	e008      	b.n	800227e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800227a:	2301      	movs	r3, #1
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	2b01      	cmp	r3, #1
 8002282:	d10e      	bne.n	80022a2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002288:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002294:	f043 0202 	orr.w	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f83d 	bl	800231c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2210      	movs	r2, #16
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d018      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x426>
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d013      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	f043 0208 	orr.w	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fd39 	bl	8002d58 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	@ 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	50000300 	.word	0x50000300

080022f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b0b6      	sub	sp, #216	@ 0xd8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x22>
 800234e:	2302      	movs	r3, #2
 8002350:	e3c8      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x7b4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fb4f 	bl	8001a02 <LL_ADC_REG_IsConversionOngoing>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 83ad 	bne.w	8002ac6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff fa0e 	bl	800179a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fb3d 	bl	8001a02 <LL_ADC_REG_IsConversionOngoing>
 8002388:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb49 	bl	8001a28 <LL_ADC_INJ_IsConversionOngoing>
 8002396:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800239a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 81d9 	bne.w	8002756 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 81d4 	bne.w	8002756 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023b6:	d10f      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7ff fa28 	bl	8001818 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f9bc 	bl	800174e <LL_ADC_SetSamplingTimeCommonConfig>
 80023d6:	e00e      	b.n	80023f6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	461a      	mov	r2, r3
 80023e6:	f7ff fa17 	bl	8001818 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f9ac 	bl	800174e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d022      	beq.n	800245e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002428:	f7ff f906 	bl	8001638 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6919      	ldr	r1, [r3, #16]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	461a      	mov	r2, r3
 800243a:	f7ff f952 	bl	80016e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x124>
 800244e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002452:	e000      	b.n	8002456 <HAL_ADC_ConfigChannel+0x126>
 8002454:	2300      	movs	r3, #0
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff f95e 	bl	8001718 <LL_ADC_SetOffsetSaturation>
 800245c:	e17b      	b.n	8002756 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f90b 	bl	8001680 <LL_ADC_GetOffsetChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x15a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f900 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	e01e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x198>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f8f5 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e004      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80024bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x1b0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	e018      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1e2>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80024f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80024fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e004      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002508:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002512:	429a      	cmp	r2, r3
 8002514:	d106      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f8c4 	bl	80016ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f8a8 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x220>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2101      	movs	r1, #1
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff f89d 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	e01e      	b.n	800258e <HAL_ADC_ConfigChannel+0x25e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f892 	bl	8001680 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800256e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e004      	b.n	800258c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x276>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	e018      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x2a8>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80025ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80025c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80025ca:	2320      	movs	r3, #32
 80025cc:	e004      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80025ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025d8:	429a      	cmp	r2, r3
 80025da:	d106      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2101      	movs	r1, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f861 	bl	80016ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2102      	movs	r1, #2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff f845 	bl	8001680 <LL_ADC_GetOffsetChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x2e6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2102      	movs	r1, #2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f83a 	bl	8001680 <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	e01e      	b.n	8002654 <HAL_ADC_ConfigChannel+0x324>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2102      	movs	r1, #2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff f82f 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002634:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800263c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e004      	b.n	8002652 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002648:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_ADC_ConfigChannel+0x33c>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	e016      	b.n	800269a <HAL_ADC_ConfigChannel+0x36a>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800267e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e004      	b.n	800269a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800269a:	429a      	cmp	r2, r3
 800269c:	d106      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	2102      	movs	r1, #2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff f800 	bl	80016ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2103      	movs	r1, #3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe ffe4 	bl	8001680 <LL_ADC_GetOffsetChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x3a8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2103      	movs	r1, #3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe ffd9 	bl	8001680 <LL_ADC_GetOffsetChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	f003 021f 	and.w	r2, r3, #31
 80026d6:	e017      	b.n	8002708 <HAL_ADC_ConfigChannel+0x3d8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2103      	movs	r1, #3
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe ffce 	bl	8001680 <LL_ADC_GetOffsetChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80026f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80026fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x3f0>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	e011      	b.n	8002744 <HAL_ADC_ConfigChannel+0x414>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800272e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002730:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800273c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	2103      	movs	r1, #3
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe ffab 	bl	80016ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f92a 	bl	80019b4 <LL_ADC_IsEnabled>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 8140 	bne.w	80029e8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	461a      	mov	r2, r3
 8002776:	f7ff f87b 	bl	8001870 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4a8f      	ldr	r2, [pc, #572]	@ (80029bc <HAL_ADC_ConfigChannel+0x68c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	f040 8131 	bne.w	80029e8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x47e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	3301      	adds	r3, #1
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b09      	cmp	r3, #9
 80027a4:	bf94      	ite	ls
 80027a6:	2301      	movls	r3, #1
 80027a8:	2300      	movhi	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e019      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x4b2>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80027bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027be:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80027c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e003      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80027ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b09      	cmp	r3, #9
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d079      	beq.n	80028da <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x4d2>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	3301      	adds	r3, #1
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002800:	e015      	b.n	800282e <HAL_ADC_ConfigChannel+0x4fe>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002812:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e003      	b.n	8002826 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800281e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	069b      	lsls	r3, r3, #26
 800282a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_ADC_ConfigChannel+0x51e>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	e017      	b.n	800287e <HAL_ADC_ConfigChannel+0x54e>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800285c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800286a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	ea42 0103 	orr.w	r1, r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x574>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	3301      	adds	r3, #1
 8002896:	f003 021f 	and.w	r2, r3, #31
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	051b      	lsls	r3, r3, #20
 80028a2:	e018      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x5a6>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80028b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e003      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80028c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f003 021f 	and.w	r2, r3, #31
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d6:	430b      	orrs	r3, r1
 80028d8:	e081      	b.n	80029de <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x5c6>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	3301      	adds	r3, #1
 80028ee:	069b      	lsls	r3, r3, #26
 80028f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028f4:	e015      	b.n	8002922 <HAL_ADC_ConfigChannel+0x5f2>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e003      	b.n	800291a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	069b      	lsls	r3, r3, #26
 800291e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x612>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	3301      	adds	r3, #1
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	e017      	b.n	8002972 <HAL_ADC_ConfigChannel+0x642>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	61fb      	str	r3, [r7, #28]
  return result;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e003      	b.n	8002966 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	ea42 0103 	orr.w	r1, r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_ADC_ConfigChannel+0x66e>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	3301      	adds	r3, #1
 800298a:	f003 021f 	and.w	r2, r3, #31
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	3b1e      	subs	r3, #30
 8002996:	051b      	lsls	r3, r3, #20
 8002998:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800299c:	e01e      	b.n	80029dc <HAL_ADC_ConfigChannel+0x6ac>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	613b      	str	r3, [r7, #16]
  return result;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e006      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x698>
 80029ba:	bf00      	nop
 80029bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 021f 	and.w	r2, r3, #31
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	3b1e      	subs	r3, #30
 80029d6:	051b      	lsls	r3, r3, #20
 80029d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe ff18 	bl	8001818 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b3f      	ldr	r3, [pc, #252]	@ (8002aec <HAL_ADC_ConfigChannel+0x7bc>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d071      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f4:	483e      	ldr	r0, [pc, #248]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 80029f6:	f7fe fe11 	bl	800161c <LL_ADC_GetCommonPathInternalCh>
 80029fa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3c      	ldr	r2, [pc, #240]	@ (8002af4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_ADC_ConfigChannel+0x6e2>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002af8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d127      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d121      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a26:	d157      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a30:	4619      	mov	r1, r3
 8002a32:	482f      	ldr	r0, [pc, #188]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a34:	f7fe fddf 	bl	80015f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a38:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <HAL_ADC_ConfigChannel+0x7cc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	4a30      	ldr	r2, [pc, #192]	@ (8002b00 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a52:	e002      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a60:	e03a      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a27      	ldr	r2, [pc, #156]	@ (8002b04 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d113      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10d      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d02a      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4818      	ldr	r0, [pc, #96]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a8e:	f7fe fdb2 	bl	80015f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a92:	e021      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d116      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d011      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ab8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002abc:	4619      	mov	r1, r3
 8002abe:	480c      	ldr	r0, [pc, #48]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ac0:	f7fe fd99 	bl	80015f6 <LL_ADC_SetCommonPathInternalCh>
 8002ac4:	e008      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ae0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	37d8      	adds	r7, #216	@ 0xd8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	80080000 	.word	0x80080000
 8002af0:	50000300 	.word	0x50000300
 8002af4:	c3210000 	.word	0xc3210000
 8002af8:	90c00010 	.word	0x90c00010
 8002afc:	20000008 	.word	0x20000008
 8002b00:	053e2d63 	.word	0x053e2d63
 8002b04:	c7520000 	.word	0xc7520000
 8002b08:	50000100 	.word	0x50000100
 8002b0c:	cb840000 	.word	0xcb840000

08002b10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ff47 	bl	80019b4 <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d169      	bne.n	8002c00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	4b36      	ldr	r3, [pc, #216]	@ (8002c0c <ADC_Enable+0xfc>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e055      	b.n	8002c02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe ff16 	bl	800198c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b60:	482b      	ldr	r0, [pc, #172]	@ (8002c10 <ADC_Enable+0x100>)
 8002b62:	f7fe fd5b 	bl	800161c <LL_ADC_GetCommonPathInternalCh>
 8002b66:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b70:	4b28      	ldr	r3, [pc, #160]	@ (8002c14 <ADC_Enable+0x104>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	4a28      	ldr	r2, [pc, #160]	@ (8002c18 <ADC_Enable+0x108>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b8a:	e002      	b.n	8002b92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f9      	bne.n	8002b8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b98:	f7fe fcec 	bl	8001574 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b9e:	e028      	b.n	8002bf2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe ff05 	bl	80019b4 <LL_ADC_IsEnabled>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d104      	bne.n	8002bba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fee9 	bl	800198c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bba:	f7fe fcdb 	bl	8001574 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d914      	bls.n	8002bf2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d00d      	beq.n	8002bf2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e007      	b.n	8002c02 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d1cf      	bne.n	8002ba0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	8000003f 	.word	0x8000003f
 8002c10:	50000300 	.word	0x50000300
 8002c14:	20000008 	.word	0x20000008
 8002c18:	053e2d63 	.word	0x053e2d63

08002c1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d14b      	bne.n	8002cce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d021      	beq.n	8002c94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe fd8d 	bl	8001774 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d032      	beq.n	8002cc6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d12b      	bne.n	8002cc6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11f      	bne.n	8002cc6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c92:	e018      	b.n	8002cc6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d111      	bne.n	8002cc6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7fd ff34 	bl	8000b34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ccc:	e00e      	b.n	8002cec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff fb1e 	bl	800231c <HAL_ADC_ErrorCallback>
}
 8002ce0:	e004      	b.n	8002cec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff faf6 	bl	80022f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	f043 0204 	orr.w	r2, r3, #4
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff faf0 	bl	800231c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db0b      	blt.n	8002e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4907      	ldr	r1, [pc, #28]	@ (8002e44 <__NVIC_EnableIRQ+0x38>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000e100 	.word	0xe000e100

08002e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db0a      	blt.n	8002e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	490c      	ldr	r1, [pc, #48]	@ (8002e94 <__NVIC_SetPriority+0x4c>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e70:	e00a      	b.n	8002e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4908      	ldr	r1, [pc, #32]	@ (8002e98 <__NVIC_SetPriority+0x50>)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	440b      	add	r3, r1
 8002e86:	761a      	strb	r2, [r3, #24]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f1c3 0307 	rsb	r3, r3, #7
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf28      	it	cs
 8002eba:	2304      	movcs	r3, #4
 8002ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d902      	bls.n	8002ecc <NVIC_EncodePriority+0x30>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3b03      	subs	r3, #3
 8002eca:	e000      	b.n	8002ece <NVIC_EncodePriority+0x32>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43d9      	mvns	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	4313      	orrs	r3, r2
         );
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	@ 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff8e 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff29 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f6c:	f7ff ff40 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f7ff ff90 	bl	8002e9c <NVIC_EncodePriority>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff5f 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff33 	bl	8002e0c <__NVIC_EnableIRQ>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffa4 	bl	8002f04 <SysTick_Config>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e08d      	b.n	80030f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b47      	ldr	r3, [pc, #284]	@ (8003100 <HAL_DMA_Init+0x138>)
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d80f      	bhi.n	8003006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b45      	ldr	r3, [pc, #276]	@ (8003104 <HAL_DMA_Init+0x13c>)
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a45      	ldr	r2, [pc, #276]	@ (8003108 <HAL_DMA_Init+0x140>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	009a      	lsls	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a42      	ldr	r2, [pc, #264]	@ (800310c <HAL_DMA_Init+0x144>)
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40
 8003004:	e00e      	b.n	8003024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b40      	ldr	r3, [pc, #256]	@ (8003110 <HAL_DMA_Init+0x148>)
 800300e:	4413      	add	r3, r2
 8003010:	4a3d      	ldr	r2, [pc, #244]	@ (8003108 <HAL_DMA_Init+0x140>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a3c      	ldr	r2, [pc, #240]	@ (8003114 <HAL_DMA_Init+0x14c>)
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800303a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f9b6 	bl	80033e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003084:	d102      	bne.n	800308c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d010      	beq.n	80030cc <HAL_DMA_Init+0x104>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d80c      	bhi.n	80030cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9d6 	bl	8003464 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	e008      	b.n	80030de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40020407 	.word	0x40020407
 8003104:	bffdfff8 	.word	0xbffdfff8
 8003108:	cccccccd 	.word	0xcccccccd
 800310c:	40020000 	.word	0x40020000
 8003110:	bffdfbf8 	.word	0xbffdfbf8
 8003114:	40020400 	.word	0x40020400

08003118 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_DMA_Start_IT+0x20>
 8003134:	2302      	movs	r3, #2
 8003136:	e066      	b.n	8003206 <HAL_DMA_Start_IT+0xee>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d155      	bne.n	80031f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f8fb 	bl	800336c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 020e 	orr.w	r2, r2, #14
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e00f      	b.n	80031b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 020a 	orr.w	r2, r2, #10
 80031ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e005      	b.n	8003204 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003200:	2302      	movs	r3, #2
 8003202:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	2204      	movs	r2, #4
 8003230:	409a      	lsls	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d026      	beq.n	8003288 <HAL_DMA_IRQHandler+0x7a>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d021      	beq.n	8003288 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0204 	bic.w	r2, r2, #4
 8003260:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	2104      	movs	r1, #4
 8003270:	fa01 f202 	lsl.w	r2, r1, r2
 8003274:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	2b00      	cmp	r3, #0
 800327c:	d071      	beq.n	8003362 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003286:	e06c      	b.n	8003362 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2202      	movs	r2, #2
 8003292:	409a      	lsls	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02e      	beq.n	80032fa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d029      	beq.n	80032fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 020a 	bic.w	r2, r2, #10
 80032c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	2102      	movs	r1, #2
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d038      	beq.n	8003362 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032f8:	e033      	b.n	8003362 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2208      	movs	r2, #8
 8003304:	409a      	lsls	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02a      	beq.n	8003364 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d025      	beq.n	8003364 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 020e 	bic.w	r2, r2, #14
 8003326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f202 	lsl.w	r2, r1, r2
 800333a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003362:	bf00      	nop
 8003364:	bf00      	nop
}
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003382:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f003 021f 	and.w	r2, r3, #31
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d108      	bne.n	80033cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033ca:	e007      	b.n	80033dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b16      	ldr	r3, [pc, #88]	@ (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d802      	bhi.n	8003402 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033fc:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e001      	b.n	8003406 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003404:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3b08      	subs	r3, #8
 8003412:	4a12      	ldr	r2, [pc, #72]	@ (800345c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	009a      	lsls	r2, r3, #2
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	461a      	mov	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a0b      	ldr	r2, [pc, #44]	@ (8003460 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003432:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2201      	movs	r2, #1
 800343c:	409a      	lsls	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40020407 	.word	0x40020407
 8003454:	40020800 	.word	0x40020800
 8003458:	40020820 	.word	0x40020820
 800345c:	cccccccd 	.word	0xcccccccd
 8003460:	40020880 	.word	0x40020880

08003464 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	461a      	mov	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a08      	ldr	r2, [pc, #32]	@ (80034a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003486:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3b01      	subs	r3, #1
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	2201      	movs	r2, #1
 8003492:	409a      	lsls	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	1000823f 	.word	0x1000823f
 80034a8:	40020940 	.word	0x40020940

080034ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e147      	b.n	800374e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fe1a 	bl	800110c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0210 	bic.w	r2, r2, #16
 80034e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e8:	f7fe f844 	bl	8001574 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034ee:	e012      	b.n	8003516 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034f0:	f7fe f840 	bl	8001574 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b0a      	cmp	r3, #10
 80034fc:	d90b      	bls.n	8003516 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	f043 0201 	orr.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e11b      	b.n	800374e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b08      	cmp	r3, #8
 8003522:	d0e5      	beq.n	80034f0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003534:	f7fe f81e 	bl	8001574 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800353a:	e012      	b.n	8003562 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800353c:	f7fe f81a 	bl	8001574 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b0a      	cmp	r3, #10
 8003548:	d90b      	bls.n	8003562 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354e:	f043 0201 	orr.w	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2203      	movs	r2, #3
 800355a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0f5      	b.n	800374e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0e5      	beq.n	800353c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0202 	orr.w	r2, r2, #2
 800357e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a74      	ldr	r2, [pc, #464]	@ (8003758 <HAL_FDCAN_Init+0x2ac>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d103      	bne.n	8003592 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800358a:	4a74      	ldr	r2, [pc, #464]	@ (800375c <HAL_FDCAN_Init+0x2b0>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7c1b      	ldrb	r3, [r3, #16]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d108      	bne.n	80035ac <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035a8:	619a      	str	r2, [r3, #24]
 80035aa:	e007      	b.n	80035bc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	7c5b      	ldrb	r3, [r3, #17]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d108      	bne.n	80035d6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035d2:	619a      	str	r2, [r3, #24]
 80035d4:	e007      	b.n	80035e6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7c9b      	ldrb	r3, [r3, #18]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d108      	bne.n	8003600 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035fc:	619a      	str	r2, [r3, #24]
 80035fe:	e007      	b.n	8003610 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800360e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003634:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d108      	bne.n	8003660 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0204 	orr.w	r2, r2, #4
 800365c:	619a      	str	r2, [r3, #24]
 800365e:	e02c      	b.n	80036ba <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d028      	beq.n	80036ba <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d01c      	beq.n	80036aa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800367e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0210 	orr.w	r2, r2, #16
 800368e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d110      	bne.n	80036ba <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	619a      	str	r2, [r3, #24]
 80036a8:	e007      	b.n	80036ba <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0220 	orr.w	r2, r2, #32
 80036b8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	3b01      	subs	r3, #1
 80036c0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036ca:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036d2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	3b01      	subs	r3, #1
 80036dc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036e2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036e4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ee:	d115      	bne.n	800371c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fa:	3b01      	subs	r3, #1
 80036fc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036fe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	3b01      	subs	r3, #1
 8003706:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003708:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	3b01      	subs	r3, #1
 8003712:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003718:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800371a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fc0a 	bl	8003f4c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40006400 	.word	0x40006400
 800375c:	40006500 	.word	0x40006500

08003760 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	d110      	bne.n	8003796 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e006      	b.n	80037a4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379a:	f043 0204 	orr.w	r2, r3, #4
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
  }
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d12c      	bne.n	8003822 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80037d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e023      	b.n	8003830 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fbfa 	bl	8003ff8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	fa01 f202 	lsl.w	r2, r1, r2
 8003810:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003814:	2201      	movs	r2, #1
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	409a      	lsls	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e006      	b.n	8003830 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003826:	f043 0208 	orr.w	r2, r3, #8
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003838:	b480      	push	{r7}
 800383a:	b08b      	sub	sp, #44	@ 0x2c
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003850:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003852:	7efb      	ldrb	r3, [r7, #27]
 8003854:	2b02      	cmp	r3, #2
 8003856:	f040 80e8 	bne.w	8003a2a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b40      	cmp	r3, #64	@ 0x40
 800385e:	d137      	bne.n	80038d0 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003874:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0db      	b.n	8003a38 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800388c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003890:	d10a      	bne.n	80038a8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800389a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800389e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a2:	d101      	bne.n	80038a8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80038a4:	2301      	movs	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	440b      	add	r3, r1
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ce:	e036      	b.n	800393e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d107      	bne.n	80038f0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0a3      	b.n	8003a38 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003900:	d10a      	bne.n	8003918 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800390a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003912:	d101      	bne.n	8003918 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003914:	2301      	movs	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	440b      	add	r3, r1
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d107      	bne.n	8003962 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	0c9b      	lsrs	r3, r3, #18
 8003958:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e005      	b.n	800396e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	3304      	adds	r3, #4
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0e1b      	lsrs	r3, r3, #24
 80039c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0fda      	lsrs	r2, r3, #31
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	3304      	adds	r3, #4
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80039de:	2300      	movs	r3, #0
 80039e0:	623b      	str	r3, [r7, #32]
 80039e2:	e00a      	b.n	80039fa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	441a      	add	r2, r3
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	440b      	add	r3, r1
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	3301      	adds	r3, #1
 80039f8:	623b      	str	r3, [r7, #32]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4a11      	ldr	r2, [pc, #68]	@ (8003a44 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	461a      	mov	r2, r3
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d3ec      	bcc.n	80039e4 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	d105      	bne.n	8003a1c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003a1a:	e004      	b.n	8003a26 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e006      	b.n	8003a38 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f043 0208 	orr.w	r2, r3, #8
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	372c      	adds	r7, #44	@ 0x2c
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	08005edc 	.word	0x08005edc

08003a48 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a5a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d003      	beq.n	8003a6a <HAL_FDCAN_ActivateNotification+0x22>
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	f040 80c8 	bne.w	8003bfa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d03b      	beq.n	8003afe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d031      	beq.n	8003afe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d027      	beq.n	8003afe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01d      	beq.n	8003afe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d013      	beq.n	8003afe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00c      	beq.n	8003b0e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d107      	bne.n	8003b0e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d13b      	bne.n	8003b9a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d131      	bne.n	8003b9a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d127      	bne.n	8003b9a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d11d      	bne.n	8003b9a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d113      	bne.n	8003b9a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0202 	orr.w	r2, r2, #2
 8003ba8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e006      	b.n	8003c08 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfe:	f043 0202 	orr.w	r2, r3, #2
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08c      	sub	sp, #48	@ 0x30
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c22:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c30:	4013      	ands	r3, r2
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c48:	4013      	ands	r3, r2
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c60:	4013      	ands	r3, r2
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003c6e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c76:	6a3a      	ldr	r2, [r7, #32]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c82:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003c86:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d006      	beq.n	8003cca <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2240      	movs	r2, #64	@ 0x40
 8003cc2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f922 	bl	8003f0e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01a      	beq.n	8003d0c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d014      	beq.n	8003d0c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cea:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d02:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003d04:	6939      	ldr	r1, [r7, #16]
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8e2 	bl	8003ed0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d18:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003d1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f8ac 	bl	8003e7a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003d30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fc fc06 	bl	8000544 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d44:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003d46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f8a1 	bl	8003e90 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0a5b      	lsrs	r3, r3, #9
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	0a5b      	lsrs	r3, r3, #9
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f898 	bl	8003ea6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	09db      	lsrs	r3, r3, #7
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d019      	beq.n	8003db6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	09db      	lsrs	r3, r3, #7
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d013      	beq.n	8003db6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003d96:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2280      	movs	r2, #128	@ 0x80
 8003dac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f882 	bl	8003eba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	0b5b      	lsrs	r3, r3, #13
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	0b5b      	lsrs	r3, r3, #13
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dd6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f884 	bl	8003ee6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	0bdb      	lsrs	r3, r3, #15
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00d      	beq.n	8003e06 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	0bdb      	lsrs	r3, r3, #15
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003dfe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f87a 	bl	8003efa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	0b9b      	lsrs	r3, r3, #14
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d010      	beq.n	8003e34 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	0b9b      	lsrs	r3, r3, #14
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003e42:	69f9      	ldr	r1, [r7, #28]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f876 	bl	8003f36 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f858 	bl	8003f22 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003e72:	bf00      	nop
 8003e74:	3730      	adds	r7, #48	@ 0x30
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003f54:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003f56:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f66:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6e:	041a      	lsls	r2, r3, #16
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f8c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	061a      	lsls	r2, r3, #24
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e005      	b.n	8003fda <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3f3      	bcc.n	8003fce <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	4000a400 	.word	0x4000a400

08003ff8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004016:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800401e:	4313      	orrs	r3, r2
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e00a      	b.n	800403a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800402c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004032:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004034:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004038:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004044:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800404a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004050:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	3304      	adds	r3, #4
 8004078:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	3304      	adds	r3, #4
 8004084:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e020      	b.n	80040ce <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3303      	adds	r3, #3
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	3302      	adds	r3, #2
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	440b      	add	r3, r1
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80040a4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	3301      	adds	r3, #1
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	440b      	add	r3, r1
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80040b2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	440a      	add	r2, r1
 80040ba:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80040bc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	3304      	adds	r3, #4
 80040c6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3304      	adds	r3, #4
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4a06      	ldr	r2, [pc, #24]	@ (80040ec <FDCAN_CopyMessageToRAM+0xf4>)
 80040d4:	5cd3      	ldrb	r3, [r2, r3]
 80040d6:	461a      	mov	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4293      	cmp	r3, r2
 80040dc:	d3d6      	bcc.n	800408c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3724      	adds	r7, #36	@ 0x24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	08005edc 	.word	0x08005edc

080040f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040fe:	e15a      	b.n	80043b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	2101      	movs	r1, #1
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	4013      	ands	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 814c 	beq.w	80043b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d005      	beq.n	8004130 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800412c:	2b02      	cmp	r3, #2
 800412e:	d130      	bne.n	8004192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	2203      	movs	r2, #3
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004166:	2201      	movs	r2, #1
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	f003 0201 	and.w	r2, r3, #1
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b03      	cmp	r3, #3
 800419c:	d017      	beq.n	80041ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d123      	bne.n	8004222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	08da      	lsrs	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3208      	adds	r2, #8
 80041e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	220f      	movs	r2, #15
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4013      	ands	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	08da      	lsrs	r2, r3, #3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3208      	adds	r2, #8
 800421c:	6939      	ldr	r1, [r7, #16]
 800421e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	2203      	movs	r2, #3
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 0203 	and.w	r2, r3, #3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80a6 	beq.w	80043b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004264:	4b5b      	ldr	r3, [pc, #364]	@ (80043d4 <HAL_GPIO_Init+0x2e4>)
 8004266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004268:	4a5a      	ldr	r2, [pc, #360]	@ (80043d4 <HAL_GPIO_Init+0x2e4>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004270:	4b58      	ldr	r3, [pc, #352]	@ (80043d4 <HAL_GPIO_Init+0x2e4>)
 8004272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800427c:	4a56      	ldr	r2, [pc, #344]	@ (80043d8 <HAL_GPIO_Init+0x2e8>)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	3302      	adds	r3, #2
 8004284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004288:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	220f      	movs	r2, #15
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042a6:	d01f      	beq.n	80042e8 <HAL_GPIO_Init+0x1f8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a4c      	ldr	r2, [pc, #304]	@ (80043dc <HAL_GPIO_Init+0x2ec>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d019      	beq.n	80042e4 <HAL_GPIO_Init+0x1f4>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a4b      	ldr	r2, [pc, #300]	@ (80043e0 <HAL_GPIO_Init+0x2f0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <HAL_GPIO_Init+0x1f0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a4a      	ldr	r2, [pc, #296]	@ (80043e4 <HAL_GPIO_Init+0x2f4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00d      	beq.n	80042dc <HAL_GPIO_Init+0x1ec>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a49      	ldr	r2, [pc, #292]	@ (80043e8 <HAL_GPIO_Init+0x2f8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d007      	beq.n	80042d8 <HAL_GPIO_Init+0x1e8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a48      	ldr	r2, [pc, #288]	@ (80043ec <HAL_GPIO_Init+0x2fc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d101      	bne.n	80042d4 <HAL_GPIO_Init+0x1e4>
 80042d0:	2305      	movs	r3, #5
 80042d2:	e00a      	b.n	80042ea <HAL_GPIO_Init+0x1fa>
 80042d4:	2306      	movs	r3, #6
 80042d6:	e008      	b.n	80042ea <HAL_GPIO_Init+0x1fa>
 80042d8:	2304      	movs	r3, #4
 80042da:	e006      	b.n	80042ea <HAL_GPIO_Init+0x1fa>
 80042dc:	2303      	movs	r3, #3
 80042de:	e004      	b.n	80042ea <HAL_GPIO_Init+0x1fa>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e002      	b.n	80042ea <HAL_GPIO_Init+0x1fa>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_GPIO_Init+0x1fa>
 80042e8:	2300      	movs	r3, #0
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	f002 0203 	and.w	r2, r2, #3
 80042f0:	0092      	lsls	r2, r2, #2
 80042f2:	4093      	lsls	r3, r2
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042fa:	4937      	ldr	r1, [pc, #220]	@ (80043d8 <HAL_GPIO_Init+0x2e8>)
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	3302      	adds	r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004308:	4b39      	ldr	r3, [pc, #228]	@ (80043f0 <HAL_GPIO_Init+0x300>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	43db      	mvns	r3, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4013      	ands	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800432c:	4a30      	ldr	r2, [pc, #192]	@ (80043f0 <HAL_GPIO_Init+0x300>)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004332:	4b2f      	ldr	r3, [pc, #188]	@ (80043f0 <HAL_GPIO_Init+0x300>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004356:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <HAL_GPIO_Init+0x300>)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800435c:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <HAL_GPIO_Init+0x300>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004380:	4a1b      	ldr	r2, [pc, #108]	@ (80043f0 <HAL_GPIO_Init+0x300>)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004386:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <HAL_GPIO_Init+0x300>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	43db      	mvns	r3, r3
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043aa:	4a11      	ldr	r2, [pc, #68]	@ (80043f0 <HAL_GPIO_Init+0x300>)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3301      	adds	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f ae9d 	bne.w	8004100 <HAL_GPIO_Init+0x10>
  }
}
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40010000 	.word	0x40010000
 80043dc:	48000400 	.word	0x48000400
 80043e0:	48000800 	.word	0x48000800
 80043e4:	48000c00 	.word	0x48000c00
 80043e8:	48001000 	.word	0x48001000
 80043ec:	48001400 	.word	0x48001400
 80043f0:	40010400 	.word	0x40010400

080043f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	807b      	strh	r3, [r7, #2]
 8004400:	4613      	mov	r3, r2
 8004402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004404:	787b      	ldrb	r3, [r7, #1]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800440a:	887a      	ldrh	r2, [r7, #2]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004410:	e002      	b.n	8004418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d141      	bne.n	80044b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004432:	4b4b      	ldr	r3, [pc, #300]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443e:	d131      	bne.n	80044a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004440:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004446:	4a46      	ldr	r2, [pc, #280]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800444c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004450:	4b43      	ldr	r3, [pc, #268]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004458:	4a41      	ldr	r2, [pc, #260]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800445e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004460:	4b40      	ldr	r3, [pc, #256]	@ (8004564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2232      	movs	r2, #50	@ 0x32
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	4a3f      	ldr	r2, [pc, #252]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	0c9b      	lsrs	r3, r3, #18
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004476:	e002      	b.n	800447e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800447e:	4b38      	ldr	r3, [pc, #224]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d102      	bne.n	8004492 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f2      	bne.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004492:	4b33      	ldr	r3, [pc, #204]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d158      	bne.n	8004552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e057      	b.n	8004554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044b4:	e04d      	b.n	8004552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044bc:	d141      	bne.n	8004542 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044be:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ca:	d131      	bne.n	8004530 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044cc:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044d2:	4a23      	ldr	r2, [pc, #140]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044dc:	4b20      	ldr	r3, [pc, #128]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2232      	movs	r2, #50	@ 0x32
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	0c9b      	lsrs	r3, r3, #18
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004502:	e002      	b.n	800450a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3b01      	subs	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800450a:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004516:	d102      	bne.n	800451e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f2      	bne.n	8004504 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800451e:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452a:	d112      	bne.n	8004552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e011      	b.n	8004554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004530:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004536:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004540:	e007      	b.n	8004552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004542:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800454a:	4a05      	ldr	r2, [pc, #20]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004550:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40007000 	.word	0x40007000
 8004564:	20000008 	.word	0x20000008
 8004568:	431bde83 	.word	0x431bde83

0800456c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004570:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a04      	ldr	r2, [pc, #16]	@ (8004588 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800457a:	6093      	str	r3, [r2, #8]
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40007000 	.word	0x40007000

0800458c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e2fe      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d075      	beq.n	8004696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045aa:	4b97      	ldr	r3, [pc, #604]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045b4:	4b94      	ldr	r3, [pc, #592]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b0c      	cmp	r3, #12
 80045c2:	d102      	bne.n	80045ca <HAL_RCC_OscConfig+0x3e>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_OscConfig+0x44>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d10b      	bne.n	80045e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05b      	beq.n	8004694 <HAL_RCC_OscConfig+0x108>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d157      	bne.n	8004694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e2d9      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f0:	d106      	bne.n	8004600 <HAL_RCC_OscConfig+0x74>
 80045f2:	4b85      	ldr	r3, [pc, #532]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a84      	ldr	r2, [pc, #528]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e01d      	b.n	800463c <HAL_RCC_OscConfig+0xb0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x98>
 800460a:	4b7f      	ldr	r3, [pc, #508]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7e      	ldr	r2, [pc, #504]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b7c      	ldr	r3, [pc, #496]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a7b      	ldr	r2, [pc, #492]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0xb0>
 8004624:	4b78      	ldr	r3, [pc, #480]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a77      	ldr	r2, [pc, #476]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 800462a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b75      	ldr	r3, [pc, #468]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a74      	ldr	r2, [pc, #464]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800463a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d013      	beq.n	800466c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fc ff96 	bl	8001574 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fc ff92 	bl	8001574 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e29e      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800465e:	4b6a      	ldr	r3, [pc, #424]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0xc0>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fc ff82 	bl	8001574 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004674:	f7fc ff7e 	bl	8001574 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	@ 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e28a      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004686:	4b60      	ldr	r3, [pc, #384]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0xe8>
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d075      	beq.n	800478e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a2:	4b59      	ldr	r3, [pc, #356]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046ac:	4b56      	ldr	r3, [pc, #344]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d102      	bne.n	80046c2 <HAL_RCC_OscConfig+0x136>
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_OscConfig+0x13c>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d11f      	bne.n	8004708 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <HAL_RCC_OscConfig+0x154>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e25d      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b49      	ldr	r3, [pc, #292]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	061b      	lsls	r3, r3, #24
 80046ee:	4946      	ldr	r1, [pc, #280]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046f4:	4b45      	ldr	r3, [pc, #276]	@ (800480c <HAL_RCC_OscConfig+0x280>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fc feef 	bl	80014dc <HAL_InitTick>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d043      	beq.n	800478c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e249      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d023      	beq.n	8004758 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004710:	4b3d      	ldr	r3, [pc, #244]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a3c      	ldr	r2, [pc, #240]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fc ff2a 	bl	8001574 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004724:	f7fc ff26 	bl	8001574 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e232      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004736:	4b34      	ldr	r3, [pc, #208]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	4b31      	ldr	r3, [pc, #196]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	492d      	ldr	r1, [pc, #180]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
 8004756:	e01a      	b.n	800478e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2a      	ldr	r2, [pc, #168]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 800475e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fc ff06 	bl	8001574 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800476c:	f7fc ff02 	bl	8001574 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e20e      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800477e:	4b22      	ldr	r3, [pc, #136]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x1e0>
 800478a:	e000      	b.n	800478e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d041      	beq.n	800481e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01c      	beq.n	80047dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a2:	4b19      	ldr	r3, [pc, #100]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80047a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047a8:	4a17      	ldr	r2, [pc, #92]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b2:	f7fc fedf 	bl	8001574 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ba:	f7fc fedb 	bl	8001574 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e1e7      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0ef      	beq.n	80047ba <HAL_RCC_OscConfig+0x22e>
 80047da:	e020      	b.n	800481e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e2:	4a09      	ldr	r2, [pc, #36]	@ (8004808 <HAL_RCC_OscConfig+0x27c>)
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fc fec2 	bl	8001574 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047f2:	e00d      	b.n	8004810 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f4:	f7fc febe 	bl	8001574 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d906      	bls.n	8004810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e1ca      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004810:	4b8c      	ldr	r3, [pc, #560]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ea      	bne.n	80047f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80a6 	beq.w	8004978 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482c:	2300      	movs	r3, #0
 800482e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004830:	4b84      	ldr	r3, [pc, #528]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x2b4>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x2b6>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	4b7f      	ldr	r3, [pc, #508]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004850:	6593      	str	r3, [r2, #88]	@ 0x58
 8004852:	4b7c      	ldr	r3, [pc, #496]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800485e:	2301      	movs	r3, #1
 8004860:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004862:	4b79      	ldr	r3, [pc, #484]	@ (8004a48 <HAL_RCC_OscConfig+0x4bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d118      	bne.n	80048a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800486e:	4b76      	ldr	r3, [pc, #472]	@ (8004a48 <HAL_RCC_OscConfig+0x4bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a75      	ldr	r2, [pc, #468]	@ (8004a48 <HAL_RCC_OscConfig+0x4bc>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487a:	f7fc fe7b 	bl	8001574 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004882:	f7fc fe77 	bl	8001574 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e183      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004894:	4b6c      	ldr	r3, [pc, #432]	@ (8004a48 <HAL_RCC_OscConfig+0x4bc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d108      	bne.n	80048ba <HAL_RCC_OscConfig+0x32e>
 80048a8:	4b66      	ldr	r3, [pc, #408]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ae:	4a65      	ldr	r2, [pc, #404]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048b8:	e024      	b.n	8004904 <HAL_RCC_OscConfig+0x378>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d110      	bne.n	80048e4 <HAL_RCC_OscConfig+0x358>
 80048c2:	4b60      	ldr	r3, [pc, #384]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048e2:	e00f      	b.n	8004904 <HAL_RCC_OscConfig+0x378>
 80048e4:	4b57      	ldr	r3, [pc, #348]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ea:	4a56      	ldr	r2, [pc, #344]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048f4:	4b53      	ldr	r3, [pc, #332]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	4a52      	ldr	r2, [pc, #328]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d016      	beq.n	800493a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fc fe32 	bl	8001574 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fc fe2e 	bl	8001574 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e138      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492a:	4b46      	ldr	r3, [pc, #280]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ed      	beq.n	8004914 <HAL_RCC_OscConfig+0x388>
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fc fe1b 	bl	8001574 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc fe17 	bl	8001574 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e121      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004958:	4b3a      	ldr	r3, [pc, #232]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ed      	bne.n	8004942 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004966:	7ffb      	ldrb	r3, [r7, #31]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496c:	4b35      	ldr	r3, [pc, #212]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004970:	4a34      	ldr	r2, [pc, #208]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004976:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d03c      	beq.n	80049fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01c      	beq.n	80049c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800498c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 800498e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004992:	4a2c      	ldr	r2, [pc, #176]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fc fdea 	bl	8001574 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a4:	f7fc fde6 	bl	8001574 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0f2      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049b6:	4b23      	ldr	r3, [pc, #140]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80049b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0ef      	beq.n	80049a4 <HAL_RCC_OscConfig+0x418>
 80049c4:	e01b      	b.n	80049fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80049c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d6:	f7fc fdcd 	bl	8001574 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049de:	f7fc fdc9 	bl	8001574 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0d5      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049f0:	4b14      	ldr	r3, [pc, #80]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 80049f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1ef      	bne.n	80049de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80c9 	beq.w	8004b9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a08:	4b0e      	ldr	r3, [pc, #56]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	f000 8083 	beq.w	8004b1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d15e      	bne.n	8004adc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b09      	ldr	r3, [pc, #36]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a08      	ldr	r2, [pc, #32]	@ (8004a44 <HAL_RCC_OscConfig+0x4b8>)
 8004a24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fc fda3 	bl	8001574 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a30:	e00c      	b.n	8004a4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a32:	f7fc fd9f 	bl	8001574 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d905      	bls.n	8004a4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e0ab      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4c:	4b55      	ldr	r3, [pc, #340]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ec      	bne.n	8004a32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a58:	4b52      	ldr	r3, [pc, #328]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	4b52      	ldr	r3, [pc, #328]	@ (8004ba8 <HAL_RCC_OscConfig+0x61c>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6a11      	ldr	r1, [r2, #32]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0112      	lsls	r2, r2, #4
 8004a6c:	4311      	orrs	r1, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a72:	0212      	lsls	r2, r2, #8
 8004a74:	4311      	orrs	r1, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a7a:	0852      	lsrs	r2, r2, #1
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	0552      	lsls	r2, r2, #21
 8004a80:	4311      	orrs	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a86:	0852      	lsrs	r2, r2, #1
 8004a88:	3a01      	subs	r2, #1
 8004a8a:	0652      	lsls	r2, r2, #25
 8004a8c:	4311      	orrs	r1, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a92:	06d2      	lsls	r2, r2, #27
 8004a94:	430a      	orrs	r2, r1
 8004a96:	4943      	ldr	r1, [pc, #268]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b41      	ldr	r3, [pc, #260]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a40      	ldr	r2, [pc, #256]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a3d      	ldr	r2, [pc, #244]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ab2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc fd5e 	bl	8001574 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fc fd5a 	bl	8001574 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e066      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ace:	4b35      	ldr	r3, [pc, #212]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x530>
 8004ada:	e05e      	b.n	8004b9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	4b31      	ldr	r3, [pc, #196]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a30      	ldr	r2, [pc, #192]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fc fd44 	bl	8001574 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fc fd40 	bl	8001574 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e04c      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b02:	4b28      	ldr	r3, [pc, #160]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004b0e:	4b25      	ldr	r3, [pc, #148]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	4924      	ldr	r1, [pc, #144]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004b14:	4b25      	ldr	r3, [pc, #148]	@ (8004bac <HAL_RCC_OscConfig+0x620>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	60cb      	str	r3, [r1, #12]
 8004b1a:	e03e      	b.n	8004b9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e039      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b28:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba4 <HAL_RCC_OscConfig+0x618>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 0203 	and.w	r2, r3, #3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d12c      	bne.n	8004b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	3b01      	subs	r3, #1
 8004b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d123      	bne.n	8004b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d11b      	bne.n	8004b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d113      	bne.n	8004b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d109      	bne.n	8004b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d001      	beq.n	8004b9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	019f800c 	.word	0x019f800c
 8004bac:	feeefffc 	.word	0xfeeefffc

08004bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e11e      	b.n	8004e06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b91      	ldr	r3, [pc, #580]	@ (8004e10 <HAL_RCC_ClockConfig+0x260>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d910      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b8e      	ldr	r3, [pc, #568]	@ (8004e10 <HAL_RCC_ClockConfig+0x260>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 020f 	bic.w	r2, r3, #15
 8004bde:	498c      	ldr	r1, [pc, #560]	@ (8004e10 <HAL_RCC_ClockConfig+0x260>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b8a      	ldr	r3, [pc, #552]	@ (8004e10 <HAL_RCC_ClockConfig+0x260>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e106      	b.n	8004e06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d073      	beq.n	8004cec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d129      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0c:	4b81      	ldr	r3, [pc, #516]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0f4      	b.n	8004e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c1c:	f000 f99e 	bl	8004f5c <RCC_GetSysClockFreqFromPLLSource>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4a7c      	ldr	r2, [pc, #496]	@ (8004e18 <HAL_RCC_ClockConfig+0x268>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d93f      	bls.n	8004caa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d033      	beq.n	8004caa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d12f      	bne.n	8004caa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c4a:	4b72      	ldr	r3, [pc, #456]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c52:	4a70      	ldr	r2, [pc, #448]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c5a:	2380      	movs	r3, #128	@ 0x80
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	e024      	b.n	8004caa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c68:	4b6a      	ldr	r3, [pc, #424]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0c6      	b.n	8004e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c78:	4b66      	ldr	r3, [pc, #408]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0be      	b.n	8004e06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c88:	f000 f8ce 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8004c8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4a61      	ldr	r2, [pc, #388]	@ (8004e18 <HAL_RCC_ClockConfig+0x268>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d909      	bls.n	8004caa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c96:	4b5f      	ldr	r3, [pc, #380]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004caa:	4b5a      	ldr	r3, [pc, #360]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 0203 	bic.w	r2, r3, #3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4957      	ldr	r1, [pc, #348]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbc:	f7fc fc5a 	bl	8001574 <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fc fc56 	bl	8001574 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e095      	b.n	8004e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	4b4e      	ldr	r3, [pc, #312]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 020c 	and.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1eb      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d023      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d04:	4b43      	ldr	r3, [pc, #268]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a42      	ldr	r2, [pc, #264]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004d0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d24:	4a3b      	ldr	r2, [pc, #236]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004d26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d2c:	4b39      	ldr	r3, [pc, #228]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4936      	ldr	r1, [pc, #216]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b80      	cmp	r3, #128	@ 0x80
 8004d44:	d105      	bne.n	8004d52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d46:	4b33      	ldr	r3, [pc, #204]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	4a32      	ldr	r2, [pc, #200]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004d4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d52:	4b2f      	ldr	r3, [pc, #188]	@ (8004e10 <HAL_RCC_ClockConfig+0x260>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d21d      	bcs.n	8004d9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d60:	4b2b      	ldr	r3, [pc, #172]	@ (8004e10 <HAL_RCC_ClockConfig+0x260>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f023 020f 	bic.w	r2, r3, #15
 8004d68:	4929      	ldr	r1, [pc, #164]	@ (8004e10 <HAL_RCC_ClockConfig+0x260>)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d70:	f7fc fc00 	bl	8001574 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d78:	f7fc fbfc 	bl	8001574 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e03b      	b.n	8004e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8e:	4b20      	ldr	r3, [pc, #128]	@ (8004e10 <HAL_RCC_ClockConfig+0x260>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d1ed      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4917      	ldr	r1, [pc, #92]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc6:	4b13      	ldr	r3, [pc, #76]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	490f      	ldr	r1, [pc, #60]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dda:	f000 f825 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8004dde:	4602      	mov	r2, r0
 8004de0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e14 <HAL_RCC_ClockConfig+0x264>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	490c      	ldr	r1, [pc, #48]	@ (8004e1c <HAL_RCC_ClockConfig+0x26c>)
 8004dec:	5ccb      	ldrb	r3, [r1, r3]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e20 <HAL_RCC_ClockConfig+0x270>)
 8004df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <HAL_RCC_ClockConfig+0x274>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fc fb6c 	bl	80014dc <HAL_InitTick>
 8004e04:	4603      	mov	r3, r0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40022000 	.word	0x40022000
 8004e14:	40021000 	.word	0x40021000
 8004e18:	04c4b400 	.word	0x04c4b400
 8004e1c:	08005ec4 	.word	0x08005ec4
 8004e20:	20000008 	.word	0x20000008
 8004e24:	20000014 	.word	0x20000014

08004e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d102      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	e047      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e40:	4b27      	ldr	r3, [pc, #156]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d102      	bne.n	8004e52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e4c:	4b26      	ldr	r3, [pc, #152]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	e03e      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e52:	4b23      	ldr	r3, [pc, #140]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d136      	bne.n	8004ecc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	3301      	adds	r3, #1
 8004e74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d10c      	bne.n	8004e96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	4a16      	ldr	r2, [pc, #88]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e86:	68d2      	ldr	r2, [r2, #12]
 8004e88:	0a12      	lsrs	r2, r2, #8
 8004e8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	617b      	str	r3, [r7, #20]
      break;
 8004e94:	e00c      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e96:	4a13      	ldr	r2, [pc, #76]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	4a10      	ldr	r2, [pc, #64]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ea0:	68d2      	ldr	r2, [r2, #12]
 8004ea2:	0a12      	lsrs	r2, r2, #8
 8004ea4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
      break;
 8004eae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	0e5b      	lsrs	r3, r3, #25
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	e001      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ed0:	693b      	ldr	r3, [r7, #16]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	007a1200 	.word	0x007a1200

08004eec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	@ (8004f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000008 	.word	0x20000008

08004f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f08:	f7ff fff0 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4904      	ldr	r1, [pc, #16]	@ (8004f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	08005ed4 	.word	0x08005ed4

08004f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f34:	f7ff ffda 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	0adb      	lsrs	r3, r3, #11
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	4904      	ldr	r1, [pc, #16]	@ (8004f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f46:	5ccb      	ldrb	r3, [r1, r3]
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000
 8004f58:	08005ed4 	.word	0x08005ed4

08004f5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f62:	4b1e      	ldr	r3, [pc, #120]	@ (8004fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d10c      	bne.n	8004f9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f80:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	4a14      	ldr	r2, [pc, #80]	@ (8004fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f8a:	68d2      	ldr	r2, [r2, #12]
 8004f8c:	0a12      	lsrs	r2, r2, #8
 8004f8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	617b      	str	r3, [r7, #20]
    break;
 8004f98:	e00c      	b.n	8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f9a:	4a12      	ldr	r2, [pc, #72]	@ (8004fe4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8004fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fa4:	68d2      	ldr	r2, [r2, #12]
 8004fa6:	0a12      	lsrs	r2, r2, #8
 8004fa8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
    break;
 8004fb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fb4:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	0e5b      	lsrs	r3, r3, #25
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004fce:	687b      	ldr	r3, [r7, #4]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	007a1200 	.word	0x007a1200
 8004fe4:	00f42400 	.word	0x00f42400

08004fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8098 	beq.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800500a:	4b43      	ldr	r3, [pc, #268]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800500e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10d      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005016:	4b40      	ldr	r3, [pc, #256]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501a:	4a3f      	ldr	r2, [pc, #252]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005020:	6593      	str	r3, [r2, #88]	@ 0x58
 8005022:	4b3d      	ldr	r3, [pc, #244]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502e:	2301      	movs	r3, #1
 8005030:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005032:	4b3a      	ldr	r3, [pc, #232]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a39      	ldr	r2, [pc, #228]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800503c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800503e:	f7fc fa99 	bl	8001574 <HAL_GetTick>
 8005042:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005044:	e009      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005046:	f7fc fa95 	bl	8001574 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d902      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	74fb      	strb	r3, [r7, #19]
        break;
 8005058:	e005      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505a:	4b30      	ldr	r3, [pc, #192]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0ef      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005066:	7cfb      	ldrb	r3, [r7, #19]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d159      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800506c:	4b2a      	ldr	r3, [pc, #168]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005076:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01e      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	429a      	cmp	r2, r3
 8005086:	d019      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005088:	4b23      	ldr	r3, [pc, #140]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005094:	4b20      	ldr	r3, [pc, #128]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509a:	4a1f      	ldr	r2, [pc, #124]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050b4:	4a18      	ldr	r2, [pc, #96]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d016      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7fc fa55 	bl	8001574 <HAL_GetTick>
 80050ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050cc:	e00b      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ce:	f7fc fa51 	bl	8001574 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050dc:	4293      	cmp	r3, r2
 80050de:	d902      	bls.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	74fb      	strb	r3, [r7, #19]
            break;
 80050e4:	e006      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ec      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050fa:	4b07      	ldr	r3, [pc, #28]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005100:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	4903      	ldr	r1, [pc, #12]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005110:	e008      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005112:	7cfb      	ldrb	r3, [r7, #19]
 8005114:	74bb      	strb	r3, [r7, #18]
 8005116:	e005      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005118:	40021000 	.word	0x40021000
 800511c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005124:	7c7b      	ldrb	r3, [r7, #17]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d105      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512a:	4ba6      	ldr	r3, [pc, #664]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512e:	4aa5      	ldr	r2, [pc, #660]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005134:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005142:	4ba0      	ldr	r3, [pc, #640]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	499c      	ldr	r1, [pc, #624]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005164:	4b97      	ldr	r3, [pc, #604]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516a:	f023 020c 	bic.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4994      	ldr	r1, [pc, #592]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005186:	4b8f      	ldr	r3, [pc, #572]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	498b      	ldr	r1, [pc, #556]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051a8:	4b86      	ldr	r3, [pc, #536]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	4983      	ldr	r1, [pc, #524]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051ca:	4b7e      	ldr	r3, [pc, #504]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	497a      	ldr	r1, [pc, #488]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ec:	4b75      	ldr	r3, [pc, #468]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	4972      	ldr	r1, [pc, #456]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800520e:	4b6d      	ldr	r3, [pc, #436]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005214:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	4969      	ldr	r1, [pc, #420]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005230:	4b64      	ldr	r3, [pc, #400]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005236:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	4961      	ldr	r1, [pc, #388]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005252:	4b5c      	ldr	r3, [pc, #368]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005258:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	4958      	ldr	r1, [pc, #352]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d015      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005274:	4b53      	ldr	r3, [pc, #332]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005282:	4950      	ldr	r1, [pc, #320]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005292:	d105      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005294:	4b4b      	ldr	r3, [pc, #300]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4a4a      	ldr	r2, [pc, #296]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800529e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052ac:	4b45      	ldr	r3, [pc, #276]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	4942      	ldr	r1, [pc, #264]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ca:	d105      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052cc:	4b3d      	ldr	r3, [pc, #244]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4a3c      	ldr	r2, [pc, #240]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d015      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052e4:	4b37      	ldr	r3, [pc, #220]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	4934      	ldr	r1, [pc, #208]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005302:	d105      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005304:	4b2f      	ldr	r3, [pc, #188]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a2e      	ldr	r2, [pc, #184]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800530e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d015      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800531c:	4b29      	ldr	r3, [pc, #164]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005322:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532a:	4926      	ldr	r1, [pc, #152]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800533a:	d105      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800533c:	4b21      	ldr	r3, [pc, #132]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a20      	ldr	r2, [pc, #128]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005346:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005354:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005362:	4918      	ldr	r1, [pc, #96]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005372:	d105      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005374:	4b13      	ldr	r3, [pc, #76]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a12      	ldr	r2, [pc, #72]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800538c:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005392:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539a:	490a      	ldr	r1, [pc, #40]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a04      	ldr	r2, [pc, #16]	@ (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80053b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000

080053c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e042      	b.n	8005460 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f83b 	bl	8005468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2224      	movs	r2, #36	@ 0x24
 80053f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fafe 	bl	8005a14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f82f 	bl	800547c <UART_SetConfig>
 800541e:	4603      	mov	r3, r0
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e01b      	b.n	8005460 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fb7d 	bl	8005b58 <UART_CheckIdleState>
 800545e:	4603      	mov	r3, r0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800547c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005480:	b08c      	sub	sp, #48	@ 0x30
 8005482:	af00      	add	r7, sp, #0
 8005484:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	431a      	orrs	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	431a      	orrs	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4bab      	ldr	r3, [pc, #684]	@ (8005758 <UART_SetConfig+0x2dc>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4aa0      	ldr	r2, [pc, #640]	@ (800575c <UART_SetConfig+0x2e0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e4:	4313      	orrs	r3, r2
 80054e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80054f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	f023 010f 	bic.w	r1, r3, #15
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a91      	ldr	r2, [pc, #580]	@ (8005760 <UART_SetConfig+0x2e4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d125      	bne.n	800556c <UART_SetConfig+0xf0>
 8005520:	4b90      	ldr	r3, [pc, #576]	@ (8005764 <UART_SetConfig+0x2e8>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b03      	cmp	r3, #3
 800552c:	d81a      	bhi.n	8005564 <UART_SetConfig+0xe8>
 800552e:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <UART_SetConfig+0xb8>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005545 	.word	0x08005545
 8005538:	08005555 	.word	0x08005555
 800553c:	0800554d 	.word	0x0800554d
 8005540:	0800555d 	.word	0x0800555d
 8005544:	2301      	movs	r3, #1
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554a:	e0d6      	b.n	80056fa <UART_SetConfig+0x27e>
 800554c:	2302      	movs	r3, #2
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005552:	e0d2      	b.n	80056fa <UART_SetConfig+0x27e>
 8005554:	2304      	movs	r3, #4
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555a:	e0ce      	b.n	80056fa <UART_SetConfig+0x27e>
 800555c:	2308      	movs	r3, #8
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e0ca      	b.n	80056fa <UART_SetConfig+0x27e>
 8005564:	2310      	movs	r3, #16
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556a:	e0c6      	b.n	80056fa <UART_SetConfig+0x27e>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a7d      	ldr	r2, [pc, #500]	@ (8005768 <UART_SetConfig+0x2ec>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d138      	bne.n	80055e8 <UART_SetConfig+0x16c>
 8005576:	4b7b      	ldr	r3, [pc, #492]	@ (8005764 <UART_SetConfig+0x2e8>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557c:	f003 030c 	and.w	r3, r3, #12
 8005580:	2b0c      	cmp	r3, #12
 8005582:	d82d      	bhi.n	80055e0 <UART_SetConfig+0x164>
 8005584:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <UART_SetConfig+0x110>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055c1 	.word	0x080055c1
 8005590:	080055e1 	.word	0x080055e1
 8005594:	080055e1 	.word	0x080055e1
 8005598:	080055e1 	.word	0x080055e1
 800559c:	080055d1 	.word	0x080055d1
 80055a0:	080055e1 	.word	0x080055e1
 80055a4:	080055e1 	.word	0x080055e1
 80055a8:	080055e1 	.word	0x080055e1
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	080055e1 	.word	0x080055e1
 80055b4:	080055e1 	.word	0x080055e1
 80055b8:	080055e1 	.word	0x080055e1
 80055bc:	080055d9 	.word	0x080055d9
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c6:	e098      	b.n	80056fa <UART_SetConfig+0x27e>
 80055c8:	2302      	movs	r3, #2
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ce:	e094      	b.n	80056fa <UART_SetConfig+0x27e>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e090      	b.n	80056fa <UART_SetConfig+0x27e>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055de:	e08c      	b.n	80056fa <UART_SetConfig+0x27e>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	e088      	b.n	80056fa <UART_SetConfig+0x27e>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a5f      	ldr	r2, [pc, #380]	@ (800576c <UART_SetConfig+0x2f0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d125      	bne.n	800563e <UART_SetConfig+0x1c2>
 80055f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005764 <UART_SetConfig+0x2e8>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055fc:	2b30      	cmp	r3, #48	@ 0x30
 80055fe:	d016      	beq.n	800562e <UART_SetConfig+0x1b2>
 8005600:	2b30      	cmp	r3, #48	@ 0x30
 8005602:	d818      	bhi.n	8005636 <UART_SetConfig+0x1ba>
 8005604:	2b20      	cmp	r3, #32
 8005606:	d00a      	beq.n	800561e <UART_SetConfig+0x1a2>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d814      	bhi.n	8005636 <UART_SetConfig+0x1ba>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <UART_SetConfig+0x19a>
 8005610:	2b10      	cmp	r3, #16
 8005612:	d008      	beq.n	8005626 <UART_SetConfig+0x1aa>
 8005614:	e00f      	b.n	8005636 <UART_SetConfig+0x1ba>
 8005616:	2300      	movs	r3, #0
 8005618:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800561c:	e06d      	b.n	80056fa <UART_SetConfig+0x27e>
 800561e:	2302      	movs	r3, #2
 8005620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005624:	e069      	b.n	80056fa <UART_SetConfig+0x27e>
 8005626:	2304      	movs	r3, #4
 8005628:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562c:	e065      	b.n	80056fa <UART_SetConfig+0x27e>
 800562e:	2308      	movs	r3, #8
 8005630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005634:	e061      	b.n	80056fa <UART_SetConfig+0x27e>
 8005636:	2310      	movs	r3, #16
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563c:	e05d      	b.n	80056fa <UART_SetConfig+0x27e>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a4b      	ldr	r2, [pc, #300]	@ (8005770 <UART_SetConfig+0x2f4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d125      	bne.n	8005694 <UART_SetConfig+0x218>
 8005648:	4b46      	ldr	r3, [pc, #280]	@ (8005764 <UART_SetConfig+0x2e8>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005652:	2bc0      	cmp	r3, #192	@ 0xc0
 8005654:	d016      	beq.n	8005684 <UART_SetConfig+0x208>
 8005656:	2bc0      	cmp	r3, #192	@ 0xc0
 8005658:	d818      	bhi.n	800568c <UART_SetConfig+0x210>
 800565a:	2b80      	cmp	r3, #128	@ 0x80
 800565c:	d00a      	beq.n	8005674 <UART_SetConfig+0x1f8>
 800565e:	2b80      	cmp	r3, #128	@ 0x80
 8005660:	d814      	bhi.n	800568c <UART_SetConfig+0x210>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <UART_SetConfig+0x1f0>
 8005666:	2b40      	cmp	r3, #64	@ 0x40
 8005668:	d008      	beq.n	800567c <UART_SetConfig+0x200>
 800566a:	e00f      	b.n	800568c <UART_SetConfig+0x210>
 800566c:	2300      	movs	r3, #0
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005672:	e042      	b.n	80056fa <UART_SetConfig+0x27e>
 8005674:	2302      	movs	r3, #2
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567a:	e03e      	b.n	80056fa <UART_SetConfig+0x27e>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005682:	e03a      	b.n	80056fa <UART_SetConfig+0x27e>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568a:	e036      	b.n	80056fa <UART_SetConfig+0x27e>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005692:	e032      	b.n	80056fa <UART_SetConfig+0x27e>
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a30      	ldr	r2, [pc, #192]	@ (800575c <UART_SetConfig+0x2e0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d12a      	bne.n	80056f4 <UART_SetConfig+0x278>
 800569e:	4b31      	ldr	r3, [pc, #196]	@ (8005764 <UART_SetConfig+0x2e8>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056ac:	d01a      	beq.n	80056e4 <UART_SetConfig+0x268>
 80056ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056b2:	d81b      	bhi.n	80056ec <UART_SetConfig+0x270>
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b8:	d00c      	beq.n	80056d4 <UART_SetConfig+0x258>
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056be:	d815      	bhi.n	80056ec <UART_SetConfig+0x270>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <UART_SetConfig+0x250>
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c8:	d008      	beq.n	80056dc <UART_SetConfig+0x260>
 80056ca:	e00f      	b.n	80056ec <UART_SetConfig+0x270>
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d2:	e012      	b.n	80056fa <UART_SetConfig+0x27e>
 80056d4:	2302      	movs	r3, #2
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056da:	e00e      	b.n	80056fa <UART_SetConfig+0x27e>
 80056dc:	2304      	movs	r3, #4
 80056de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e2:	e00a      	b.n	80056fa <UART_SetConfig+0x27e>
 80056e4:	2308      	movs	r3, #8
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ea:	e006      	b.n	80056fa <UART_SetConfig+0x27e>
 80056ec:	2310      	movs	r3, #16
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	e002      	b.n	80056fa <UART_SetConfig+0x27e>
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a17      	ldr	r2, [pc, #92]	@ (800575c <UART_SetConfig+0x2e0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	f040 80a8 	bne.w	8005856 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800570a:	2b08      	cmp	r3, #8
 800570c:	d834      	bhi.n	8005778 <UART_SetConfig+0x2fc>
 800570e:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <UART_SetConfig+0x298>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005739 	.word	0x08005739
 8005718:	08005779 	.word	0x08005779
 800571c:	08005741 	.word	0x08005741
 8005720:	08005779 	.word	0x08005779
 8005724:	08005747 	.word	0x08005747
 8005728:	08005779 	.word	0x08005779
 800572c:	08005779 	.word	0x08005779
 8005730:	08005779 	.word	0x08005779
 8005734:	0800574f 	.word	0x0800574f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7ff fbe4 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 800573c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800573e:	e021      	b.n	8005784 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005740:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <UART_SetConfig+0x2f8>)
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005744:	e01e      	b.n	8005784 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005746:	f7ff fb6f 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 800574a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800574c:	e01a      	b.n	8005784 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005754:	e016      	b.n	8005784 <UART_SetConfig+0x308>
 8005756:	bf00      	nop
 8005758:	cfff69f3 	.word	0xcfff69f3
 800575c:	40008000 	.word	0x40008000
 8005760:	40013800 	.word	0x40013800
 8005764:	40021000 	.word	0x40021000
 8005768:	40004400 	.word	0x40004400
 800576c:	40004800 	.word	0x40004800
 8005770:	40004c00 	.word	0x40004c00
 8005774:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005782:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 812a 	beq.w	80059e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	4a9e      	ldr	r2, [pc, #632]	@ (8005a0c <UART_SetConfig+0x590>)
 8005792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005796:	461a      	mov	r2, r3
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	fbb3 f3f2 	udiv	r3, r3, r2
 800579e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	4413      	add	r3, r2
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d305      	bcc.n	80057bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d903      	bls.n	80057c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057c2:	e10d      	b.n	80059e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	2200      	movs	r2, #0
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d0:	4a8e      	ldr	r2, [pc, #568]	@ (8005a0c <UART_SetConfig+0x590>)
 80057d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2200      	movs	r2, #0
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057e6:	f7fa fd17 	bl	8000218 <__aeabi_uldivmod>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	020b      	lsls	r3, r1, #8
 80057fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005800:	0202      	lsls	r2, r0, #8
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	6849      	ldr	r1, [r1, #4]
 8005806:	0849      	lsrs	r1, r1, #1
 8005808:	2000      	movs	r0, #0
 800580a:	460c      	mov	r4, r1
 800580c:	4605      	mov	r5, r0
 800580e:	eb12 0804 	adds.w	r8, r2, r4
 8005812:	eb43 0905 	adc.w	r9, r3, r5
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	469a      	mov	sl, r3
 800581e:	4693      	mov	fp, r2
 8005820:	4652      	mov	r2, sl
 8005822:	465b      	mov	r3, fp
 8005824:	4640      	mov	r0, r8
 8005826:	4649      	mov	r1, r9
 8005828:	f7fa fcf6 	bl	8000218 <__aeabi_uldivmod>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4613      	mov	r3, r2
 8005832:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800583a:	d308      	bcc.n	800584e <UART_SetConfig+0x3d2>
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005842:	d204      	bcs.n	800584e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a3a      	ldr	r2, [r7, #32]
 800584a:	60da      	str	r2, [r3, #12]
 800584c:	e0c8      	b.n	80059e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005854:	e0c4      	b.n	80059e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800585e:	d167      	bne.n	8005930 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005860:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005864:	2b08      	cmp	r3, #8
 8005866:	d828      	bhi.n	80058ba <UART_SetConfig+0x43e>
 8005868:	a201      	add	r2, pc, #4	@ (adr r2, 8005870 <UART_SetConfig+0x3f4>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005895 	.word	0x08005895
 8005874:	0800589d 	.word	0x0800589d
 8005878:	080058a5 	.word	0x080058a5
 800587c:	080058bb 	.word	0x080058bb
 8005880:	080058ab 	.word	0x080058ab
 8005884:	080058bb 	.word	0x080058bb
 8005888:	080058bb 	.word	0x080058bb
 800588c:	080058bb 	.word	0x080058bb
 8005890:	080058b3 	.word	0x080058b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005894:	f7ff fb36 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 8005898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800589a:	e014      	b.n	80058c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800589c:	f7ff fb48 	bl	8004f30 <HAL_RCC_GetPCLK2Freq>
 80058a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058a2:	e010      	b.n	80058c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a10 <UART_SetConfig+0x594>)
 80058a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058a8:	e00d      	b.n	80058c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058aa:	f7ff fabd 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 80058ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058b0:	e009      	b.n	80058c6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058b8:	e005      	b.n	80058c6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8089 	beq.w	80059e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	4a4e      	ldr	r2, [pc, #312]	@ (8005a0c <UART_SetConfig+0x590>)
 80058d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d8:	461a      	mov	r2, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e0:	005a      	lsls	r2, r3, #1
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	441a      	add	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	2b0f      	cmp	r3, #15
 80058f8:	d916      	bls.n	8005928 <UART_SetConfig+0x4ac>
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005900:	d212      	bcs.n	8005928 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f023 030f 	bic.w	r3, r3, #15
 800590a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	b29b      	uxth	r3, r3
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	b29a      	uxth	r2, r3
 8005918:	8bfb      	ldrh	r3, [r7, #30]
 800591a:	4313      	orrs	r3, r2
 800591c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	8bfa      	ldrh	r2, [r7, #30]
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	e05b      	b.n	80059e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800592e:	e057      	b.n	80059e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005930:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005934:	2b08      	cmp	r3, #8
 8005936:	d828      	bhi.n	800598a <UART_SetConfig+0x50e>
 8005938:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <UART_SetConfig+0x4c4>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005965 	.word	0x08005965
 8005944:	0800596d 	.word	0x0800596d
 8005948:	08005975 	.word	0x08005975
 800594c:	0800598b 	.word	0x0800598b
 8005950:	0800597b 	.word	0x0800597b
 8005954:	0800598b 	.word	0x0800598b
 8005958:	0800598b 	.word	0x0800598b
 800595c:	0800598b 	.word	0x0800598b
 8005960:	08005983 	.word	0x08005983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005964:	f7ff face 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 8005968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800596a:	e014      	b.n	8005996 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800596c:	f7ff fae0 	bl	8004f30 <HAL_RCC_GetPCLK2Freq>
 8005970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005972:	e010      	b.n	8005996 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005974:	4b26      	ldr	r3, [pc, #152]	@ (8005a10 <UART_SetConfig+0x594>)
 8005976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005978:	e00d      	b.n	8005996 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800597a:	f7ff fa55 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 800597e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005980:	e009      	b.n	8005996 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005988:	e005      	b.n	8005996 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005994:	bf00      	nop
    }

    if (pclk != 0U)
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d021      	beq.n	80059e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	4a1a      	ldr	r2, [pc, #104]	@ (8005a0c <UART_SetConfig+0x590>)
 80059a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a6:	461a      	mov	r2, r3
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	441a      	add	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	2b0f      	cmp	r3, #15
 80059c4:	d909      	bls.n	80059da <UART_SetConfig+0x55e>
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059cc:	d205      	bcs.n	80059da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	e002      	b.n	80059e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2200      	movs	r2, #0
 80059f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2200      	movs	r2, #0
 80059fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3730      	adds	r7, #48	@ 0x30
 8005a04:	46bd      	mov	sp, r7
 8005a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0a:	bf00      	nop
 8005a0c:	08005eec 	.word	0x08005eec
 8005a10:	00f42400 	.word	0x00f42400

08005a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01a      	beq.n	8005b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b12:	d10a      	bne.n	8005b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b098      	sub	sp, #96	@ 0x60
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b68:	f7fb fd04 	bl	8001574 <HAL_GetTick>
 8005b6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d12f      	bne.n	8005bdc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b84:	2200      	movs	r2, #0
 8005b86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f88e 	bl	8005cac <UART_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d022      	beq.n	8005bdc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005baa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e6      	bne.n	8005b96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e063      	b.n	8005ca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d149      	bne.n	8005c7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f857 	bl	8005cac <UART_WaitOnFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03c      	beq.n	8005c7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	623b      	str	r3, [r7, #32]
   return(result);
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c22:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e6      	bne.n	8005c04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3308      	adds	r3, #8
 8005c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c56:	61fa      	str	r2, [r7, #28]
 8005c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	69b9      	ldr	r1, [r7, #24]
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	617b      	str	r3, [r7, #20]
   return(result);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e5      	bne.n	8005c36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e012      	b.n	8005ca4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3758      	adds	r7, #88	@ 0x58
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cbc:	e04f      	b.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d04b      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc6:	f7fb fc55 	bl	8001574 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d302      	bcc.n	8005cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e04e      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d037      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b80      	cmp	r3, #128	@ 0x80
 8005cf2:	d034      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b40      	cmp	r3, #64	@ 0x40
 8005cf8:	d031      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d110      	bne.n	8005d2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f838 	bl	8005d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e029      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d38:	d111      	bne.n	8005d5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f81e 	bl	8005d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e00f      	b.n	8005d7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69da      	ldr	r2, [r3, #28]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4013      	ands	r3, r2
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d0a0      	beq.n	8005cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b095      	sub	sp, #84	@ 0x54
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e3      	bne.n	8005dc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d118      	bne.n	8005e32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f023 0310 	bic.w	r3, r3, #16
 8005e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6979      	ldr	r1, [r7, #20]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e6      	bne.n	8005e00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e46:	bf00      	nop
 8005e48:	3754      	adds	r7, #84	@ 0x54
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <memset>:
 8005e52:	4402      	add	r2, r0
 8005e54:	4603      	mov	r3, r0
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d100      	bne.n	8005e5c <memset+0xa>
 8005e5a:	4770      	bx	lr
 8005e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e60:	e7f9      	b.n	8005e56 <memset+0x4>
	...

08005e64 <__libc_init_array>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4d0d      	ldr	r5, [pc, #52]	@ (8005e9c <__libc_init_array+0x38>)
 8005e68:	4c0d      	ldr	r4, [pc, #52]	@ (8005ea0 <__libc_init_array+0x3c>)
 8005e6a:	1b64      	subs	r4, r4, r5
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	2600      	movs	r6, #0
 8005e70:	42a6      	cmp	r6, r4
 8005e72:	d109      	bne.n	8005e88 <__libc_init_array+0x24>
 8005e74:	4d0b      	ldr	r5, [pc, #44]	@ (8005ea4 <__libc_init_array+0x40>)
 8005e76:	4c0c      	ldr	r4, [pc, #48]	@ (8005ea8 <__libc_init_array+0x44>)
 8005e78:	f000 f818 	bl	8005eac <_init>
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	2600      	movs	r6, #0
 8005e82:	42a6      	cmp	r6, r4
 8005e84:	d105      	bne.n	8005e92 <__libc_init_array+0x2e>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8c:	4798      	blx	r3
 8005e8e:	3601      	adds	r6, #1
 8005e90:	e7ee      	b.n	8005e70 <__libc_init_array+0xc>
 8005e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e96:	4798      	blx	r3
 8005e98:	3601      	adds	r6, #1
 8005e9a:	e7f2      	b.n	8005e82 <__libc_init_array+0x1e>
 8005e9c:	08005f0c 	.word	0x08005f0c
 8005ea0:	08005f0c 	.word	0x08005f0c
 8005ea4:	08005f0c 	.word	0x08005f0c
 8005ea8:	08005f10 	.word	0x08005f10

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
