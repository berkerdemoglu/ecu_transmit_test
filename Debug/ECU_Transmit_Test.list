
ECU_Transmit_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003744  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800391c  0800391c  0000491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003964  08003964  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003964  08003964  00004964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003968  08003968  00004968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800396c  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000020  08003988  00005020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003988  00005178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e274  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbb  00000000  00000000  000132c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00015080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ed  00000000  00000000  00015c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8eb  00000000  00000000  00016515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1f9  00000000  00000000  00033e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc226  00000000  00000000  00040ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd21f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000302c  00000000  00000000  000fd264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00100290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003904 	.word	0x08003904

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08003904 	.word	0x08003904

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <send_CAN_message>:

void convert_float_display(can_message_four* msg_in, can_message_four* msg_out, int decimal_points) {
    msg_out->sensor_int = (uint32_t) (msg_in->sensor_float * decimal_points);
}

void send_CAN_message(uint16_t address, can_message_eight* msg) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	80fb      	strh	r3, [r7, #6]
    // Update ID of the transmit header
    txHeader.Identifier = address;
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <send_CAN_message+0x3c>)
 8000554:	6013      	str	r3, [r2, #0]

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);  // Toggle LED
 8000556:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <send_CAN_message+0x40>)
 800055c:	f001 fc74 	bl	8001e48 <HAL_GPIO_TogglePin>

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, msg->bytes) != HAL_OK) {
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	4906      	ldr	r1, [pc, #24]	@ (8000580 <send_CAN_message+0x3c>)
 8000566:	4808      	ldr	r0, [pc, #32]	@ (8000588 <send_CAN_message+0x44>)
 8000568:	f000 ff30 	bl	80013cc <HAL_FDCAN_AddMessageToTxFifoQ>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <send_CAN_message+0x32>
        Error_Handler();
 8000572:	f000 fa21 	bl	80009b8 <Error_Handler>
    }
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000b0 	.word	0x200000b0
 8000584:	48000400 	.word	0x48000400
 8000588:	2000004c 	.word	0x2000004c

0800058c <send_turn_on_message>:

void send_turn_on_message(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	send_CAN_message(0x201, &turnOnData);
 8000590:	4903      	ldr	r1, [pc, #12]	@ (80005a0 <send_turn_on_message+0x14>)
 8000592:	f240 2001 	movw	r0, #513	@ 0x201
 8000596:	f7ff ffd5 	bl	8000544 <send_CAN_message>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fbeb 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f905 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f9b3 	bl	800091c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005b6:	f000 f94d 	bl	8000854 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // Start FDCAN1
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80005ba:	487b      	ldr	r0, [pc, #492]	@ (80007a8 <main+0x204>)
 80005bc:	f000 fede 	bl	800137c <HAL_FDCAN_Start>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x26>
    {
      Error_Handler();
 80005c6:	f000 f9f7 	bl	80009b8 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80005ca:	2200      	movs	r2, #0
 80005cc:	2101      	movs	r1, #1
 80005ce:	4876      	ldr	r0, [pc, #472]	@ (80007a8 <main+0x204>)
 80005d0:	f000 ff40 	bl	8001454 <HAL_FDCAN_ActivateNotification>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <main+0x3a>
    {
      /* Notification Error */
      Error_Handler();
 80005da:	f000 f9ed 	bl	80009b8 <Error_Handler>
    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 faec 	bl	8000bbc <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005e4:	4b71      	ldr	r3, [pc, #452]	@ (80007ac <main+0x208>)
 80005e6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005ea:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005ec:	4b6f      	ldr	r3, [pc, #444]	@ (80007ac <main+0x208>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005f2:	4b6e      	ldr	r3, [pc, #440]	@ (80007ac <main+0x208>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005f8:	4b6c      	ldr	r3, [pc, #432]	@ (80007ac <main+0x208>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005fe:	4b6b      	ldr	r3, [pc, #428]	@ (80007ac <main+0x208>)
 8000600:	2200      	movs	r2, #0
 8000602:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000604:	4969      	ldr	r1, [pc, #420]	@ (80007ac <main+0x208>)
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fb0e 	bl	8000c28 <BSP_COM_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <main+0x72>
  {
    Error_Handler();
 8000612:	f000 f9d1 	bl	80009b8 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int time_sum = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
//		 HAL_Delay(50);
//	 }
//  	  time_sum = 0; // reset timer

	 // send a logic one for 5 seconds to turn on the Inverter
	  time_sum = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
	 while (time_sum < 5000) {
 800061e:	e011      	b.n	8000644 <main+0xa0>
  		 txData.sensor_int = 0x0101010101010101;
 8000620:	4963      	ldr	r1, [pc, #396]	@ (80007b0 <main+0x20c>)
 8000622:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8000626:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800062a:	e9c1 2300 	strd	r2, r3, [r1]
		 send_CAN_message(0x201, &txData);
 800062e:	4960      	ldr	r1, [pc, #384]	@ (80007b0 <main+0x20c>)
 8000630:	f240 2001 	movw	r0, #513	@ 0x201
 8000634:	f7ff ff86 	bl	8000544 <send_CAN_message>

		 // CAN messages at 50 ms interval
		 time_sum += 50;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3332      	adds	r3, #50	@ 0x32
 800063c:	607b      	str	r3, [r7, #4]
		 HAL_Delay(50);
 800063e:	2032      	movs	r0, #50	@ 0x32
 8000640:	f000 fc10 	bl	8000e64 <HAL_Delay>
	 while (time_sum < 5000) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f241 3287 	movw	r2, #4999	@ 0x1387
 800064a:	4293      	cmp	r3, r2
 800064c:	dde8      	ble.n	8000620 <main+0x7c>
	 }
	 time_sum = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
  	 // after the 5 sec transmission
  	 // send the usual code (the one who turns the machine from 0 to 100 RPM)
     txData.sensor_int = 0;  // reset txData
 8000652:	4957      	ldr	r1, [pc, #348]	@ (80007b0 <main+0x20c>)
 8000654:	f04f 0200 	mov.w	r2, #0
 8000658:	f04f 0300 	mov.w	r3, #0
 800065c:	e9c1 2300 	strd	r2, r3, [r1]
	 time_sum = 0;  // reset timer
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
	 int ctr = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
	 while (ctr < 5) {
 8000668:	e030      	b.n	80006cc <main+0x128>
		 txData.second.sensor_float = 10 * (ctr++);
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	1c53      	adds	r3, r2, #1
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000680:	4b4b      	ldr	r3, [pc, #300]	@ (80007b0 <main+0x20c>)
 8000682:	edc3 7a01 	vstr	s15, [r3, #4]

		 // if statement for thomas
		 if (txData.second.sensor_float > 100) {  // do not send dangerous values!
 8000686:	4b4a      	ldr	r3, [pc, #296]	@ (80007b0 <main+0x20c>)
 8000688:	edd3 7a01 	vldr	s15, [r3, #4]
 800068c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80007b4 <main+0x210>
 8000690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000698:	dd03      	ble.n	80006a2 <main+0xfe>
			txData.second.sensor_float = 1;
 800069a:	4b45      	ldr	r3, [pc, #276]	@ (80007b0 <main+0x20c>)
 800069c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80006a0:	605a      	str	r2, [r3, #4]
		 }
		 time_sum = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
		 while (time_sum < 750) {  // send the same message for 3s
 80006a6:	e00c      	b.n	80006c2 <main+0x11e>
			  send_CAN_message(0x301, &txData);  // send torque reference
 80006a8:	4941      	ldr	r1, [pc, #260]	@ (80007b0 <main+0x20c>)
 80006aa:	f240 3001 	movw	r0, #769	@ 0x301
 80006ae:	f7ff ff49 	bl	8000544 <send_CAN_message>
			  send_turn_on_message();
 80006b2:	f7ff ff6b 	bl	800058c <send_turn_on_message>
			  time_sum += 50;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3332      	adds	r3, #50	@ 0x32
 80006ba:	607b      	str	r3, [r7, #4]
			  HAL_Delay(50);
 80006bc:	2032      	movs	r0, #50	@ 0x32
 80006be:	f000 fbd1 	bl	8000e64 <HAL_Delay>
		 while (time_sum < 750) {  // send the same message for 3s
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80006c8:	4293      	cmp	r3, r2
 80006ca:	dded      	ble.n	80006a8 <main+0x104>
	 while (ctr < 5) {
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	ddcb      	ble.n	800066a <main+0xc6>
		 }
	 }

	 txData.sensor_int = 0;
 80006d2:	4937      	ldr	r1, [pc, #220]	@ (80007b0 <main+0x20c>)
 80006d4:	f04f 0200 	mov.w	r2, #0
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	e9c1 2300 	strd	r2, r3, [r1]
	 time_sum = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
	 ctr = 5;
 80006e4:	2305      	movs	r3, #5
 80006e6:	603b      	str	r3, [r7, #0]
	 while (ctr >= 0) {
 80006e8:	e038      	b.n	800075c <main+0x1b8>
		 txData.second.sensor_float = 10 * (ctr--);
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	1e53      	subs	r3, r2, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000700:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <main+0x20c>)
 8000702:	edc3 7a01 	vstr	s15, [r3, #4]

		 // if statement for thomas
		 if (txData.second.sensor_float > 100 || txData.second.sensor_float < 0) {  // do not send dangerous values!
 8000706:	4b2a      	ldr	r3, [pc, #168]	@ (80007b0 <main+0x20c>)
 8000708:	edd3 7a01 	vldr	s15, [r3, #4]
 800070c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80007b4 <main+0x210>
 8000710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000718:	dc07      	bgt.n	800072a <main+0x186>
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <main+0x20c>)
 800071c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000728:	d503      	bpl.n	8000732 <main+0x18e>
			txData.second.sensor_float = 1;
 800072a:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <main+0x20c>)
 800072c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000730:	605a      	str	r2, [r3, #4]
		 }
		 time_sum = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
		 while (time_sum < 750) {  // send the same message for 3s
 8000736:	e00c      	b.n	8000752 <main+0x1ae>
			  send_CAN_message(0x301, &txData);  // send torque reference
 8000738:	491d      	ldr	r1, [pc, #116]	@ (80007b0 <main+0x20c>)
 800073a:	f240 3001 	movw	r0, #769	@ 0x301
 800073e:	f7ff ff01 	bl	8000544 <send_CAN_message>
			  send_turn_on_message();
 8000742:	f7ff ff23 	bl	800058c <send_turn_on_message>
			  time_sum += 50;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3332      	adds	r3, #50	@ 0x32
 800074a:	607b      	str	r3, [r7, #4]
			  HAL_Delay(50);
 800074c:	2032      	movs	r0, #50	@ 0x32
 800074e:	f000 fb89 	bl	8000e64 <HAL_Delay>
		 while (time_sum < 750) {  // send the same message for 3s
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8000758:	4293      	cmp	r3, r2
 800075a:	dded      	ble.n	8000738 <main+0x194>
	 while (ctr >= 0) {
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	dac3      	bge.n	80006ea <main+0x146>
		 }
	 }

	 for (;;) {
		 txData.second.sensor_float = 20.0;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <main+0x20c>)
 8000764:	4a14      	ldr	r2, [pc, #80]	@ (80007b8 <main+0x214>)
 8000766:	605a      	str	r2, [r3, #4]
		 if (txData.second.sensor_float > 100 || txData.second.sensor_float < 0) {  // do not send dangerous values!
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <main+0x20c>)
 800076a:	edd3 7a01 	vldr	s15, [r3, #4]
 800076e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80007b4 <main+0x210>
 8000772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	dc07      	bgt.n	800078c <main+0x1e8>
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <main+0x20c>)
 800077e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	d503      	bpl.n	8000794 <main+0x1f0>
			 txData.second.sensor_float = 1;
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <main+0x20c>)
 800078e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000792:	605a      	str	r2, [r3, #4]
		 }
		 send_CAN_message(0x301, &txData);  // send torque reference
 8000794:	4906      	ldr	r1, [pc, #24]	@ (80007b0 <main+0x20c>)
 8000796:	f240 3001 	movw	r0, #769	@ 0x301
 800079a:	f7ff fed3 	bl	8000544 <send_CAN_message>
		 HAL_Delay(50);
 800079e:	2032      	movs	r0, #50	@ 0x32
 80007a0:	f000 fb60 	bl	8000e64 <HAL_Delay>
		 txData.second.sensor_float = 20.0;
 80007a4:	e7dd      	b.n	8000762 <main+0x1be>
 80007a6:	bf00      	nop
 80007a8:	2000004c 	.word	0x2000004c
 80007ac:	2000003c 	.word	0x2000003c
 80007b0:	200000d8 	.word	0x200000d8
 80007b4:	42c80000 	.word	0x42c80000
 80007b8:	41a00000 	.word	0x41a00000

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	@ 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2238      	movs	r2, #56	@ 0x38
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 f86d 	bl	80038aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007e2:	f001 fb4b 	bl	8001e7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fbe5 	bl	8001fe4 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000820:	f000 f8ca 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2303      	movs	r3, #3
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f001 fee3 	bl	8002608 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000848:	f000 f8b6 	bl	80009b8 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	@ 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000858:	4b2d      	ldr	r3, [pc, #180]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 800085a:	4a2e      	ldr	r2, [pc, #184]	@ (8000914 <MX_FDCAN1_Init+0xc0>)
 800085c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 8000872:	2200      	movs	r2, #0
 8000874:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 8000878:	2200      	movs	r2, #0
 800087a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 800087e:	2200      	movs	r2, #0
 8000880:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 8000884:	2208      	movs	r2, #8
 8000886:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 8000890:	220d      	movs	r2, #13
 8000892:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000894:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 8000896:	2202      	movs	r2, #2
 8000898:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 800089c:	2201      	movs	r2, #1
 800089e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008c4:	4812      	ldr	r0, [pc, #72]	@ (8000910 <MX_FDCAN1_Init+0xbc>)
 80008c6:	f000 fbff 	bl	80010c8 <HAL_FDCAN_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008d0:	f000 f872 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  txHeader.Identifier = 0x301;  // no need to init address yet
 80008d4:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 80008d6:	f240 3201 	movw	r2, #769	@ 0x301
 80008da:	601a      	str	r2, [r3, #0]
    txHeader.IdType = FDCAN_STANDARD_ID;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    txHeader.DataLength = FDCAN_DLC_BYTES_8;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	60da      	str	r2, [r3, #12]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008fa:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
    txHeader.MessageMarker = 0;
 8000906:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <MX_FDCAN1_Init+0xc4>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000004c 	.word	0x2000004c
 8000914:	40006400 	.word	0x40006400
 8000918:	200000b0 	.word	0x200000b0

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
      /* USER CODE BEGIN MX_GPIO_Init_1 */

      /* USER CODE END MX_GPIO_Init_1 */

      /* GPIO Ports Clock Enable */
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_GPIO_Init+0x94>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a1e      	ldr	r2, [pc, #120]	@ (80009b0 <MX_GPIO_Init+0x94>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_GPIO_Init+0x94>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_GPIO_Init+0x94>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4a18      	ldr	r2, [pc, #96]	@ (80009b0 <MX_GPIO_Init+0x94>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_GPIO_Init+0x94>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

      /*Configure GPIO pin Output Level */
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000968:	4812      	ldr	r0, [pc, #72]	@ (80009b4 <MX_GPIO_Init+0x98>)
 800096a:	f001 fa55 	bl	8001e18 <HAL_GPIO_WritePin>

      /*Configure GPIO pin : PB3 */
      GPIO_InitStruct.Pin = GPIO_PIN_3;
 800096e:	2308      	movs	r3, #8
 8000970:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000976:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <MX_GPIO_Init+0x98>)
 8000984:	f001 f8c6 	bl	8001b14 <HAL_GPIO_Init>

      /*Configure GPIO pin : PB8 */
      GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_GPIO_Init+0x98>)
 80009a2:	f001 f8b7 	bl	8001b14 <HAL_GPIO_Init>

      /* USER CODE BEGIN MX_GPIO_Init_2 */

      /* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000400 	.word	0x48000400

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000a08 <HAL_MspInit+0x44>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_MspInit+0x44>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009fa:	f001 fae3 	bl	8001fc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09a      	sub	sp, #104	@ 0x68
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2244      	movs	r2, #68	@ 0x44
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 ff3c 	bl	80038aa <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a24      	ldr	r2, [pc, #144]	@ (8000ac8 <HAL_FDCAN_MspInit+0xbc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d141      	bne.n	8000ac0 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fff7 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a58:	f7ff ffae 	bl	80009b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <HAL_FDCAN_MspInit+0xc0>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a60:	4a1a      	ldr	r2, [pc, #104]	@ (8000acc <HAL_FDCAN_MspInit+0xc0>)
 8000a62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <HAL_FDCAN_MspInit+0xc0>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_FDCAN_MspInit+0xc0>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <HAL_FDCAN_MspInit+0xc0>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_FDCAN_MspInit+0xc0>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a90:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aac:	f001 f832 	bl	8001b14 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2015      	movs	r0, #21
 8000ab6:	f000 fad2 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aba:	2015      	movs	r0, #21
 8000abc:	f000 fae9 	bl	8001092 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3768      	adds	r7, #104	@ 0x68
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40006400 	.word	0x40006400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f97f 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <FDCAN1_IT0_IRQHandler+0x10>)
 8000b36:	f000 fd73 	bl	8001620 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000004c 	.word	0x2000004c

08000b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b68:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 fe91 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9a:	f7ff fd03 	bl	80005a4 <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
  ldr   r0, =_estack
 8000ba0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000bac:	0800396c 	.word	0x0800396c
  ldr r2, =_sbss
 8000bb0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000bb4:	20000178 	.word	0x20000178

08000bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>
	...

08000bbc <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <BSP_LED_Init+0x64>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <BSP_LED_Init+0x64>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <BSP_LED_Init+0x64>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000bde:	2320      	movs	r3, #32
 8000be0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <BSP_LED_Init+0x68>)
 8000bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf6:	f107 020c 	add.w	r2, r7, #12
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 ff89 	bl	8001b14 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <BSP_LED_Init+0x68>)
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f902 	bl	8001e18 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	2000000c 	.word	0x2000000c

08000c28 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d903      	bls.n	8000c46 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c3e:	f06f 0301 	mvn.w	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e018      	b.n	8000c78 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2294      	movs	r2, #148	@ 0x94
 8000c4a:	fb02 f303 	mul.w	r3, r2, r3
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <BSP_COM_Init+0x5c>)
 8000c50:	4413      	add	r3, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f84a 	bl	8000cec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2294      	movs	r2, #148	@ 0x94
 8000c5c:	fb02 f303 	mul.w	r3, r2, r3
 8000c60:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <BSP_COM_Init+0x5c>)
 8000c62:	4413      	add	r3, r2
 8000c64:	6839      	ldr	r1, [r7, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f80e 	bl	8000c88 <MX_LPUART1_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000c72:	f06f 0303 	mvn.w	r3, #3
 8000c76:	e000      	b.n	8000c7a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000c78:	68fb      	ldr	r3, [r7, #12]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000e0 	.word	0x200000e0

08000c88 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_LPUART1_Init+0x60>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	220c      	movs	r2, #12
 8000ca6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	895b      	ldrh	r3, [r3, #10]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	891b      	ldrh	r3, [r3, #8]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	899b      	ldrh	r3, [r3, #12]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cd4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f002 f8a2 	bl	8002e20 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000010 	.word	0x20000010

08000cec <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000cf4:	4b22      	ldr	r3, [pc, #136]	@ (8000d80 <COM1_MspInit+0x94>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf8:	4a21      	ldr	r2, [pc, #132]	@ (8000d80 <COM1_MspInit+0x94>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d00:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <COM1_MspInit+0x94>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <COM1_MspInit+0x94>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d10:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <COM1_MspInit+0x94>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <COM1_MspInit+0x94>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d24:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <COM1_MspInit+0x94>)
 8000d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d28:	4a15      	ldr	r2, [pc, #84]	@ (8000d80 <COM1_MspInit+0x94>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <COM1_MspInit+0x94>)
 8000d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2302      	movs	r3, #2
 8000d46:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5a:	f000 fedb 	bl	8001b14 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000d66:	230c      	movs	r3, #12
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f000 fece 	bl	8001b14 <HAL_GPIO_Init>
}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	@ 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f000 f95a 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f80d 	bl	8000db4 <HAL_InitTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	e001      	b.n	8000daa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da6:	f7ff fe0d 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000daa:	79fb      	ldrb	r3, [r7, #7]

}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <HAL_InitTick+0x68>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d022      	beq.n	8000e0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_InitTick+0x6c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <HAL_InitTick+0x68>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f966 	bl	80010ae <HAL_SYSTICK_Config>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10f      	bne.n	8000e08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	d809      	bhi.n	8000e02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dee:	2200      	movs	r2, #0
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	f04f 30ff 	mov.w	r0, #4294967295
 8000df6:	f000 f932 	bl	800105e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_InitTick+0x70>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e007      	b.n	8000e12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e004      	b.n	8000e12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	e001      	b.n	8000e12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000018 	.word	0x20000018
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000014 	.word	0x20000014

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a03      	ldr	r2, [pc, #12]	@ (8000e44 <HAL_IncTick+0x1c>)
 8000e38:	6013      	str	r3, [r2, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000174 	.word	0x20000174
 8000e48:	20000018 	.word	0x20000018

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000174 	.word	0x20000174

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d004      	beq.n	8000e88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <HAL_Delay+0x40>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4413      	add	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e88:	bf00      	nop
 8000e8a:	f7ff ffdf 	bl	8000e4c <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d8f7      	bhi.n	8000e8a <HAL_Delay+0x26>
  {
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000018 	.word	0x20000018

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff29 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800106c:	f7ff ff40 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff90 	bl	8000f9c <NVIC_EncodePriority>
 800107c:	4602      	mov	r2, r0
 800107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff5f 	bl	8000f48 <__NVIC_SetPriority>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff33 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffa4 	bl	8001004 <SysTick_Config>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e147      	b.n	800136a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fc8c 	bl	8000a0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	699a      	ldr	r2, [r3, #24]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0210 	bic.w	r2, r2, #16
 8001102:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff fea2 	bl	8000e4c <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800110a:	e012      	b.n	8001132 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800110c:	f7ff fe9e 	bl	8000e4c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e11b      	b.n	800136a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b08      	cmp	r3, #8
 800113e:	d0e5      	beq.n	800110c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	699a      	ldr	r2, [r3, #24]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001150:	f7ff fe7c 	bl	8000e4c <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001156:	e012      	b.n	800117e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001158:	f7ff fe78 	bl	8000e4c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b0a      	cmp	r3, #10
 8001164:	d90b      	bls.n	800117e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116a:	f043 0201 	orr.w	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2203      	movs	r2, #3
 8001176:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0f5      	b.n	800136a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0e5      	beq.n	8001158 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0202 	orr.w	r2, r2, #2
 800119a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a74      	ldr	r2, [pc, #464]	@ (8001374 <HAL_FDCAN_Init+0x2ac>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d103      	bne.n	80011ae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011a6:	4a74      	ldr	r2, [pc, #464]	@ (8001378 <HAL_FDCAN_Init+0x2b0>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7c1b      	ldrb	r3, [r3, #16]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d108      	bne.n	80011c8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	e007      	b.n	80011d8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7c5b      	ldrb	r3, [r3, #17]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d108      	bne.n	80011f2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	e007      	b.n	8001202 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699a      	ldr	r2, [r3, #24]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001200:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7c9b      	ldrb	r3, [r3, #18]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d108      	bne.n	800121c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	699a      	ldr	r2, [r3, #24]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	e007      	b.n	800122c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800122a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001250:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0210 	bic.w	r2, r2, #16
 8001260:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d108      	bne.n	800127c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699a      	ldr	r2, [r3, #24]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0204 	orr.w	r2, r2, #4
 8001278:	619a      	str	r2, [r3, #24]
 800127a:	e02c      	b.n	80012d6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d028      	beq.n	80012d6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d01c      	beq.n	80012c6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800129a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0210 	orr.w	r2, r2, #16
 80012aa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d110      	bne.n	80012d6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	699a      	ldr	r2, [r3, #24]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0220 	orr.w	r2, r2, #32
 80012c2:	619a      	str	r2, [r3, #24]
 80012c4:	e007      	b.n	80012d6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699a      	ldr	r2, [r3, #24]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0220 	orr.w	r2, r2, #32
 80012d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	3b01      	subs	r3, #1
 80012dc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012e6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012ee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012fe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001300:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800130a:	d115      	bne.n	8001338 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001310:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001316:	3b01      	subs	r3, #1
 8001318:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800131a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	3b01      	subs	r3, #1
 8001322:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001324:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	3b01      	subs	r3, #1
 800132e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001334:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001336:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fb0e 	bl	8001970 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40006400 	.word	0x40006400
 8001378:	40006500 	.word	0x40006500

0800137c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b01      	cmp	r3, #1
 800138e:	d110      	bne.n	80013b2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2202      	movs	r2, #2
 8001394:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e006      	b.n	80013c0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b6:	f043 0204 	orr.w	r2, r3, #4
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d12c      	bne.n	800143e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e023      	b.n	800144c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fafe 	bl	8001a1c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001430:	2201      	movs	r2, #1
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	409a      	lsls	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e006      	b.n	800144c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	f043 0208 	orr.w	r2, r3, #8
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001466:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d003      	beq.n	8001476 <HAL_FDCAN_ActivateNotification+0x22>
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b02      	cmp	r3, #2
 8001472:	f040 80c8 	bne.w	8001606 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d03b      	beq.n	800150a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d031      	beq.n	800150a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d027      	beq.n	800150a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01d      	beq.n	800150a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d013      	beq.n	800150a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00c      	beq.n	800151a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d13b      	bne.n	80015a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d131      	bne.n	80015a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d127      	bne.n	80015a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11d      	bne.n	80015a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	d113      	bne.n	80015a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00c      	beq.n	80015b6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0202 	orr.w	r2, r2, #2
 80015b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	430a      	orrs	r2, r1
 8001600:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e006      	b.n	8001614 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160a:	f043 0202 	orr.w	r2, r3, #2
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	@ 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800162e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800163c:	4013      	ands	r3, r2
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001654:	4013      	ands	r3, r2
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800165e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166c:	4013      	ands	r3, r2
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001676:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800167a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001682:	6a3a      	ldr	r2, [r7, #32]
 8001684:	4013      	ands	r3, r2
 8001686:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800168e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001692:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4013      	ands	r3, r2
 800169e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ae:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	099b      	lsrs	r3, r3, #6
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00c      	beq.n	80016d6 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2240      	movs	r2, #64	@ 0x40
 80016ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f92d 	bl	8001930 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01a      	beq.n	8001718 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d014      	beq.n	8001718 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016f6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001710:	6939      	ldr	r1, [r7, #16]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8ed 	bl	80018f2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001724:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f8ac 	bl	8001886 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800173a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800173c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f8ac 	bl	800189c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001750:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001752:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f8ac 	bl	80018b2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	0a5b      	lsrs	r3, r3, #9
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00d      	beq.n	8001782 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	0a5b      	lsrs	r3, r3, #9
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f8a3 	bl	80018c8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	09db      	lsrs	r3, r3, #7
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d019      	beq.n	80017c2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	09db      	lsrs	r3, r3, #7
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d013      	beq.n	80017c2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017a2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4013      	ands	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2280      	movs	r2, #128	@ 0x80
 80017b8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80017ba:	68f9      	ldr	r1, [r7, #12]
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f88d 	bl	80018dc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	0b5b      	lsrs	r3, r3, #13
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	0b5b      	lsrs	r3, r3, #13
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f88f 	bl	8001908 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	0bdb      	lsrs	r3, r3, #15
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00d      	beq.n	8001812 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	0bdb      	lsrs	r3, r3, #15
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800180a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f885 	bl	800191c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	0b9b      	lsrs	r3, r3, #14
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d010      	beq.n	8001840 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	0b9b      	lsrs	r3, r3, #14
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00a      	beq.n	8001840 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001832:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001838:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800184e:	69f9      	ldr	r1, [r7, #28]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f881 	bl	8001958 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a3a      	ldr	r2, [r7, #32]
 8001862:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f863 	bl	8001944 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800187e:	bf00      	nop
 8001880:	3730      	adds	r7, #48	@ 0x30
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800197a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800198a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001992:	041a      	lsls	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019b0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b8:	061a      	lsls	r2, r3, #24
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e005      	b.n	80019fe <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3304      	adds	r3, #4
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3f3      	bcc.n	80019f2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	4000a400 	.word	0x4000a400

08001a1c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10a      	bne.n	8001a48 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001a3a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e00a      	b.n	8001a5e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001a50:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001a56:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a5c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a68:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001a6e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001a74:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e020      	b.n	8001af2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3303      	adds	r3, #3
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3302      	adds	r3, #2
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	440b      	add	r3, r1
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ac8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	440b      	add	r3, r1
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ad6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	440a      	add	r2, r1
 8001ade:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ae0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3304      	adds	r3, #4
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <FDCAN_CopyMessageToRAM+0xf4>)
 8001af8:	5cd3      	ldrb	r3, [r2, r3]
 8001afa:	461a      	mov	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d3d6      	bcc.n	8001ab0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	3724      	adds	r7, #36	@ 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	08003934 	.word	0x08003934

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b22:	e15a      	b.n	8001dda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 814c 	beq.w	8001dd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d005      	beq.n	8001b54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d130      	bne.n	8001bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 0201 	and.w	r2, r3, #1
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d017      	beq.n	8001bf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d123      	bne.n	8001c46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	6939      	ldr	r1, [r7, #16]
 8001c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0203 	and.w	r2, r3, #3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80a6 	beq.w	8001dd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c88:	4b5b      	ldr	r3, [pc, #364]	@ (8001df8 <HAL_GPIO_Init+0x2e4>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8001df8 <HAL_GPIO_Init+0x2e4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c94:	4b58      	ldr	r3, [pc, #352]	@ (8001df8 <HAL_GPIO_Init+0x2e4>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca0:	4a56      	ldr	r2, [pc, #344]	@ (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cca:	d01f      	beq.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a4c      	ldr	r2, [pc, #304]	@ (8001e00 <HAL_GPIO_Init+0x2ec>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d019      	beq.n	8001d08 <HAL_GPIO_Init+0x1f4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a4b      	ldr	r2, [pc, #300]	@ (8001e04 <HAL_GPIO_Init+0x2f0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <HAL_GPIO_Init+0x1f0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a4a      	ldr	r2, [pc, #296]	@ (8001e08 <HAL_GPIO_Init+0x2f4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00d      	beq.n	8001d00 <HAL_GPIO_Init+0x1ec>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a49      	ldr	r2, [pc, #292]	@ (8001e0c <HAL_GPIO_Init+0x2f8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_Init+0x1e8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a48      	ldr	r2, [pc, #288]	@ (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_GPIO_Init+0x1e4>
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	e00a      	b.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001cf8:	2306      	movs	r3, #6
 8001cfa:	e008      	b.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	e006      	b.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e004      	b.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e002      	b.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_GPIO_Init+0x1fa>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	f002 0203 	and.w	r2, r2, #3
 8001d14:	0092      	lsls	r2, r2, #2
 8001d16:	4093      	lsls	r3, r2
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1e:	4937      	ldr	r1, [pc, #220]	@ (8001dfc <HAL_GPIO_Init+0x2e8>)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d2c:	4b39      	ldr	r3, [pc, #228]	@ (8001e14 <HAL_GPIO_Init+0x300>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d50:	4a30      	ldr	r2, [pc, #192]	@ (8001e14 <HAL_GPIO_Init+0x300>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d56:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <HAL_GPIO_Init+0x300>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d7a:	4a26      	ldr	r2, [pc, #152]	@ (8001e14 <HAL_GPIO_Init+0x300>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d80:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <HAL_GPIO_Init+0x300>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001da4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <HAL_GPIO_Init+0x300>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <HAL_GPIO_Init+0x300>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dce:	4a11      	ldr	r2, [pc, #68]	@ (8001e14 <HAL_GPIO_Init+0x300>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f ae9d 	bne.w	8001b24 <HAL_GPIO_Init+0x10>
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	48000400 	.word	0x48000400
 8001e04:	48000800 	.word	0x48000800
 8001e08:	48000c00 	.word	0x48000c00
 8001e0c:	48001000 	.word	0x48001000
 8001e10:	48001400 	.word	0x48001400
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	43d9      	mvns	r1, r3
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	400b      	ands	r3, r1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d141      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e96:	d131      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e98:	4b47      	ldr	r3, [pc, #284]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e9e:	4a46      	ldr	r2, [pc, #280]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ea4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	4b43      	ldr	r3, [pc, #268]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001eb0:	4a41      	ldr	r2, [pc, #260]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb8:	4b40      	ldr	r3, [pc, #256]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2232      	movs	r2, #50	@ 0x32
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	0c9b      	lsrs	r3, r3, #18
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ece:	e002      	b.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed6:	4b38      	ldr	r3, [pc, #224]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee2:	d102      	bne.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f2      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eea:	4b33      	ldr	r3, [pc, #204]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef6:	d158      	bne.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e057      	b.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001efc:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f02:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f0c:	e04d      	b.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f14:	d141      	bne.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f16:	4b28      	ldr	r3, [pc, #160]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f22:	d131      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f24:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f2a:	4a23      	ldr	r2, [pc, #140]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	4b20      	ldr	r3, [pc, #128]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2232      	movs	r2, #50	@ 0x32
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5a:	e002      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6e:	d102      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f2      	bne.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f82:	d112      	bne.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e011      	b.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f98:	e007      	b.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f9a:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fa8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	431bde83 	.word	0x431bde83

08001fc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd2:	6093      	str	r3, [r2, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e2fe      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d075      	beq.n	80020ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002002:	4b97      	ldr	r3, [pc, #604]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800200c:	4b94      	ldr	r3, [pc, #592]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d102      	bne.n	8002022 <HAL_RCC_OscConfig+0x3e>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d002      	beq.n	8002028 <HAL_RCC_OscConfig+0x44>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d10b      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	4b8d      	ldr	r3, [pc, #564]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05b      	beq.n	80020ec <HAL_RCC_OscConfig+0x108>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d157      	bne.n	80020ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e2d9      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x74>
 800204a:	4b85      	ldr	r3, [pc, #532]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a84      	ldr	r2, [pc, #528]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x98>
 8002062:	4b7f      	ldr	r3, [pc, #508]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7e      	ldr	r2, [pc, #504]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b7c      	ldr	r3, [pc, #496]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7b      	ldr	r2, [pc, #492]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 800207c:	4b78      	ldr	r3, [pc, #480]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a77      	ldr	r2, [pc, #476]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b75      	ldr	r3, [pc, #468]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a74      	ldr	r2, [pc, #464]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe fed6 	bl	8000e4c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7fe fed2 	bl	8000e4c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	@ 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e29e      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xc0>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fec2 	bl	8000e4c <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe febe 	bl	8000e4c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e28a      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020de:	4b60      	ldr	r3, [pc, #384]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0xe8>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d075      	beq.n	80021e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fa:	4b59      	ldr	r3, [pc, #356]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002104:	4b56      	ldr	r3, [pc, #344]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d102      	bne.n	800211a <HAL_RCC_OscConfig+0x136>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d002      	beq.n	8002120 <HAL_RCC_OscConfig+0x13c>
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d11f      	bne.n	8002160 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002120:	4b4f      	ldr	r3, [pc, #316]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_OscConfig+0x154>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e25d      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b49      	ldr	r3, [pc, #292]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	4946      	ldr	r1, [pc, #280]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800214c:	4b45      	ldr	r3, [pc, #276]	@ (8002264 <HAL_RCC_OscConfig+0x280>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fe2f 	bl	8000db4 <HAL_InitTick>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d043      	beq.n	80021e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e249      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d023      	beq.n	80021b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b3d      	ldr	r3, [pc, #244]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3c      	ldr	r2, [pc, #240]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fe6a 	bl	8000e4c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7fe fe66 	bl	8000e4c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e232      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218e:	4b34      	ldr	r3, [pc, #208]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	492d      	ldr	r1, [pc, #180]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
 80021ae:	e01a      	b.n	80021e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 80021b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7fe fe46 	bl	8000e4c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7fe fe42 	bl	8000e4c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e20e      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d6:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x1e0>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d041      	beq.n	8002276 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01c      	beq.n	8002234 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 80021fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002200:	4a17      	ldr	r2, [pc, #92]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7fe fe1f 	bl	8000e4c <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe fe1b 	bl	8000e4c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1e7      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0ef      	beq.n	8002212 <HAL_RCC_OscConfig+0x22e>
 8002232:	e020      	b.n	8002276 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 8002236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800223a:	4a09      	ldr	r2, [pc, #36]	@ (8002260 <HAL_RCC_OscConfig+0x27c>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7fe fe02 	bl	8000e4c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800224a:	e00d      	b.n	8002268 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7fe fdfe 	bl	8000e4c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d906      	bls.n	8002268 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1ca      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002268:	4b8c      	ldr	r3, [pc, #560]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ea      	bne.n	800224c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80a6 	beq.w	80023d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002288:	4b84      	ldr	r3, [pc, #528]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_OscConfig+0x2b4>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x2b6>
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b7f      	ldr	r3, [pc, #508]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	4a7e      	ldr	r2, [pc, #504]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022aa:	4b7c      	ldr	r3, [pc, #496]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ba:	4b79      	ldr	r3, [pc, #484]	@ (80024a0 <HAL_RCC_OscConfig+0x4bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d118      	bne.n	80022f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c6:	4b76      	ldr	r3, [pc, #472]	@ (80024a0 <HAL_RCC_OscConfig+0x4bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a75      	ldr	r2, [pc, #468]	@ (80024a0 <HAL_RCC_OscConfig+0x4bc>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fdbb 	bl	8000e4c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7fe fdb7 	bl	8000e4c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e183      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	4b6c      	ldr	r3, [pc, #432]	@ (80024a0 <HAL_RCC_OscConfig+0x4bc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d108      	bne.n	8002312 <HAL_RCC_OscConfig+0x32e>
 8002300:	4b66      	ldr	r3, [pc, #408]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	4a65      	ldr	r2, [pc, #404]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002310:	e024      	b.n	800235c <HAL_RCC_OscConfig+0x378>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d110      	bne.n	800233c <HAL_RCC_OscConfig+0x358>
 800231a:	4b60      	ldr	r3, [pc, #384]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002320:	4a5e      	ldr	r2, [pc, #376]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800232a:	4b5c      	ldr	r3, [pc, #368]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002330:	4a5a      	ldr	r2, [pc, #360]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800233a:	e00f      	b.n	800235c <HAL_RCC_OscConfig+0x378>
 800233c:	4b57      	ldr	r3, [pc, #348]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002342:	4a56      	ldr	r2, [pc, #344]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800234c:	4b53      	ldr	r3, [pc, #332]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002352:	4a52      	ldr	r2, [pc, #328]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d016      	beq.n	8002392 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7fe fd72 	bl	8000e4c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe fd6e 	bl	8000e4c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e138      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b46      	ldr	r3, [pc, #280]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ed      	beq.n	800236c <HAL_RCC_OscConfig+0x388>
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe fd5b 	bl	8000e4c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fd57 	bl	8000e4c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e121      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b0:	4b3a      	ldr	r3, [pc, #232]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ed      	bne.n	800239a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b35      	ldr	r3, [pc, #212]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	4a34      	ldr	r2, [pc, #208]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d03c      	beq.n	8002456 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01c      	beq.n	800241e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023e4:	4b2d      	ldr	r3, [pc, #180]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ea:	4a2c      	ldr	r2, [pc, #176]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fd2a 	bl	8000e4c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023fc:	f7fe fd26 	bl	8000e4c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0f2      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240e:	4b23      	ldr	r3, [pc, #140]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ef      	beq.n	80023fc <HAL_RCC_OscConfig+0x418>
 800241c:	e01b      	b.n	8002456 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800241e:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002424:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fd0d 	bl	8000e4c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002436:	f7fe fd09 	bl	8000e4c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0d5      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002448:	4b14      	ldr	r3, [pc, #80]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 800244a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ef      	bne.n	8002436 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80c9 	beq.w	80025f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002460:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b0c      	cmp	r3, #12
 800246a:	f000 8083 	beq.w	8002574 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d15e      	bne.n	8002534 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a08      	ldr	r2, [pc, #32]	@ (800249c <HAL_RCC_OscConfig+0x4b8>)
 800247c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe fce3 	bl	8000e4c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002488:	e00c      	b.n	80024a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe fcdf 	bl	8000e4c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d905      	bls.n	80024a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0ab      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
 800249c:	40021000 	.word	0x40021000
 80024a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a4:	4b55      	ldr	r3, [pc, #340]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ec      	bne.n	800248a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b0:	4b52      	ldr	r3, [pc, #328]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4b52      	ldr	r3, [pc, #328]	@ (8002600 <HAL_RCC_OscConfig+0x61c>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6a11      	ldr	r1, [r2, #32]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024c0:	3a01      	subs	r2, #1
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	4311      	orrs	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024d2:	0852      	lsrs	r2, r2, #1
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0552      	lsls	r2, r2, #21
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024de:	0852      	lsrs	r2, r2, #1
 80024e0:	3a01      	subs	r2, #1
 80024e2:	0652      	lsls	r2, r2, #25
 80024e4:	4311      	orrs	r1, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024ea:	06d2      	lsls	r2, r2, #27
 80024ec:	430a      	orrs	r2, r1
 80024ee:	4943      	ldr	r1, [pc, #268]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f4:	4b41      	ldr	r3, [pc, #260]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a40      	ldr	r2, [pc, #256]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002500:	4b3e      	ldr	r3, [pc, #248]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a3d      	ldr	r2, [pc, #244]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800250a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe fc9e 	bl	8000e4c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fc9a 	bl	8000e4c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e066      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	4b35      	ldr	r3, [pc, #212]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x530>
 8002532:	e05e      	b.n	80025f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b31      	ldr	r3, [pc, #196]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a30      	ldr	r2, [pc, #192]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 800253a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fc84 	bl	8000e4c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fc80 	bl	8000e4c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e04c      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255a:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002566:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	4924      	ldr	r1, [pc, #144]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 800256c:	4b25      	ldr	r3, [pc, #148]	@ (8002604 <HAL_RCC_OscConfig+0x620>)
 800256e:	4013      	ands	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]
 8002572:	e03e      	b.n	80025f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e039      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002580:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <HAL_RCC_OscConfig+0x618>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	429a      	cmp	r2, r3
 8002592:	d12c      	bne.n	80025ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	3b01      	subs	r3, #1
 80025a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d123      	bne.n	80025ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d11b      	bne.n	80025ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d113      	bne.n	80025ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	3b01      	subs	r3, #1
 80025d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	019f800c 	.word	0x019f800c
 8002604:	feeefffc 	.word	0xfeeefffc

08002608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e11e      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b91      	ldr	r3, [pc, #580]	@ (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d910      	bls.n	8002650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b8e      	ldr	r3, [pc, #568]	@ (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 020f 	bic.w	r2, r3, #15
 8002636:	498c      	ldr	r1, [pc, #560]	@ (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b8a      	ldr	r3, [pc, #552]	@ (8002868 <HAL_RCC_ClockConfig+0x260>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e106      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d073      	beq.n	8002744 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d129      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002664:	4b81      	ldr	r3, [pc, #516]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0f4      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002674:	f000 f99e 	bl	80029b4 <RCC_GetSysClockFreqFromPLLSource>
 8002678:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4a7c      	ldr	r2, [pc, #496]	@ (8002870 <HAL_RCC_ClockConfig+0x268>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d93f      	bls.n	8002702 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002682:	4b7a      	ldr	r3, [pc, #488]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d033      	beq.n	8002702 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12f      	bne.n	8002702 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026a2:	4b72      	ldr	r3, [pc, #456]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026aa:	4a70      	ldr	r2, [pc, #448]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 80026ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e024      	b.n	8002702 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c0:	4b6a      	ldr	r3, [pc, #424]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0c6      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d0:	4b66      	ldr	r3, [pc, #408]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0be      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026e0:	f000 f8ce 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4a61      	ldr	r2, [pc, #388]	@ (8002870 <HAL_RCC_ClockConfig+0x268>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d909      	bls.n	8002702 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ee:	4b5f      	ldr	r3, [pc, #380]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026f6:	4a5d      	ldr	r2, [pc, #372]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 80026f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b5a      	ldr	r3, [pc, #360]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4957      	ldr	r1, [pc, #348]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002714:	f7fe fb9a 	bl	8000e4c <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe fb96 	bl	8000e4c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e095      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b4e      	ldr	r3, [pc, #312]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d023      	beq.n	8002798 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800275c:	4b43      	ldr	r3, [pc, #268]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a42      	ldr	r2, [pc, #264]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002762:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002766:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002774:	4b3d      	ldr	r3, [pc, #244]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800277c:	4a3b      	ldr	r2, [pc, #236]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 800277e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b39      	ldr	r3, [pc, #228]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4936      	ldr	r1, [pc, #216]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
 8002796:	e008      	b.n	80027aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b80      	cmp	r3, #128	@ 0x80
 800279c:	d105      	bne.n	80027aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800279e:	4b33      	ldr	r3, [pc, #204]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a32      	ldr	r2, [pc, #200]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 80027a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002868 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d21d      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002868 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 020f 	bic.w	r2, r3, #15
 80027c0:	4929      	ldr	r1, [pc, #164]	@ (8002868 <HAL_RCC_ClockConfig+0x260>)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fb40 	bl	8000e4c <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7fe fb3c 	bl	8000e4c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e03b      	b.n	800285e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_RCC_ClockConfig+0x260>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1ed      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4917      	ldr	r1, [pc, #92]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b13      	ldr	r3, [pc, #76]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490f      	ldr	r1, [pc, #60]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002832:	f000 f825 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <HAL_RCC_ClockConfig+0x264>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490c      	ldr	r1, [pc, #48]	@ (8002874 <HAL_RCC_ClockConfig+0x26c>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <HAL_RCC_ClockConfig+0x270>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_RCC_ClockConfig+0x274>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe faac 	bl	8000db4 <HAL_InitTick>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	04c4b400 	.word	0x04c4b400
 8002874:	0800391c 	.word	0x0800391c
 8002878:	20000008 	.word	0x20000008
 800287c:	20000014 	.word	0x20000014

08002880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002886:	4b2c      	ldr	r3, [pc, #176]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d102      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002892:	4b2a      	ldr	r3, [pc, #168]	@ (800293c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e047      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002898:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d102      	bne.n	80028aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028a4:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e03e      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028aa:	4b23      	ldr	r3, [pc, #140]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d136      	bne.n	8002924 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3301      	adds	r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d10c      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028de:	68d2      	ldr	r2, [r2, #12]
 80028e0:	0a12      	lsrs	r2, r2, #8
 80028e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
      break;
 80028ec:	e00c      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ee:	4a13      	ldr	r2, [pc, #76]	@ (800293c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4a10      	ldr	r2, [pc, #64]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	0a12      	lsrs	r2, r2, #8
 80028fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
      break;
 8002906:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0e5b      	lsrs	r3, r3, #25
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	3301      	adds	r3, #1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	e001      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002928:	693b      	ldr	r3, [r7, #16]
}
 800292a:	4618      	mov	r0, r3
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	00f42400 	.word	0x00f42400
 8002940:	007a1200 	.word	0x007a1200

08002944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002948:	4b03      	ldr	r3, [pc, #12]	@ (8002958 <HAL_RCC_GetHCLKFreq+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000008 	.word	0x20000008

0800295c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002960:	f7ff fff0 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4904      	ldr	r1, [pc, #16]	@ (8002984 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	0800392c 	.word	0x0800392c

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800298c:	f7ff ffda 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0adb      	lsrs	r3, r3, #11
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4904      	ldr	r1, [pc, #16]	@ (80029b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	0800392c 	.word	0x0800392c

080029b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d10c      	bne.n	80029f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d8:	4a17      	ldr	r2, [pc, #92]	@ (8002a38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029e2:	68d2      	ldr	r2, [r2, #12]
 80029e4:	0a12      	lsrs	r2, r2, #8
 80029e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	617b      	str	r3, [r7, #20]
    break;
 80029f0:	e00c      	b.n	8002a0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f2:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029fc:	68d2      	ldr	r2, [r2, #12]
 80029fe:	0a12      	lsrs	r2, r2, #8
 8002a00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    break;
 8002a0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a0c:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0e5b      	lsrs	r3, r3, #25
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a26:	687b      	ldr	r3, [r7, #4]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000
 8002a38:	007a1200 	.word	0x007a1200
 8002a3c:	00f42400 	.word	0x00f42400

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8098 	beq.w	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b43      	ldr	r3, [pc, #268]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	4b40      	ldr	r3, [pc, #256]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a72:	4a3f      	ldr	r2, [pc, #252]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a86:	2301      	movs	r3, #1
 8002a88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a39      	ldr	r2, [pc, #228]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a96:	f7fe f9d9 	bl	8000e4c <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7fe f9d5 	bl	8000e4c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d902      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	74fb      	strb	r3, [r7, #19]
        break;
 8002ab0:	e005      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab2:	4b30      	ldr	r3, [pc, #192]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ef      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d159      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ace:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01e      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d019      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ae0:	4b23      	ldr	r3, [pc, #140]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aec:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002afc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	4a1b      	ldr	r2, [pc, #108]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b0c:	4a18      	ldr	r2, [pc, #96]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d016      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe f995 	bl	8000e4c <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b24:	e00b      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe f991 	bl	8000e4c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d902      	bls.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b3c:	e006      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ec      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b52:	4b07      	ldr	r3, [pc, #28]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	4903      	ldr	r1, [pc, #12]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b68:	e008      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	74bb      	strb	r3, [r7, #18]
 8002b6e:	e005      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7c:	7c7b      	ldrb	r3, [r7, #17]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4ba6      	ldr	r3, [pc, #664]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	4aa5      	ldr	r2, [pc, #660]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b9a:	4ba0      	ldr	r3, [pc, #640]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba0:	f023 0203 	bic.w	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	499c      	ldr	r1, [pc, #624]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bbc:	4b97      	ldr	r3, [pc, #604]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	f023 020c 	bic.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4994      	ldr	r1, [pc, #592]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bde:	4b8f      	ldr	r3, [pc, #572]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	498b      	ldr	r1, [pc, #556]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c00:	4b86      	ldr	r3, [pc, #536]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	4983      	ldr	r1, [pc, #524]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c22:	4b7e      	ldr	r3, [pc, #504]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	497a      	ldr	r1, [pc, #488]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c44:	4b75      	ldr	r3, [pc, #468]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	4972      	ldr	r1, [pc, #456]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c66:	4b6d      	ldr	r3, [pc, #436]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	4969      	ldr	r1, [pc, #420]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c88:	4b64      	ldr	r3, [pc, #400]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4961      	ldr	r1, [pc, #388]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002caa:	4b5c      	ldr	r3, [pc, #368]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	4958      	ldr	r1, [pc, #352]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ccc:	4b53      	ldr	r3, [pc, #332]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	4950      	ldr	r1, [pc, #320]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cec:	4b4b      	ldr	r3, [pc, #300]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d04:	4b45      	ldr	r3, [pc, #276]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	4942      	ldr	r1, [pc, #264]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d24:	4b3d      	ldr	r3, [pc, #244]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a3c      	ldr	r2, [pc, #240]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d3c:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	4934      	ldr	r1, [pc, #208]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a2e      	ldr	r2, [pc, #184]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d015      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d74:	4b29      	ldr	r3, [pc, #164]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d82:	4926      	ldr	r1, [pc, #152]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d92:	d105      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a20      	ldr	r2, [pc, #128]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	4918      	ldr	r1, [pc, #96]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a12      	ldr	r2, [pc, #72]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d015      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002de4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df2:	490a      	ldr	r1, [pc, #40]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e02:	d105      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a04      	ldr	r2, [pc, #16]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e042      	b.n	8002eb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f83b 	bl	8002ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2224      	movs	r2, #36	@ 0x24
 8002e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fafe 	bl	800346c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f82f 	bl	8002ed4 <UART_SetConfig>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e01b      	b.n	8002eb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb7d 	bl	80035b0 <UART_CheckIdleState>
 8002eb6:	4603      	mov	r3, r0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed8:	b08c      	sub	sp, #48	@ 0x30
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4bab      	ldr	r3, [pc, #684]	@ (80031b0 <UART_SetConfig+0x2dc>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4aa0      	ldr	r2, [pc, #640]	@ (80031b4 <UART_SetConfig+0x2e0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002f4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5e:	f023 010f 	bic.w	r1, r3, #15
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a91      	ldr	r2, [pc, #580]	@ (80031b8 <UART_SetConfig+0x2e4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d125      	bne.n	8002fc4 <UART_SetConfig+0xf0>
 8002f78:	4b90      	ldr	r3, [pc, #576]	@ (80031bc <UART_SetConfig+0x2e8>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d81a      	bhi.n	8002fbc <UART_SetConfig+0xe8>
 8002f86:	a201      	add	r2, pc, #4	@ (adr r2, 8002f8c <UART_SetConfig+0xb8>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	08002fad 	.word	0x08002fad
 8002f94:	08002fa5 	.word	0x08002fa5
 8002f98:	08002fb5 	.word	0x08002fb5
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa2:	e0d6      	b.n	8003152 <UART_SetConfig+0x27e>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002faa:	e0d2      	b.n	8003152 <UART_SetConfig+0x27e>
 8002fac:	2304      	movs	r3, #4
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb2:	e0ce      	b.n	8003152 <UART_SetConfig+0x27e>
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fba:	e0ca      	b.n	8003152 <UART_SetConfig+0x27e>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc2:	e0c6      	b.n	8003152 <UART_SetConfig+0x27e>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a7d      	ldr	r2, [pc, #500]	@ (80031c0 <UART_SetConfig+0x2ec>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d138      	bne.n	8003040 <UART_SetConfig+0x16c>
 8002fce:	4b7b      	ldr	r3, [pc, #492]	@ (80031bc <UART_SetConfig+0x2e8>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	d82d      	bhi.n	8003038 <UART_SetConfig+0x164>
 8002fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <UART_SetConfig+0x110>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08003019 	.word	0x08003019
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	08003039 	.word	0x08003039
 8002ff0:	08003039 	.word	0x08003039
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	08003039 	.word	0x08003039
 8002ffc:	08003039 	.word	0x08003039
 8003000:	08003039 	.word	0x08003039
 8003004:	08003021 	.word	0x08003021
 8003008:	08003039 	.word	0x08003039
 800300c:	08003039 	.word	0x08003039
 8003010:	08003039 	.word	0x08003039
 8003014:	08003031 	.word	0x08003031
 8003018:	2300      	movs	r3, #0
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800301e:	e098      	b.n	8003152 <UART_SetConfig+0x27e>
 8003020:	2302      	movs	r3, #2
 8003022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003026:	e094      	b.n	8003152 <UART_SetConfig+0x27e>
 8003028:	2304      	movs	r3, #4
 800302a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800302e:	e090      	b.n	8003152 <UART_SetConfig+0x27e>
 8003030:	2308      	movs	r3, #8
 8003032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003036:	e08c      	b.n	8003152 <UART_SetConfig+0x27e>
 8003038:	2310      	movs	r3, #16
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800303e:	e088      	b.n	8003152 <UART_SetConfig+0x27e>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5f      	ldr	r2, [pc, #380]	@ (80031c4 <UART_SetConfig+0x2f0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d125      	bne.n	8003096 <UART_SetConfig+0x1c2>
 800304a:	4b5c      	ldr	r3, [pc, #368]	@ (80031bc <UART_SetConfig+0x2e8>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003050:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003054:	2b30      	cmp	r3, #48	@ 0x30
 8003056:	d016      	beq.n	8003086 <UART_SetConfig+0x1b2>
 8003058:	2b30      	cmp	r3, #48	@ 0x30
 800305a:	d818      	bhi.n	800308e <UART_SetConfig+0x1ba>
 800305c:	2b20      	cmp	r3, #32
 800305e:	d00a      	beq.n	8003076 <UART_SetConfig+0x1a2>
 8003060:	2b20      	cmp	r3, #32
 8003062:	d814      	bhi.n	800308e <UART_SetConfig+0x1ba>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <UART_SetConfig+0x19a>
 8003068:	2b10      	cmp	r3, #16
 800306a:	d008      	beq.n	800307e <UART_SetConfig+0x1aa>
 800306c:	e00f      	b.n	800308e <UART_SetConfig+0x1ba>
 800306e:	2300      	movs	r3, #0
 8003070:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003074:	e06d      	b.n	8003152 <UART_SetConfig+0x27e>
 8003076:	2302      	movs	r3, #2
 8003078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800307c:	e069      	b.n	8003152 <UART_SetConfig+0x27e>
 800307e:	2304      	movs	r3, #4
 8003080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003084:	e065      	b.n	8003152 <UART_SetConfig+0x27e>
 8003086:	2308      	movs	r3, #8
 8003088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800308c:	e061      	b.n	8003152 <UART_SetConfig+0x27e>
 800308e:	2310      	movs	r3, #16
 8003090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003094:	e05d      	b.n	8003152 <UART_SetConfig+0x27e>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a4b      	ldr	r2, [pc, #300]	@ (80031c8 <UART_SetConfig+0x2f4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d125      	bne.n	80030ec <UART_SetConfig+0x218>
 80030a0:	4b46      	ldr	r3, [pc, #280]	@ (80031bc <UART_SetConfig+0x2e8>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80030ac:	d016      	beq.n	80030dc <UART_SetConfig+0x208>
 80030ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80030b0:	d818      	bhi.n	80030e4 <UART_SetConfig+0x210>
 80030b2:	2b80      	cmp	r3, #128	@ 0x80
 80030b4:	d00a      	beq.n	80030cc <UART_SetConfig+0x1f8>
 80030b6:	2b80      	cmp	r3, #128	@ 0x80
 80030b8:	d814      	bhi.n	80030e4 <UART_SetConfig+0x210>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <UART_SetConfig+0x1f0>
 80030be:	2b40      	cmp	r3, #64	@ 0x40
 80030c0:	d008      	beq.n	80030d4 <UART_SetConfig+0x200>
 80030c2:	e00f      	b.n	80030e4 <UART_SetConfig+0x210>
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ca:	e042      	b.n	8003152 <UART_SetConfig+0x27e>
 80030cc:	2302      	movs	r3, #2
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030d2:	e03e      	b.n	8003152 <UART_SetConfig+0x27e>
 80030d4:	2304      	movs	r3, #4
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030da:	e03a      	b.n	8003152 <UART_SetConfig+0x27e>
 80030dc:	2308      	movs	r3, #8
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030e2:	e036      	b.n	8003152 <UART_SetConfig+0x27e>
 80030e4:	2310      	movs	r3, #16
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ea:	e032      	b.n	8003152 <UART_SetConfig+0x27e>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <UART_SetConfig+0x2e0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d12a      	bne.n	800314c <UART_SetConfig+0x278>
 80030f6:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <UART_SetConfig+0x2e8>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003100:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003104:	d01a      	beq.n	800313c <UART_SetConfig+0x268>
 8003106:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800310a:	d81b      	bhi.n	8003144 <UART_SetConfig+0x270>
 800310c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003110:	d00c      	beq.n	800312c <UART_SetConfig+0x258>
 8003112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003116:	d815      	bhi.n	8003144 <UART_SetConfig+0x270>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <UART_SetConfig+0x250>
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003120:	d008      	beq.n	8003134 <UART_SetConfig+0x260>
 8003122:	e00f      	b.n	8003144 <UART_SetConfig+0x270>
 8003124:	2300      	movs	r3, #0
 8003126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800312a:	e012      	b.n	8003152 <UART_SetConfig+0x27e>
 800312c:	2302      	movs	r3, #2
 800312e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003132:	e00e      	b.n	8003152 <UART_SetConfig+0x27e>
 8003134:	2304      	movs	r3, #4
 8003136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800313a:	e00a      	b.n	8003152 <UART_SetConfig+0x27e>
 800313c:	2308      	movs	r3, #8
 800313e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003142:	e006      	b.n	8003152 <UART_SetConfig+0x27e>
 8003144:	2310      	movs	r3, #16
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800314a:	e002      	b.n	8003152 <UART_SetConfig+0x27e>
 800314c:	2310      	movs	r3, #16
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a17      	ldr	r2, [pc, #92]	@ (80031b4 <UART_SetConfig+0x2e0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	f040 80a8 	bne.w	80032ae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800315e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003162:	2b08      	cmp	r3, #8
 8003164:	d834      	bhi.n	80031d0 <UART_SetConfig+0x2fc>
 8003166:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <UART_SetConfig+0x298>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	08003191 	.word	0x08003191
 8003170:	080031d1 	.word	0x080031d1
 8003174:	08003199 	.word	0x08003199
 8003178:	080031d1 	.word	0x080031d1
 800317c:	0800319f 	.word	0x0800319f
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031d1 	.word	0x080031d1
 8003188:	080031d1 	.word	0x080031d1
 800318c:	080031a7 	.word	0x080031a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003190:	f7ff fbe4 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8003194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003196:	e021      	b.n	80031dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <UART_SetConfig+0x2f8>)
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800319c:	e01e      	b.n	80031dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7ff fb6f 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 80031a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031a4:	e01a      	b.n	80031dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031ac:	e016      	b.n	80031dc <UART_SetConfig+0x308>
 80031ae:	bf00      	nop
 80031b0:	cfff69f3 	.word	0xcfff69f3
 80031b4:	40008000 	.word	0x40008000
 80031b8:	40013800 	.word	0x40013800
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40004400 	.word	0x40004400
 80031c4:	40004800 	.word	0x40004800
 80031c8:	40004c00 	.word	0x40004c00
 80031cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 812a 	beq.w	8003438 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	4a9e      	ldr	r2, [pc, #632]	@ (8003464 <UART_SetConfig+0x590>)
 80031ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ee:	461a      	mov	r2, r3
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	429a      	cmp	r2, r3
 8003206:	d305      	bcc.n	8003214 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	429a      	cmp	r2, r3
 8003212:	d903      	bls.n	800321c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800321a:	e10d      	b.n	8003438 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	2200      	movs	r2, #0
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	60fa      	str	r2, [r7, #12]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	4a8e      	ldr	r2, [pc, #568]	@ (8003464 <UART_SetConfig+0x590>)
 800322a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800322e:	b29b      	uxth	r3, r3
 8003230:	2200      	movs	r2, #0
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800323e:	f7fc ffeb 	bl	8000218 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	020b      	lsls	r3, r1, #8
 8003254:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003258:	0202      	lsls	r2, r0, #8
 800325a:	6979      	ldr	r1, [r7, #20]
 800325c:	6849      	ldr	r1, [r1, #4]
 800325e:	0849      	lsrs	r1, r1, #1
 8003260:	2000      	movs	r0, #0
 8003262:	460c      	mov	r4, r1
 8003264:	4605      	mov	r5, r0
 8003266:	eb12 0804 	adds.w	r8, r2, r4
 800326a:	eb43 0905 	adc.w	r9, r3, r5
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	469a      	mov	sl, r3
 8003276:	4693      	mov	fp, r2
 8003278:	4652      	mov	r2, sl
 800327a:	465b      	mov	r3, fp
 800327c:	4640      	mov	r0, r8
 800327e:	4649      	mov	r1, r9
 8003280:	f7fc ffca 	bl	8000218 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003292:	d308      	bcc.n	80032a6 <UART_SetConfig+0x3d2>
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800329a:	d204      	bcs.n	80032a6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	e0c8      	b.n	8003438 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032ac:	e0c4      	b.n	8003438 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b6:	d167      	bne.n	8003388 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80032b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d828      	bhi.n	8003312 <UART_SetConfig+0x43e>
 80032c0:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <UART_SetConfig+0x3f4>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	080032f5 	.word	0x080032f5
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	08003313 	.word	0x08003313
 80032d8:	08003303 	.word	0x08003303
 80032dc:	08003313 	.word	0x08003313
 80032e0:	08003313 	.word	0x08003313
 80032e4:	08003313 	.word	0x08003313
 80032e8:	0800330b 	.word	0x0800330b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7ff fb36 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 80032f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032f2:	e014      	b.n	800331e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f4:	f7ff fb48 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 80032f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032fa:	e010      	b.n	800331e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003468 <UART_SetConfig+0x594>)
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003300:	e00d      	b.n	800331e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003302:	f7ff fabd 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8003306:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003308:	e009      	b.n	800331e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003310:	e005      	b.n	800331e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800331c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8089 	beq.w	8003438 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	4a4e      	ldr	r2, [pc, #312]	@ (8003464 <UART_SetConfig+0x590>)
 800332c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003330:	461a      	mov	r2, r3
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	fbb3 f3f2 	udiv	r3, r3, r2
 8003338:	005a      	lsls	r2, r3, #1
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	441a      	add	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d916      	bls.n	8003380 <UART_SetConfig+0x4ac>
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d212      	bcs.n	8003380 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f023 030f 	bic.w	r3, r3, #15
 8003362:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	b29a      	uxth	r2, r3
 8003370:	8bfb      	ldrh	r3, [r7, #30]
 8003372:	4313      	orrs	r3, r2
 8003374:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	8bfa      	ldrh	r2, [r7, #30]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	e05b      	b.n	8003438 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003386:	e057      	b.n	8003438 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003388:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800338c:	2b08      	cmp	r3, #8
 800338e:	d828      	bhi.n	80033e2 <UART_SetConfig+0x50e>
 8003390:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <UART_SetConfig+0x4c4>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033bd 	.word	0x080033bd
 800339c:	080033c5 	.word	0x080033c5
 80033a0:	080033cd 	.word	0x080033cd
 80033a4:	080033e3 	.word	0x080033e3
 80033a8:	080033d3 	.word	0x080033d3
 80033ac:	080033e3 	.word	0x080033e3
 80033b0:	080033e3 	.word	0x080033e3
 80033b4:	080033e3 	.word	0x080033e3
 80033b8:	080033db 	.word	0x080033db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033bc:	f7ff face 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 80033c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033c2:	e014      	b.n	80033ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c4:	f7ff fae0 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 80033c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ca:	e010      	b.n	80033ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033cc:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <UART_SetConfig+0x594>)
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033d0:	e00d      	b.n	80033ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d2:	f7ff fa55 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 80033d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033d8:	e009      	b.n	80033ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033e0:	e005      	b.n	80033ee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033ec:	bf00      	nop
    }

    if (pclk != 0U)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d021      	beq.n	8003438 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003464 <UART_SetConfig+0x590>)
 80033fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033fe:	461a      	mov	r2, r3
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	fbb3 f2f2 	udiv	r2, r3, r2
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	441a      	add	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	d909      	bls.n	8003432 <UART_SetConfig+0x55e>
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003424:	d205      	bcs.n	8003432 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	b29a      	uxth	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60da      	str	r2, [r3, #12]
 8003430:	e002      	b.n	8003438 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2201      	movs	r2, #1
 800343c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2201      	movs	r2, #1
 8003444:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2200      	movs	r2, #0
 800344c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003454:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003458:	4618      	mov	r0, r3
 800345a:	3730      	adds	r7, #48	@ 0x30
 800345c:	46bd      	mov	sp, r7
 800345e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003462:	bf00      	nop
 8003464:	08003944 	.word	0x08003944
 8003468:	00f42400 	.word	0x00f42400

0800346c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01a      	beq.n	8003582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800356a:	d10a      	bne.n	8003582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b098      	sub	sp, #96	@ 0x60
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c0:	f7fd fc44 	bl	8000e4c <HAL_GetTick>
 80035c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d12f      	bne.n	8003634 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035dc:	2200      	movs	r2, #0
 80035de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f88e 	bl	8003704 <UART_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d022      	beq.n	8003634 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003602:	653b      	str	r3, [r7, #80]	@ 0x50
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800360c:	647b      	str	r3, [r7, #68]	@ 0x44
 800360e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800361a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e6      	bne.n	80035ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e063      	b.n	80036fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d149      	bne.n	80036d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003642:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800364a:	2200      	movs	r2, #0
 800364c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f857 	bl	8003704 <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03c      	beq.n	80036d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	623b      	str	r3, [r7, #32]
   return(result);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800367a:	633b      	str	r3, [r7, #48]	@ 0x30
 800367c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e6      	bne.n	800365c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3308      	adds	r3, #8
 8003694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	60fb      	str	r3, [r7, #12]
   return(result);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3308      	adds	r3, #8
 80036ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ae:	61fa      	str	r2, [r7, #28]
 80036b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	617b      	str	r3, [r7, #20]
   return(result);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e5      	bne.n	800368e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e012      	b.n	80036fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3758      	adds	r7, #88	@ 0x58
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003714:	e04f      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d04b      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371e:	f7fd fb95 	bl	8000e4c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <UART_WaitOnFlagUntilTimeout+0x30>
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e04e      	b.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d037      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b80      	cmp	r3, #128	@ 0x80
 800374a:	d034      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b40      	cmp	r3, #64	@ 0x40
 8003750:	d031      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d110      	bne.n	8003782 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2208      	movs	r2, #8
 8003766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f838 	bl	80037de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2208      	movs	r2, #8
 8003772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e029      	b.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800378c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003790:	d111      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800379a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f81e 	bl	80037de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e00f      	b.n	80037d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d0a0      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037de:	b480      	push	{r7}
 80037e0:	b095      	sub	sp, #84	@ 0x54
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003804:	643b      	str	r3, [r7, #64]	@ 0x40
 8003806:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800380a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e6      	bne.n	80037e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3308      	adds	r3, #8
 800381e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	61fb      	str	r3, [r7, #28]
   return(result);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3308      	adds	r3, #8
 800383a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800383c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800383e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e3      	bne.n	8003818 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d118      	bne.n	800388a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	60bb      	str	r3, [r7, #8]
   return(result);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	647b      	str	r3, [r7, #68]	@ 0x44
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	613b      	str	r3, [r7, #16]
   return(result);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e6      	bne.n	8003858 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800389e:	bf00      	nop
 80038a0:	3754      	adds	r7, #84	@ 0x54
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <memset>:
 80038aa:	4402      	add	r2, r0
 80038ac:	4603      	mov	r3, r0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d100      	bne.n	80038b4 <memset+0xa>
 80038b2:	4770      	bx	lr
 80038b4:	f803 1b01 	strb.w	r1, [r3], #1
 80038b8:	e7f9      	b.n	80038ae <memset+0x4>
	...

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4d0d      	ldr	r5, [pc, #52]	@ (80038f4 <__libc_init_array+0x38>)
 80038c0:	4c0d      	ldr	r4, [pc, #52]	@ (80038f8 <__libc_init_array+0x3c>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2600      	movs	r6, #0
 80038c8:	42a6      	cmp	r6, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	4d0b      	ldr	r5, [pc, #44]	@ (80038fc <__libc_init_array+0x40>)
 80038ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003900 <__libc_init_array+0x44>)
 80038d0:	f000 f818 	bl	8003904 <_init>
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	2600      	movs	r6, #0
 80038da:	42a6      	cmp	r6, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e4:	4798      	blx	r3
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ee:	4798      	blx	r3
 80038f0:	3601      	adds	r6, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	08003964 	.word	0x08003964
 80038f8:	08003964 	.word	0x08003964
 80038fc:	08003964 	.word	0x08003964
 8003900:	08003968 	.word	0x08003968

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
