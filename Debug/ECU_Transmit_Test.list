
ECU_Transmit_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006118  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080062f0  080062f0  000072f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006330  08006330  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006338  08006338  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006338  08006338  00007338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800633c  0800633c  0000733c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006340  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000018  08006354  00008018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006354  00008368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014592  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260d  00000000  00000000  0001c5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbe  00000000  00000000  0001fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc5b  00000000  00000000  0002093e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012049  00000000  00000000  00040599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1c7d  00000000  00000000  000525e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012425f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  001242a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00128ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080062d8 	.word	0x080062d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080062d8 	.word	0x080062d8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b988 	b.w	8000d7c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	468e      	mov	lr, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4688      	mov	r8, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d962      	bls.n	8000b60 <__udivmoddi4+0xdc>
 8000a9a:	fab2 f682 	clz	r6, r2
 8000a9e:	b14e      	cbz	r6, 8000ab4 <__udivmoddi4+0x30>
 8000aa0:	f1c6 0320 	rsb	r3, r6, #32
 8000aa4:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aac:	40b7      	lsls	r7, r6
 8000aae:	ea43 0808 	orr.w	r8, r3, r8
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	fa1f fc87 	uxth.w	ip, r7
 8000abc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac0:	0c23      	lsrs	r3, r4, #16
 8000ac2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fb01 f20c 	mul.w	r2, r1, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d909      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad8:	f080 80ea 	bcs.w	8000cb0 <__udivmoddi4+0x22c>
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f240 80e7 	bls.w	8000cb0 <__udivmoddi4+0x22c>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	1a9a      	subs	r2, r3, r2
 8000ae8:	b2a3      	uxth	r3, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000af6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000afa:	459c      	cmp	ip, r3
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x8e>
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b04:	f080 80d6 	bcs.w	8000cb4 <__udivmoddi4+0x230>
 8000b08:	459c      	cmp	ip, r3
 8000b0a:	f240 80d3 	bls.w	8000cb4 <__udivmoddi4+0x230>
 8000b0e:	443b      	add	r3, r7
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b16:	eba3 030c 	sub.w	r3, r3, ip
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11d      	cbz	r5, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40f3      	lsrs	r3, r6
 8000b20:	2200      	movs	r2, #0
 8000b22:	e9c5 3200 	strd	r3, r2, [r5]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d905      	bls.n	8000b3a <__udivmoddi4+0xb6>
 8000b2e:	b10d      	cbz	r5, 8000b34 <__udivmoddi4+0xb0>
 8000b30:	e9c5 0100 	strd	r0, r1, [r5]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	e7f5      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b3a:	fab3 f183 	clz	r1, r3
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d146      	bne.n	8000bd0 <__udivmoddi4+0x14c>
 8000b42:	4573      	cmp	r3, lr
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xc8>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 8105 	bhi.w	8000d56 <__udivmoddi4+0x2d2>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4690      	mov	r8, r2
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d0e5      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b5e:	e7e2      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	f000 8090 	beq.w	8000c86 <__udivmoddi4+0x202>
 8000b66:	fab2 f682 	clz	r6, r2
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	f040 80a4 	bne.w	8000cb8 <__udivmoddi4+0x234>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	0c03      	lsrs	r3, r0, #16
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	b280      	uxth	r0, r0
 8000b7a:	b2bc      	uxth	r4, r7
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x11e>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x11c>
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f200 80e0 	bhi.w	8000d60 <__udivmoddi4+0x2dc>
 8000ba0:	46c4      	mov	ip, r8
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb0:	fb02 f404 	mul.w	r4, r2, r4
 8000bb4:	429c      	cmp	r4, r3
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x144>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x142>
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	f200 80ca 	bhi.w	8000d5a <__udivmoddi4+0x2d6>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	1b1b      	subs	r3, r3, r4
 8000bca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bd0:	f1c1 0620 	rsb	r6, r1, #32
 8000bd4:	408b      	lsls	r3, r1
 8000bd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bda:	431f      	orrs	r7, r3
 8000bdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000be0:	fa20 f306 	lsr.w	r3, r0, r6
 8000be4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bec:	4323      	orrs	r3, r4
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	fa1f fc87 	uxth.w	ip, r7
 8000bf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bfa:	0c1c      	lsrs	r4, r3, #16
 8000bfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c16:	f080 809c 	bcs.w	8000d52 <__udivmoddi4+0x2ce>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f240 8099 	bls.w	8000d52 <__udivmoddi4+0x2ce>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	fa1f fe83 	uxth.w	lr, r3
 8000c2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c30:	fb09 4413 	mls	r4, r9, r3, r4
 8000c34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x1ce>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c46:	f080 8082 	bcs.w	8000d4e <__udivmoddi4+0x2ca>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d97f      	bls.n	8000d4e <__udivmoddi4+0x2ca>
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c5e:	4564      	cmp	r4, ip
 8000c60:	4673      	mov	r3, lr
 8000c62:	46e1      	mov	r9, ip
 8000c64:	d362      	bcc.n	8000d2c <__udivmoddi4+0x2a8>
 8000c66:	d05f      	beq.n	8000d28 <__udivmoddi4+0x2a4>
 8000c68:	b15d      	cbz	r5, 8000c82 <__udivmoddi4+0x1fe>
 8000c6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c72:	fa04 f606 	lsl.w	r6, r4, r6
 8000c76:	fa22 f301 	lsr.w	r3, r2, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c82:	2100      	movs	r1, #0
 8000c84:	e74f      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c8a:	0c01      	lsrs	r1, r0, #16
 8000c8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c96:	463b      	mov	r3, r7
 8000c98:	4638      	mov	r0, r7
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	46b8      	mov	r8, r7
 8000c9e:	46be      	mov	lr, r7
 8000ca0:	2620      	movs	r6, #32
 8000ca2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ca6:	eba2 0208 	sub.w	r2, r2, r8
 8000caa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cae:	e766      	b.n	8000b7e <__udivmoddi4+0xfa>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	e718      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	e72c      	b.n	8000b12 <__udivmoddi4+0x8e>
 8000cb8:	f1c6 0220 	rsb	r2, r6, #32
 8000cbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	40b1      	lsls	r1, r6
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cde:	fb08 f904 	mul.w	r9, r8, r4
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	4589      	cmp	r9, r1
 8000ce6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	d93e      	bls.n	8000d6c <__udivmoddi4+0x2e8>
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cf4:	d201      	bcs.n	8000cfa <__udivmoddi4+0x276>
 8000cf6:	4589      	cmp	r9, r1
 8000cf8:	d81f      	bhi.n	8000d3a <__udivmoddi4+0x2b6>
 8000cfa:	eba1 0109 	sub.w	r1, r1, r9
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fb09 f804 	mul.w	r8, r9, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d10:	4542      	cmp	r2, r8
 8000d12:	d229      	bcs.n	8000d68 <__udivmoddi4+0x2e4>
 8000d14:	18ba      	adds	r2, r7, r2
 8000d16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d1a:	d2c4      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d1c:	4542      	cmp	r2, r8
 8000d1e:	d2c2      	bcs.n	8000ca6 <__udivmoddi4+0x222>
 8000d20:	f1a9 0102 	sub.w	r1, r9, #2
 8000d24:	443a      	add	r2, r7
 8000d26:	e7be      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d28:	45f0      	cmp	r8, lr
 8000d2a:	d29d      	bcs.n	8000c68 <__udivmoddi4+0x1e4>
 8000d2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d34:	3801      	subs	r0, #1
 8000d36:	46e1      	mov	r9, ip
 8000d38:	e796      	b.n	8000c68 <__udivmoddi4+0x1e4>
 8000d3a:	eba7 0909 	sub.w	r9, r7, r9
 8000d3e:	4449      	add	r1, r9
 8000d40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d48:	fb09 f804 	mul.w	r8, r9, r4
 8000d4c:	e7db      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d4e:	4673      	mov	r3, lr
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1ce>
 8000d52:	4650      	mov	r0, sl
 8000d54:	e766      	b.n	8000c24 <__udivmoddi4+0x1a0>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e6fd      	b.n	8000b56 <__udivmoddi4+0xd2>
 8000d5a:	443b      	add	r3, r7
 8000d5c:	3a02      	subs	r2, #2
 8000d5e:	e733      	b.n	8000bc8 <__udivmoddi4+0x144>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	e71c      	b.n	8000ba2 <__udivmoddi4+0x11e>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	e79c      	b.n	8000ca6 <__udivmoddi4+0x222>
 8000d6c:	eba1 0109 	sub.w	r1, r1, r9
 8000d70:	46c4      	mov	ip, r8
 8000d72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d76:	fb09 f804 	mul.w	r8, r9, r4
 8000d7a:	e7c4      	b.n	8000d06 <__udivmoddi4+0x282>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <send_CAN_message>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_CAN_message(uint16_t address, can_message_eight* msg) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	80fb      	strh	r3, [r7, #6]
    // Update ID of the transmit header
    txHeader.Identifier = address;
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000dbc <send_CAN_message+0x3c>)
 8000d90:	6013      	str	r3, [r2, #0]

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);  // Toggle LED
 8000d92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d96:	480a      	ldr	r0, [pc, #40]	@ (8000dc0 <send_CAN_message+0x40>)
 8000d98:	f003 fd40 	bl	800481c <HAL_GPIO_TogglePin>

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, msg->bytes) != HAL_OK) {
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4906      	ldr	r1, [pc, #24]	@ (8000dbc <send_CAN_message+0x3c>)
 8000da2:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <send_CAN_message+0x44>)
 8000da4:	f002 fffc 	bl	8003da0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <send_CAN_message+0x32>
        Error_Handler();
 8000dae:	f000 fbed 	bl	800158c <Error_Handler>
    }
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000029c 	.word	0x2000029c
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	20000110 	.word	0x20000110

08000dc8 <convert_float_display>:
	// Sends a ON message to the inverter
	send_CAN_message(0x201, &turnOnData);
}


void convert_float_display(can_message_four* msg_in, can_message_four* msg_out, int decimal_points) {
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
    // Used for MoTeC
	msg_out->sensor_int = (uint32_t) (msg_in->sensor_float * decimal_points);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dec:	ee17 2a90 	vmov	r2, s15
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <throttle_init>:

// Throttle functions
void throttle_init(struct Throttle* thr) {
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	thr->adc_sum = 0;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f04f 0200 	mov.w	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
	thr->buffer_index = 0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	thr->hysteresis = 2.0;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	thr->hysteresis_min = 5.0;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <throttle_init+0x68>)
 8000e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	thr->throttle_activated = 0;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	// Init buffer with zeroes
	// maybe this can also be done at initialization
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	e00a      	b.n	8000e4e <throttle_init+0x4e>
		thr->buffer[i] = 0;
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	3304      	adds	r3, #4
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b1f      	cmp	r3, #31
 8000e52:	ddf1      	ble.n	8000e38 <throttle_init+0x38>
	}

	thr->throttle_value.sensor_float = 10.0;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <throttle_init+0x6c>)
 8000e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	40a00000 	.word	0x40a00000
 8000e6c:	41200000 	.word	0x41200000

08000e70 <convert_adc_throttle>:

void convert_adc_throttle(struct Throttle* th, uint16_t adc_value) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
	 // Calibration
	 float volt = adc_value/4096*3.3;
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	0b1b      	lsrs	r3, r3, #12
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fb1a 	bl	80004bc <__aeabi_i2d>
 8000e88:	a35f      	add	r3, pc, #380	@ (adr r3, 8001008 <convert_adc_throttle+0x198>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff fb7f 	bl	8000590 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fd8b 	bl	80009b4 <__aeabi_d2f>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	613b      	str	r3, [r7, #16]
	 float calc = (volt-0.42)*100/1.65;
 8000ea2:	6938      	ldr	r0, [r7, #16]
 8000ea4:	f7ff fb1c 	bl	80004e0 <__aeabi_f2d>
 8000ea8:	a359      	add	r3, pc, #356	@ (adr r3, 8001010 <convert_adc_throttle+0x1a0>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	f7ff f9b7 	bl	8000220 <__aeabi_dsub>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff8 <convert_adc_throttle+0x188>)
 8000ec0:	f7ff fb66 	bl	8000590 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	a348      	add	r3, pc, #288	@ (adr r3, 8000ff0 <convert_adc_throttle+0x180>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fc87 	bl	80007e4 <__aeabi_ddiv>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fd69 	bl	80009b4 <__aeabi_d2f>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60fb      	str	r3, [r7, #12]

	 // This code below (adc_sum += calc ... etc) is very sus! TODO
	 th->adc_sum -= th->buffer[th->buffer_index];
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	ed93 7a00 	vldr	s14, [r3]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3304      	adds	r3, #4
 8000efa:	edd3 7a00 	vldr	s15, [r3]
 8000efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	edc3 7a00 	vstr	s15, [r3]

	 // Add new sample
	 th->buffer[th->buffer_index] = calc;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	3304      	adds	r3, #4
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	601a      	str	r2, [r3, #0]
	 th->adc_sum += calc;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	ed93 7a00 	vldr	s14, [r3]
 8000f20:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edc3 7a00 	vstr	s15, [r3]

	 // Increment index
	 th->buffer_index++;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	 if (th->buffer_index >= THROTTLE_BUFFER_SIZE) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000f44:	2b1f      	cmp	r3, #31
 8000f46:	d903      	bls.n	8000f50 <convert_adc_throttle+0xe0>
		 th->buffer_index = 0;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	 }


	 float output_value = th->adc_sum / THROTTLE_BUFFER_SIZE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	ed93 7a00 	vldr	s14, [r3]
 8000f56:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000ffc <convert_adc_throttle+0x18c>
 8000f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5e:	edc7 7a05 	vstr	s15, [r7, #20]

	 if (output_value > 100.0){
 8000f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f66:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001000 <convert_adc_throttle+0x190>
 8000f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	dd01      	ble.n	8000f78 <convert_adc_throttle+0x108>
		 output_value = 100.0;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <convert_adc_throttle+0x194>)
 8000f76:	617b      	str	r3, [r7, #20]
	 }

	 // Hysteresis -- TODO: This could be cleaned up?
	 if (output_value > th->hysteresis_min){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8000f7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	dd03      	ble.n	8000f94 <convert_adc_throttle+0x124>
		 th->throttle_activated = 1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	 }
	 if (th->throttle_activated == 1 && output_value < (th->hysteresis_min - th->hysteresis)){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d112      	bne.n	8000fc4 <convert_adc_throttle+0x154>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d503      	bpl.n	8000fc4 <convert_adc_throttle+0x154>
		 th->throttle_activated = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	 }

	 // Write output value
	 if (th->throttle_activated == 1) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d104      	bne.n	8000fd8 <convert_adc_throttle+0x168>
		 th->throttle_value.sensor_float = output_value;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	 } else {
		 th->throttle_value.sensor_float = 0.0;
	 }
}
 8000fd6:	e004      	b.n	8000fe2 <convert_adc_throttle+0x172>
		 th->throttle_value.sensor_float = 0.0;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	f3af 8000 	nop.w
 8000ff0:	66666666 	.word	0x66666666
 8000ff4:	3ffa6666 	.word	0x3ffa6666
 8000ff8:	40590000 	.word	0x40590000
 8000ffc:	42000000 	.word	0x42000000
 8001000:	42c80000 	.word	0x42c80000
 8001004:	42c80000 	.word	0x42c80000
 8001008:	66666666 	.word	0x66666666
 800100c:	400a6666 	.word	0x400a6666
 8001010:	ae147ae1 	.word	0xae147ae1
 8001014:	3fdae147 	.word	0x3fdae147

08001018 <steering_angle_init>:

// Steering angle functions
void steering_angle_init(struct SteeringAngle* sa) {
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	sa->adc_sum = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
	sa->buffer_index = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	// Init buffer with zeroes
	// maybe this can also be done at initialization
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e00b      	b.n	800104e <steering_angle_init+0x36>
		sa->buffer[i] = 0;
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3302      	adds	r3, #2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3304      	adds	r3, #4
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < THROTTLE_BUFFER_SIZE; i++) {
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b1f      	cmp	r3, #31
 8001052:	ddf0      	ble.n	8001036 <steering_angle_init+0x1e>
	}

	sa->steering_value.sensor_float = 10.0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <steering_angle_init+0x50>)
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	41200000 	.word	0x41200000

0800106c <steering_angle_avg>:

void steering_angle_avg(struct SteeringAngle* sa, float steering_value) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	ed87 0a00 	vstr	s0, [r7]
	sa->adc_sum -= sa->buffer[sa->buffer_index];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	ed93 7a02 	vldr	s14, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	3302      	adds	r3, #2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	3304      	adds	r3, #4
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add new sample
	sa->buffer[sa->buffer_index] = steering_value;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	3302      	adds	r3, #2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3304      	adds	r3, #4
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	601a      	str	r2, [r3, #0]
	sa->adc_sum += steering_value;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80010b6:	edd7 7a00 	vldr	s15, [r7]
 80010ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	edc3 7a02 	vstr	s15, [r3, #8]

	// Increment index
	sa->buffer_index++;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	if (sa->buffer_index >= 32) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80010da:	2b1f      	cmp	r3, #31
 80010dc:	d903      	bls.n	80010e6 <steering_angle_avg+0x7a>
		sa->buffer_index = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	}

	// Write average value
	sa->steering_value.sensor_float = sa->adc_sum / 32.0f;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80010ec:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001108 <steering_angle_avg+0x9c>
 80010f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	edc3 7a00 	vstr	s15, [r3]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	42000000 	.word	0x42000000

0800110c <HAL_ADC_ConvCpltCallback>:

// ADC functions
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	adc_complete_flag = 1;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200002c8 	.word	0x200002c8

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001132:	f000 fcb3 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001136:	f000 f899 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113a:	f000 f9e7 	bl	800150c <MX_GPIO_Init>
  MX_DMA_Init();
 800113e:	f000 f9bb 	bl	80014b8 <MX_DMA_Init>
  MX_ADC2_Init();
 8001142:	f000 f8df 	bl	8001304 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8001146:	f000 f953 	bl	80013f0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // Start ADC2
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) raw_adc_values, 2);
 800114a:	2202      	movs	r2, #2
 800114c:	493b      	ldr	r1, [pc, #236]	@ (800123c <main+0x110>)
 800114e:	483c      	ldr	r0, [pc, #240]	@ (8001240 <main+0x114>)
 8001150:	f001 f8fa 	bl	8002348 <HAL_ADC_Start_DMA>

  // Start FDCAN1
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001154:	483b      	ldr	r0, [pc, #236]	@ (8001244 <main+0x118>)
 8001156:	f002 fdfb 	bl	8003d50 <HAL_FDCAN_Start>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <main+0x38>
    {
      Error_Handler();
 8001160:	f000 fa14 	bl	800158c <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001164:	2200      	movs	r2, #0
 8001166:	2101      	movs	r1, #1
 8001168:	4836      	ldr	r0, [pc, #216]	@ (8001244 <main+0x118>)
 800116a:	f002 fe5d 	bl	8003e28 <HAL_FDCAN_ActivateNotification>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <main+0x4c>
    {
      /* Notification Error */
      Error_Handler();
 8001174:	f000 fa0a 	bl	800158c <Error_Handler>
    }

  // Init sensor structs
  throttle_init(&throttle_sensor);
 8001178:	4833      	ldr	r0, [pc, #204]	@ (8001248 <main+0x11c>)
 800117a:	f7ff fe41 	bl	8000e00 <throttle_init>
  steering_angle_init(&steering_sensor);
 800117e:	4833      	ldr	r0, [pc, #204]	@ (800124c <main+0x120>)
 8001180:	f7ff ff4a 	bl	8001018 <steering_angle_init>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001184:	2000      	movs	r0, #0
 8001186:	f000 fba5 	bl	80018d4 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800118a:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <main+0x124>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001190:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001192:	4b2f      	ldr	r3, [pc, #188]	@ (8001250 <main+0x124>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001198:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <main+0x124>)
 800119a:	2200      	movs	r2, #0
 800119c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800119e:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <main+0x124>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80011a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <main+0x124>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80011aa:	4929      	ldr	r1, [pc, #164]	@ (8001250 <main+0x124>)
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 fbc7 	bl	8001940 <BSP_COM_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <main+0x90>
  {
    Error_Handler();
 80011b8:	f000 f9e8 	bl	800158c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int time_sum = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  while (1)
  {
	 // Send throttle in the first 4 bytes
	 convert_float_display(&throttle_sensor.throttle_value, &txData.first, DECIMAL_POINT_0);
 80011c0:	2201      	movs	r2, #1
 80011c2:	4924      	ldr	r1, [pc, #144]	@ (8001254 <main+0x128>)
 80011c4:	4824      	ldr	r0, [pc, #144]	@ (8001258 <main+0x12c>)
 80011c6:	f7ff fdff 	bl	8000dc8 <convert_float_display>

	 // Send steering angle in the last 4 bytes
	 convert_float_display(&steering_sensor.steering_value, &txData.second, DECIMAL_POINT_0);
 80011ca:	2201      	movs	r2, #1
 80011cc:	4923      	ldr	r1, [pc, #140]	@ (800125c <main+0x130>)
 80011ce:	481f      	ldr	r0, [pc, #124]	@ (800124c <main+0x120>)
 80011d0:	f7ff fdfa 	bl	8000dc8 <convert_float_display>

	 // CAN messages at 50 ms interval
	 send_CAN_message(0x102, &txData);
 80011d4:	491f      	ldr	r1, [pc, #124]	@ (8001254 <main+0x128>)
 80011d6:	f44f 7081 	mov.w	r0, #258	@ 0x102
 80011da:	f7ff fdd1 	bl	8000d80 <send_CAN_message>
	 time_sum += 50;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3332      	adds	r3, #50	@ 0x32
 80011e2:	607b      	str	r3, [r7, #4]
	 HAL_Delay(50);
 80011e4:	2032      	movs	r0, #50	@ 0x32
 80011e6:	f000 fcc9 	bl	8001b7c <HAL_Delay>

	 if (adc_complete_flag) {
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <main+0x134>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0e5      	beq.n	80011c0 <main+0x94>
	     // Get throttle
	     convert_adc_throttle(&throttle_sensor, raw_adc_values[0]);
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <main+0x110>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4813      	ldr	r0, [pc, #76]	@ (8001248 <main+0x11c>)
 80011fc:	f7ff fe38 	bl	8000e70 <convert_adc_throttle>
//	     SpeedReference = ThrottleValue*MaxRPM/100.0;  // TODO: remove

	     // Get steering angle
	     float steering_value = (raw_adc_values[1]-3200)/4095.0f*110.0f;
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <main+0x110>)
 8001202:	885b      	ldrh	r3, [r3, #2]
 8001204:	f5a3 6348 	sub.w	r3, r3, #3200	@ 0xc80
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001210:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001264 <main+0x138>
 8001214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001218:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001268 <main+0x13c>
 800121c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001220:	edc7 7a00 	vstr	s15, [r7]
	     steering_angle_avg(&steering_sensor, steering_value);
 8001224:	ed97 0a00 	vldr	s0, [r7]
 8001228:	4808      	ldr	r0, [pc, #32]	@ (800124c <main+0x120>)
 800122a:	f7ff ff1f 	bl	800106c <steering_angle_avg>

	     // Reset ADC input
	     HAL_ADC_Start_DMA(&hadc2, (uint32_t*) raw_adc_values, 2);
 800122e:	2202      	movs	r2, #2
 8001230:	4902      	ldr	r1, [pc, #8]	@ (800123c <main+0x110>)
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <main+0x114>)
 8001234:	f001 f888 	bl	8002348 <HAL_ADC_Start_DMA>
	 convert_float_display(&throttle_sensor.throttle_value, &txData.first, DECIMAL_POINT_0);
 8001238:	e7c2      	b.n	80011c0 <main+0x94>
 800123a:	bf00      	nop
 800123c:	200002cc 	.word	0x200002cc
 8001240:	20000044 	.word	0x20000044
 8001244:	20000110 	.word	0x20000110
 8001248:	20000174 	.word	0x20000174
 800124c:	2000020c 	.word	0x2000020c
 8001250:	20000034 	.word	0x20000034
 8001254:	200002c0 	.word	0x200002c0
 8001258:	200001fc 	.word	0x200001fc
 800125c:	200002c4 	.word	0x200002c4
 8001260:	200002c8 	.word	0x200002c8
 8001264:	457ff000 	.word	0x457ff000
 8001268:	42dc0000 	.word	0x42dc0000

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	@ 0x50
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	2238      	movs	r2, #56	@ 0x38
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f004 ffff 	bl	800627e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001292:	f003 fadd 	bl	8004850 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2340      	movs	r3, #64	@ 0x40
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a8:	2302      	movs	r3, #2
 80012aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80012b0:	2308      	movs	r3, #8
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fb77 	bl	80049b8 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80012d0:	f000 f95c 	bl	800158c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d8:	2303      	movs	r3, #3
 80012da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2102      	movs	r1, #2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fe75 	bl	8004fdc <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012f8:	f000 f948 	bl	800158c <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	@ 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2220      	movs	r2, #32
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f004 ffb4 	bl	800627e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001316:	4b32      	ldr	r3, [pc, #200]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001318:	4a32      	ldr	r2, [pc, #200]	@ (80013e4 <MX_ADC2_Init+0xe0>)
 800131a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800131c:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 800131e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001322:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001324:	4b2e      	ldr	r3, [pc, #184]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132a:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001330:	4b2b      	ldr	r3, [pc, #172]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001336:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001338:	2201      	movs	r2, #1
 800133a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 800133e:	2208      	movs	r2, #8
 8001340:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = ENABLE;
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001344:	2201      	movs	r2, #1
 8001346:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001348:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 800134a:	2200      	movs	r2, #0
 800134c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800134e:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001350:	2202      	movs	r2, #2
 8001352:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800135c:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 800135e:	2200      	movs	r2, #0
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001372:	2200      	movs	r2, #0
 8001374:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800137e:	4818      	ldr	r0, [pc, #96]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 8001380:	f000 fe5e 	bl	8002040 <HAL_ADC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800138a:	f000 f8ff 	bl	800158c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <MX_ADC2_Init+0xe4>)
 8001390:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001392:	2306      	movs	r3, #6
 8001394:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800139a:	237f      	movs	r3, #127	@ 0x7f
 800139c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139e:	2304      	movs	r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 80013ac:	f001 fab8 	bl	8002920 <HAL_ADC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80013b6:	f000 f8e9 	bl	800158c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_ADC2_Init+0xe8>)
 80013bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013be:	230c      	movs	r3, #12
 80013c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <MX_ADC2_Init+0xdc>)
 80013c8:	f001 faaa 	bl	8002920 <HAL_ADC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80013d2:	f000 f8db 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000044 	.word	0x20000044
 80013e4:	50000100 	.word	0x50000100
 80013e8:	10c00010 	.word	0x10c00010
 80013ec:	0c900008 	.word	0x0c900008

080013f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80013f4:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 80013f6:	4a2e      	ldr	r2, [pc, #184]	@ (80014b0 <MX_FDCAN1_Init+0xc0>)
 80013f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80013fa:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001406:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 800140e:	2200      	movs	r2, #0
 8001410:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001414:	2200      	movs	r2, #0
 8001416:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 800141a:	2200      	movs	r2, #0
 800141c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001420:	2208      	movs	r2, #8
 8001422:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001424:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001426:	2201      	movs	r2, #1
 8001428:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800142a:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 800142c:	220d      	movs	r2, #13
 800142e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001430:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001432:	2202      	movs	r2, #2
 8001434:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001438:	2201      	movs	r2, #1
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 800143e:	2201      	movs	r2, #1
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001444:	2201      	movs	r2, #1
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 800144a:	2201      	movs	r2, #1
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001450:	2200      	movs	r2, #0
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001454:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001456:	2200      	movs	r2, #0
 8001458:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 800145c:	2200      	movs	r2, #0
 800145e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001460:	4812      	ldr	r0, [pc, #72]	@ (80014ac <MX_FDCAN1_Init+0xbc>)
 8001462:	f002 fb1b 	bl	8003a9c <HAL_FDCAN_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800146c:	f000 f88e 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  txHeader.Identifier = 0x301;  // no need to init address yet
 8001470:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 8001472:	f240 3201 	movw	r2, #769	@ 0x301
 8001476:	601a      	str	r2, [r3, #0]
    txHeader.IdType = FDCAN_STANDARD_ID;
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
    txHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 8001486:	2208      	movs	r2, #8
 8001488:	60da      	str	r2, [r3, #12]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
    txHeader.MessageMarker = 0;
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <MX_FDCAN1_Init+0xc4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000110 	.word	0x20000110
 80014b0:	40006400 	.word	0x40006400
 80014b4:	2000029c 	.word	0x2000029c

080014b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <MX_DMA_Init+0x50>)
 80014c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c2:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <MX_DMA_Init+0x50>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_DMA_Init+0x50>)
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_DMA_Init+0x50>)
 80014d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014da:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <MX_DMA_Init+0x50>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_DMA_Init+0x50>)
 80014e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	200b      	movs	r0, #11
 80014f4:	f002 f82b 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f8:	200b      	movs	r0, #11
 80014fa:	f002 f842 	bl	8003582 <HAL_NVIC_EnableIRQ>

}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_GPIO_Init+0x78>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <MX_GPIO_Init+0x78>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_GPIO_Init+0x78>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_GPIO_Init+0x78>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <MX_GPIO_Init+0x78>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_GPIO_Init+0x78>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <MX_GPIO_Init+0x7c>)
 800155a:	f003 f947 	bl	80047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800155e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_GPIO_Init+0x7c>)
 8001578:	f002 ffb6 	bl	80044e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	48000400 	.word	0x48000400

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <Error_Handler+0x8>

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <HAL_MspInit+0x44>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a2:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <HAL_MspInit+0x44>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <HAL_MspInit+0x44>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_MspInit+0x44>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_MspInit+0x44>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_MspInit+0x44>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ce:	f003 f9e3 	bl	8004998 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b09a      	sub	sp, #104	@ 0x68
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2244      	movs	r2, #68	@ 0x44
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fe3c 	bl	800627e <memset>
  if(hadc->Instance==ADC2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a38      	ldr	r2, [pc, #224]	@ (80016ec <HAL_ADC_MspInit+0x10c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d168      	bne.n	80016e2 <HAL_ADC_MspInit+0x102>

    /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001610:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001614:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001616:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800161a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fef7 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800162c:	f7ff ffae 	bl	800158c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001630:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <HAL_ADC_MspInit+0x110>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001634:	4a2e      	ldr	r2, [pc, #184]	@ (80016f0 <HAL_ADC_MspInit+0x110>)
 8001636:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800163a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163c:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <HAL_ADC_MspInit+0x110>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <HAL_ADC_MspInit+0x110>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164c:	4a28      	ldr	r2, [pc, #160]	@ (80016f0 <HAL_ADC_MspInit+0x110>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001654:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <HAL_ADC_MspInit+0x110>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001660:	23c0      	movs	r3, #192	@ 0xc0
 8001662:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001670:	4619      	mov	r1, r3
 8001672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001676:	f002 ff37 	bl	80044e8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 800167a:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 800167c:	4a1e      	ldr	r2, [pc, #120]	@ (80016f8 <HAL_ADC_MspInit+0x118>)
 800167e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001680:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 8001682:	2224      	movs	r2, #36	@ 0x24
 8001684:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001686:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800168c:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 8001694:	2280      	movs	r2, #128	@ 0x80
 8001696:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 800169a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800169e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 80016a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 80016b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80016b6:	480f      	ldr	r0, [pc, #60]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 80016b8:	f001 ff7e 	bl	80035b8 <HAL_DMA_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80016c2:	f7ff ff63 	bl	800158c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 80016ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80016cc:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <HAL_ADC_MspInit+0x114>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2012      	movs	r0, #18
 80016d8:	f001 ff39 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016dc:	2012      	movs	r0, #18
 80016de:	f001 ff50 	bl	8003582 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 80016e2:	bf00      	nop
 80016e4:	3768      	adds	r7, #104	@ 0x68
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	50000100 	.word	0x50000100
 80016f0:	40021000 	.word	0x40021000
 80016f4:	200000b0 	.word	0x200000b0
 80016f8:	40020008 	.word	0x40020008

080016fc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09a      	sub	sp, #104	@ 0x68
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2244      	movs	r2, #68	@ 0x44
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f004 fdae 	bl	800627e <memset>
  if(hfdcan->Instance==FDCAN1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a24      	ldr	r2, [pc, #144]	@ (80017b8 <HAL_FDCAN_MspInit+0xbc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d141      	bne.n	80017b0 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800172c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001730:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001732:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001736:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4618      	mov	r0, r3
 800173e:	f003 fe69 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001748:	f7ff ff20 	bl	800158c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_FDCAN_MspInit+0xc0>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <HAL_FDCAN_MspInit+0xc0>)
 8001752:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001756:	6593      	str	r3, [r2, #88]	@ 0x58
 8001758:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <HAL_FDCAN_MspInit+0xc0>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_FDCAN_MspInit+0xc0>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001768:	4a14      	ldr	r2, [pc, #80]	@ (80017bc <HAL_FDCAN_MspInit+0xc0>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_FDCAN_MspInit+0xc0>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800177c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001780:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800178e:	2309      	movs	r3, #9
 8001790:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179c:	f002 fea4 	bl	80044e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2015      	movs	r0, #21
 80017a6:	f001 fed2 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80017aa:	2015      	movs	r0, #21
 80017ac:	f001 fee9 	bl	8003582 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80017b0:	bf00      	nop
 80017b2:	3768      	adds	r7, #104	@ 0x68
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40006400 	.word	0x40006400
 80017bc:	40021000 	.word	0x40021000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <MemManage_Handler+0x4>

080017d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001816:	f000 f993 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <DMA1_Channel1_IRQHandler+0x10>)
 8001826:	f001 ffea 	bl	80037fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200000b0 	.word	0x200000b0

08001834 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <ADC1_2_IRQHandler+0x10>)
 800183a:	f000 fe39 	bl	80024b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000044 	.word	0x20000044

08001848 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <FDCAN1_IT0_IRQHandler+0x10>)
 800184e:	f002 fbd1 	bl	8003ff4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000110 	.word	0x20000110

0800185c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <SystemInit+0x20>)
 8001862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001866:	4a05      	ldr	r2, [pc, #20]	@ (800187c <SystemInit+0x20>)
 8001868:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800186c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001880:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001882:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001884:	f7ff ffea 	bl	800185c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	@ (80018bc <LoopForever+0x6>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	@ (80018c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <LoopForever+0xe>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	@ (80018cc <LoopForever+0x16>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f004 fcef 	bl	8006290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018b2:	f7ff fc3b 	bl	800112c <main>

080018b6 <LoopForever>:

LoopForever:
    b LoopForever
 80018b6:	e7fe      	b.n	80018b6 <LoopForever>
  ldr   r0, =_estack
 80018b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80018c4:	08006340 	.word	0x08006340
  ldr r2, =_sbss
 80018c8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80018cc:	20000368 	.word	0x20000368

080018d0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <COMP1_2_3_IRQHandler>
	...

080018d4 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <BSP_LED_Init+0x64>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <BSP_LED_Init+0x64>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <BSP_LED_Init+0x64>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80018f6:	2320      	movs	r3, #32
 80018f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <BSP_LED_Init+0x68>)
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fde7 	bl	80044e8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <BSP_LED_Init+0x68>)
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	2120      	movs	r1, #32
 8001924:	2200      	movs	r2, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f002 ff60 	bl	80047ec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	20000004 	.word	0x20000004

08001940 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d903      	bls.n	800195e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001956:	f06f 0301 	mvn.w	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e018      	b.n	8001990 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2294      	movs	r2, #148	@ 0x94
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <BSP_COM_Init+0x5c>)
 8001968:	4413      	add	r3, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f84a 	bl	8001a04 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2294      	movs	r2, #148	@ 0x94
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	4a08      	ldr	r2, [pc, #32]	@ (800199c <BSP_COM_Init+0x5c>)
 800197a:	4413      	add	r3, r2
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f80e 	bl	80019a0 <MX_LPUART1_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800198a:	f06f 0303 	mvn.w	r3, #3
 800198e:	e000      	b.n	8001992 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001990:	68fb      	ldr	r3, [r7, #12]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002d0 	.word	0x200002d0

080019a0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <MX_LPUART1_Init+0x60>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	220c      	movs	r2, #12
 80019be:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	895b      	ldrh	r3, [r3, #10]
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	891b      	ldrh	r3, [r3, #8]
 80019d6:	461a      	mov	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	899b      	ldrh	r3, [r3, #12]
 80019e0:	461a      	mov	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019ec:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f003 ff00 	bl	80057f4 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008

08001a04 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a0c:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a18:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001a24:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a28:	4a1b      	ldr	r2, [pc, #108]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001a3c:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	4a15      	ldr	r2, [pc, #84]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <COM1_MspInit+0x94>)
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001a54:	2304      	movs	r3, #4
 8001a56:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001a64:	230c      	movs	r3, #12
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a72:	f002 fd39 	bl	80044e8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001a76:	2308      	movs	r3, #8
 8001a78:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001a7e:	230c      	movs	r3, #12
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a8c:	f002 fd2c 	bl	80044e8 <HAL_GPIO_Init>
}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	@ 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa6:	2003      	movs	r0, #3
 8001aa8:	f001 fd46 	bl	8003538 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aac:	2000      	movs	r0, #0
 8001aae:	f000 f80d 	bl	8001acc <HAL_InitTick>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	e001      	b.n	8001ac2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001abe:	f7ff fd6b 	bl	8001598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac2:	79fb      	ldrb	r3, [r7, #7]

}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_InitTick+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d022      	beq.n	8001b26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_InitTick+0x6c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <HAL_InitTick+0x68>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fd52 	bl	800359e <HAL_SYSTICK_Config>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10f      	bne.n	8001b20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	d809      	bhi.n	8001b1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b06:	2200      	movs	r2, #0
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	f001 fd1e 	bl	800354e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <HAL_InitTick+0x70>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e004      	b.n	8001b2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e001      	b.n	8001b2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000010 	.word	0x20000010
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	2000000c 	.word	0x2000000c

08001b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_IncTick+0x1c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a03      	ldr	r2, [pc, #12]	@ (8001b5c <HAL_IncTick+0x1c>)
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000364 	.word	0x20000364
 8001b60:	20000010 	.word	0x20000010

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000364 	.word	0x20000364

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d004      	beq.n	8001ba0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_Delay+0x40>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba0:	bf00      	nop
 8001ba2:	f7ff ffdf 	bl	8001b64 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d8f7      	bhi.n	8001ba2 <HAL_Delay+0x26>
  {
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000010 	.word	0x20000010

08001bc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3360      	adds	r3, #96	@ 0x60
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <LL_ADC_SetOffset+0x44>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c60:	bf00      	nop
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	03fff000 	.word	0x03fff000

08001c70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3360      	adds	r3, #96	@ 0x60
 8001c7e:	461a      	mov	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3360      	adds	r3, #96	@ 0x60
 8001cac:	461a      	mov	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cc6:	bf00      	nop
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b087      	sub	sp, #28
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3360      	adds	r3, #96	@ 0x60
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cfc:	bf00      	nop
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3360      	adds	r3, #96	@ 0x60
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d32:	bf00      	nop
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	615a      	str	r2, [r3, #20]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3330      	adds	r3, #48	@ 0x30
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	4413      	add	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	211f      	movs	r1, #31
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	f003 011f 	and.w	r1, r3, #31
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3314      	adds	r3, #20
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	0e5b      	lsrs	r3, r3, #25
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	4413      	add	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0d1b      	lsrs	r3, r3, #20
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2107      	movs	r1, #7
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	0d1b      	lsrs	r3, r3, #20
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0318 	and.w	r3, r3, #24
 8001e82:	4908      	ldr	r1, [pc, #32]	@ (8001ea4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e84:	40d9      	lsrs	r1, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	400b      	ands	r3, r1
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	0007ffff 	.word	0x0007ffff

08001ea8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6093      	str	r3, [r2, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f18:	d101      	bne.n	8001f1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f40:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f68:	d101      	bne.n	8001f6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <LL_ADC_IsEnabled+0x18>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <LL_ADC_IsEnabled+0x1a>
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fde:	f043 0204 	orr.w	r2, r3, #4
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d101      	bne.n	800200a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b08      	cmp	r3, #8
 800202a:	d101      	bne.n	8002030 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b089      	sub	sp, #36	@ 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e167      	b.n	800232a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fab9 	bl	80015e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff3f 	bl	8001f04 <LL_ADC_IsDeepPowerDownEnabled>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff25 	bl	8001ee0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff5a 	bl	8001f54 <LL_ADC_IsInternalRegulatorEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d115      	bne.n	80020d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff3e 	bl	8001f2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b0:	4ba0      	ldr	r3, [pc, #640]	@ (8002334 <HAL_ADC_Init+0x2f4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	4aa0      	ldr	r2, [pc, #640]	@ (8002338 <HAL_ADC_Init+0x2f8>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	3301      	adds	r3, #1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020c4:	e002      	b.n	80020cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f9      	bne.n	80020c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff3c 	bl	8001f54 <LL_ADC_IsInternalRegulatorEnabled>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10d      	bne.n	80020fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff75 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 8002108:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 8100 	bne.w	8002318 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80fc 	bne.w	8002318 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002128:	f043 0202 	orr.w	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff35 	bl	8001fa4 <LL_ADC_IsEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002140:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002144:	f7ff ff2e 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002148:	4604      	mov	r4, r0
 800214a:	487c      	ldr	r0, [pc, #496]	@ (800233c <HAL_ADC_Init+0x2fc>)
 800214c:	f7ff ff2a 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	4323      	orrs	r3, r4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4619      	mov	r1, r3
 800215e:	4878      	ldr	r0, [pc, #480]	@ (8002340 <HAL_ADC_Init+0x300>)
 8002160:	f7ff fd2e 	bl	8001bc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7f5b      	ldrb	r3, [r3, #29]
 8002168:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800216e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002174:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800217a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002182:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800218e:	2b01      	cmp	r3, #1
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	045b      	lsls	r3, r3, #17
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b60      	ldr	r3, [pc, #384]	@ (8002344 <HAL_ADC_Init+0x304>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff14 	bl	8002018 <LL_ADC_INJ_IsConversionOngoing>
 80021f0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d16d      	bne.n	80022d4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d16a      	bne.n	80022d4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002202:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800220a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800221a:	f023 0302 	bic.w	r3, r3, #2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	430b      	orrs	r3, r1
 8002226:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d017      	beq.n	8002260 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800223e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002248:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800224c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6911      	ldr	r1, [r2, #16]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	430b      	orrs	r3, r1
 800225a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800225e:	e013      	b.n	8002288 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800226e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002280:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002284:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228e:	2b01      	cmp	r3, #1
 8002290:	d118      	bne.n	80022c4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022b4:	430a      	orrs	r2, r1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	611a      	str	r2, [r3, #16]
 80022c2:	e007      	b.n	80022d4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d10c      	bne.n	80022f6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f023 010f 	bic.w	r1, r3, #15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80022f4:	e007      	b.n	8002306 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 020f 	bic.w	r2, r2, #15
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002316:	e007      	b.n	8002328 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002328:	7ffb      	ldrb	r3, [r7, #31]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	@ 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd90      	pop	{r4, r7, pc}
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000
 8002338:	053e2d63 	.word	0x053e2d63
 800233c:	50000100 	.word	0x50000100
 8002340:	50000300 	.word	0x50000300
 8002344:	fff04007 	.word	0xfff04007

08002348 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002354:	4851      	ldr	r0, [pc, #324]	@ (800249c <HAL_ADC_Start_DMA+0x154>)
 8002356:	f7ff fda7 	bl	8001ea8 <LL_ADC_GetMultimode>
 800235a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fe46 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 808f 	bne.w	800248c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_ADC_Start_DMA+0x34>
 8002378:	2302      	movs	r3, #2
 800237a:	e08a      	b.n	8002492 <HAL_ADC_Start_DMA+0x14a>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d002      	beq.n	8002396 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b09      	cmp	r3, #9
 8002394:	d173      	bne.n	800247e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 feb2 	bl	8003100 <ADC_Enable>
 800239c:	4603      	mov	r3, r0
 800239e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d166      	bne.n	8002474 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a38      	ldr	r2, [pc, #224]	@ (80024a0 <HAL_ADC_Start_DMA+0x158>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d002      	beq.n	80023ca <HAL_ADC_Start_DMA+0x82>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	e001      	b.n	80023ce <HAL_ADC_Start_DMA+0x86>
 80023ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d002      	beq.n	80023dc <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f8:	f023 0206 	bic.w	r2, r3, #6
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	661a      	str	r2, [r3, #96]	@ 0x60
 8002400:	e002      	b.n	8002408 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240c:	4a25      	ldr	r2, [pc, #148]	@ (80024a4 <HAL_ADC_Start_DMA+0x15c>)
 800240e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002414:	4a24      	ldr	r2, [pc, #144]	@ (80024a8 <HAL_ADC_Start_DMA+0x160>)
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	4a23      	ldr	r2, [pc, #140]	@ (80024ac <HAL_ADC_Start_DMA+0x164>)
 800241e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	221c      	movs	r2, #28
 8002426:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0210 	orr.w	r2, r2, #16
 800243e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3340      	adds	r3, #64	@ 0x40
 800245a:	4619      	mov	r1, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f001 f952 	bl	8003708 <HAL_DMA_Start_IT>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fdac 	bl	8001fca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002472:	e00d      	b.n	8002490 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800247c:	e008      	b.n	8002490 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800248a:	e001      	b.n	8002490 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800248c:	2302      	movs	r3, #2
 800248e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002490:	7dfb      	ldrb	r3, [r7, #23]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	50000300 	.word	0x50000300
 80024a0:	50000100 	.word	0x50000100
 80024a4:	0800320d 	.word	0x0800320d
 80024a8:	080032e5 	.word	0x080032e5
 80024ac:	08003301 	.word	0x08003301

080024b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024cc:	4883      	ldr	r0, [pc, #524]	@ (80026dc <HAL_ADC_IRQHandler+0x22c>)
 80024ce:	f7ff fceb 	bl	8001ea8 <LL_ADC_GetMultimode>
 80024d2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d017      	beq.n	800250e <HAL_ADC_IRQHandler+0x5e>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 ff3f 	bl	8003384 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2202      	movs	r2, #2
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <HAL_ADC_IRQHandler+0x72>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8085 	beq.w	8002638 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d07f      	beq.n	8002638 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fc05 	bl	8001d64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d064      	beq.n	800262a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5e      	ldr	r2, [pc, #376]	@ (80026e0 <HAL_ADC_IRQHandler+0x230>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d002      	beq.n	8002570 <HAL_ADC_IRQHandler+0xc0>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	e001      	b.n	8002574 <HAL_ADC_IRQHandler+0xc4>
 8002570:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	4293      	cmp	r3, r2
 800257a:	d008      	beq.n	800258e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d002      	beq.n	800258e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b09      	cmp	r3, #9
 800258c:	d104      	bne.n	8002598 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	623b      	str	r3, [r7, #32]
 8002596:	e00d      	b.n	80025b4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a50      	ldr	r2, [pc, #320]	@ (80026e0 <HAL_ADC_IRQHandler+0x230>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d002      	beq.n	80025a8 <HAL_ADC_IRQHandler+0xf8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	e001      	b.n	80025ac <HAL_ADC_IRQHandler+0xfc>
 80025a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025ac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d135      	bne.n	800262a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d12e      	bne.n	800262a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fd0e 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11a      	bne.n	8002612 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020c 	bic.w	r2, r2, #12
 80025ea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d112      	bne.n	800262a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002610:	e00b      	b.n	800262a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002616:	f043 0210 	orr.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fd6e 	bl	800110c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	220c      	movs	r2, #12
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_ADC_IRQHandler+0x19c>
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 809e 	beq.w	8002794 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8098 	beq.w	8002794 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fbae 	bl	8001de2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002686:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fb69 	bl	8001d64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002692:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_ADC_IRQHandler+0x230>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d002      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x1f4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e001      	b.n	80026a8 <HAL_ADC_IRQHandler+0x1f8>
 80026a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d008      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d002      	beq.n	80026c2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b07      	cmp	r3, #7
 80026c0:	d104      	bne.n	80026cc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	e011      	b.n	80026f0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a03      	ldr	r2, [pc, #12]	@ (80026e0 <HAL_ADC_IRQHandler+0x230>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d006      	beq.n	80026e4 <HAL_ADC_IRQHandler+0x234>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e005      	b.n	80026e8 <HAL_ADC_IRQHandler+0x238>
 80026dc:	50000300 	.word	0x50000300
 80026e0:	50000100 	.word	0x50000100
 80026e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026e8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d047      	beq.n	8002786 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_ADC_IRQHandler+0x260>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d03f      	beq.n	8002786 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d13a      	bne.n	8002786 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b40      	cmp	r3, #64	@ 0x40
 800271c:	d133      	bne.n	8002786 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12e      	bne.n	8002786 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fc73 	bl	8002018 <LL_ADC_INJ_IsConversionOngoing>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11a      	bne.n	800276e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002746:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d112      	bne.n	8002786 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800276c:	e00b      	b.n	8002786 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002772:	f043 0210 	orr.w	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fdd4 	bl	8003334 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2260      	movs	r2, #96	@ 0x60
 8002792:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d011      	beq.n	80027c2 <HAL_ADC_IRQHandler+0x312>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00c      	beq.n	80027c2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f89f 	bl	80028f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d012      	beq.n	80027f2 <HAL_ADC_IRQHandler+0x342>
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fdba 	bl	800335c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <HAL_ADC_IRQHandler+0x372>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fdac 	bl	8003370 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d036      	beq.n	800289a <HAL_ADC_IRQHandler+0x3ea>
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d031      	beq.n	800289a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800283e:	2301      	movs	r3, #1
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
 8002842:	e014      	b.n	800286e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800284a:	4825      	ldr	r0, [pc, #148]	@ (80028e0 <HAL_ADC_IRQHandler+0x430>)
 800284c:	f7ff fb3a 	bl	8001ec4 <LL_ADC_GetMultiDMATransfer>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002856:	2301      	movs	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
 800285a:	e008      	b.n	800286e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800286a:	2301      	movs	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	2b01      	cmp	r3, #1
 8002872:	d10e      	bne.n	8002892 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002884:	f043 0202 	orr.w	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f83d 	bl	800290c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2210      	movs	r2, #16
 8002898:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <HAL_ADC_IRQHandler+0x426>
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d013      	beq.n	80028d6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028be:	f043 0208 	orr.w	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ce:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fd39 	bl	8003348 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80028d6:	bf00      	nop
 80028d8:	3728      	adds	r7, #40	@ 0x28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	50000300 	.word	0x50000300

080028e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0b6      	sub	sp, #216	@ 0xd8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x22>
 800293e:	2302      	movs	r3, #2
 8002940:	e3c8      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x7b4>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fb4f 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 83ad 	bne.w	80030b6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	f7ff fa0e 	bl	8001d8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fb3d 	bl	8001ff2 <LL_ADC_REG_IsConversionOngoing>
 8002978:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fb49 	bl	8002018 <LL_ADC_INJ_IsConversionOngoing>
 8002986:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800298a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 81d9 	bne.w	8002d46 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 81d4 	bne.w	8002d46 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029a6:	d10f      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2200      	movs	r2, #0
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7ff fa28 	bl	8001e08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f9bc 	bl	8001d3e <LL_ADC_SetSamplingTimeCommonConfig>
 80029c6:	e00e      	b.n	80029e6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	461a      	mov	r2, r3
 80029d6:	f7ff fa17 	bl	8001e08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f9ac 	bl	8001d3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d022      	beq.n	8002a4e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a18:	f7ff f906 	bl	8001c28 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6919      	ldr	r1, [r3, #16]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f7ff f952 	bl	8001cd2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d102      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x124>
 8002a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a42:	e000      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x126>
 8002a44:	2300      	movs	r3, #0
 8002a46:	461a      	mov	r2, r3
 8002a48:	f7ff f95e 	bl	8001d08 <LL_ADC_SetOffsetSaturation>
 8002a4c:	e17b      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff f90b 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x15a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f900 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	e01e      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x198>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f8f5 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002aa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e004      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002aac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1b0>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	e018      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x1e2>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002aec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e004      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002af8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d106      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f8c4 	bl	8001c9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff f8a8 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x220>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f89d 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	f003 021f 	and.w	r2, r3, #31
 8002b3e:	e01e      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x25e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f892 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002b6e:	2320      	movs	r3, #32
 8002b70:	e004      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d105      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x276>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	e018      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x2a8>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002baa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e004      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d106      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f861 	bl	8001c9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2102      	movs	r1, #2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f845 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10a      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x2e6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f83a 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	e01e      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x324>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff f82f 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e004      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x33c>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	e016      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x36a>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002c6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e004      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d106      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2102      	movs	r1, #2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f800 	bl	8001c9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2103      	movs	r1, #3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe ffe4 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x3a8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2103      	movs	r1, #3
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ffd9 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	f003 021f 	and.w	r2, r3, #31
 8002cc6:	e017      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x3d8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2103      	movs	r1, #3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe ffce 	bl	8001c70 <LL_ADC_GetOffsetChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002ce0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ce2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002ce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002cea:	2320      	movs	r3, #32
 8002cec:	e003      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002cee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cf0:	fab3 f383 	clz	r3, r3
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x3f0>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	e011      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x414>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002d28:	2320      	movs	r3, #32
 8002d2a:	e003      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d106      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2103      	movs	r1, #3
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe ffab 	bl	8001c9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f92a 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 8140 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f7ff f87b 	bl	8001e60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4a8f      	ldr	r2, [pc, #572]	@ (8002fac <HAL_ADC_ConfigChannel+0x68c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	f040 8131 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x47e>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2b09      	cmp	r3, #9
 8002d94:	bf94      	ite	ls
 8002d96:	2301      	movls	r3, #1
 8002d98:	2300      	movhi	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	e019      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4b2>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002db0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e003      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2b09      	cmp	r3, #9
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d079      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d107      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x4d2>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	3301      	adds	r3, #1
 8002dea:	069b      	lsls	r3, r3, #26
 8002dec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002df0:	e015      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x4fe>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e003      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	069b      	lsls	r3, r3, #26
 8002e1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x51e>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	3301      	adds	r3, #1
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	e017      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x54e>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e003      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	ea42 0103 	orr.w	r1, r2, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x574>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	3301      	adds	r3, #1
 8002e86:	f003 021f 	and.w	r2, r3, #31
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	051b      	lsls	r3, r3, #20
 8002e92:	e018      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x5a6>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002eac:	2320      	movs	r3, #32
 8002eae:	e003      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	e081      	b.n	8002fce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x5c6>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0e9b      	lsrs	r3, r3, #26
 8002edc:	3301      	adds	r3, #1
 8002ede:	069b      	lsls	r3, r3, #26
 8002ee0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ee4:	e015      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x5f2>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002efe:	2320      	movs	r3, #32
 8002f00:	e003      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	069b      	lsls	r3, r3, #26
 8002f0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x612>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0e9b      	lsrs	r3, r3, #26
 8002f24:	3301      	adds	r3, #1
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	e017      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x642>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	61fb      	str	r3, [r7, #28]
  return result;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e003      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	ea42 0103 	orr.w	r1, r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x66e>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	0e9b      	lsrs	r3, r3, #26
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f003 021f 	and.w	r2, r3, #31
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	3b1e      	subs	r3, #30
 8002f86:	051b      	lsls	r3, r3, #20
 8002f88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	e01e      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x6ac>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	613b      	str	r3, [r7, #16]
  return result;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d104      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	e006      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x698>
 8002faa:	bf00      	nop
 8002fac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 021f 	and.w	r2, r3, #31
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3b1e      	subs	r3, #30
 8002fc6:	051b      	lsls	r3, r3, #20
 8002fc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f7fe ff18 	bl	8001e08 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80030dc <HAL_ADC_ConfigChannel+0x7bc>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d071      	beq.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fe4:	483e      	ldr	r0, [pc, #248]	@ (80030e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fe6:	f7fe fe11 	bl	8001c0c <LL_ADC_GetCommonPathInternalCh>
 8002fea:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80030e4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x6e2>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3a      	ldr	r2, [pc, #232]	@ (80030e8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d127      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d121      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003016:	d157      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800301c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003020:	4619      	mov	r1, r3
 8003022:	482f      	ldr	r0, [pc, #188]	@ (80030e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003024:	f7fe fddf 	bl	8001be6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003028:	4b30      	ldr	r3, [pc, #192]	@ (80030ec <HAL_ADC_ConfigChannel+0x7cc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	4a30      	ldr	r2, [pc, #192]	@ (80030f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003042:	e002      	b.n	800304a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3b01      	subs	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003050:	e03a      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a27      	ldr	r2, [pc, #156]	@ (80030f4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d113      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800305c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003060:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a22      	ldr	r2, [pc, #136]	@ (80030f8 <HAL_ADC_ConfigChannel+0x7d8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02a      	beq.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003072:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800307a:	4619      	mov	r1, r3
 800307c:	4818      	ldr	r0, [pc, #96]	@ (80030e0 <HAL_ADC_ConfigChannel+0x7c0>)
 800307e:	f7fe fdb2 	bl	8001be6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003082:	e021      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <HAL_ADC_ConfigChannel+0x7dc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d11c      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800308e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d116      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a16      	ldr	r2, [pc, #88]	@ (80030f8 <HAL_ADC_ConfigChannel+0x7d8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d011      	beq.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030ac:	4619      	mov	r1, r3
 80030ae:	480c      	ldr	r0, [pc, #48]	@ (80030e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80030b0:	f7fe fd99 	bl	8001be6 <LL_ADC_SetCommonPathInternalCh>
 80030b4:	e008      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	37d8      	adds	r7, #216	@ 0xd8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	80080000 	.word	0x80080000
 80030e0:	50000300 	.word	0x50000300
 80030e4:	c3210000 	.word	0xc3210000
 80030e8:	90c00010 	.word	0x90c00010
 80030ec:	20000000 	.word	0x20000000
 80030f0:	053e2d63 	.word	0x053e2d63
 80030f4:	c7520000 	.word	0xc7520000
 80030f8:	50000100 	.word	0x50000100
 80030fc:	cb840000 	.word	0xcb840000

08003100 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe ff47 	bl	8001fa4 <LL_ADC_IsEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d169      	bne.n	80031f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	4b36      	ldr	r3, [pc, #216]	@ (80031fc <ADC_Enable+0xfc>)
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	f043 0210 	orr.w	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e055      	b.n	80031f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe ff16 	bl	8001f7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003150:	482b      	ldr	r0, [pc, #172]	@ (8003200 <ADC_Enable+0x100>)
 8003152:	f7fe fd5b 	bl	8001c0c <LL_ADC_GetCommonPathInternalCh>
 8003156:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003158:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003160:	4b28      	ldr	r3, [pc, #160]	@ (8003204 <ADC_Enable+0x104>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	4a28      	ldr	r2, [pc, #160]	@ (8003208 <ADC_Enable+0x108>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800317a:	e002      	b.n	8003182 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	3b01      	subs	r3, #1
 8003180:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f9      	bne.n	800317c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003188:	f7fe fcec 	bl	8001b64 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800318e:	e028      	b.n	80031e2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe ff05 	bl	8001fa4 <LL_ADC_IsEnabled>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fee9 	bl	8001f7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031aa:	f7fe fcdb 	bl	8001b64 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d914      	bls.n	80031e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d00d      	beq.n	80031e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e007      	b.n	80031f2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d1cf      	bne.n	8003190 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	8000003f 	.word	0x8000003f
 8003200:	50000300 	.word	0x50000300
 8003204:	20000000 	.word	0x20000000
 8003208:	053e2d63 	.word	0x053e2d63

0800320c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d14b      	bne.n	80032be <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d021      	beq.n	8003284 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe fd8d 	bl	8001d64 <LL_ADC_REG_IsTriggerSourceSWStart>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d032      	beq.n	80032b6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d12b      	bne.n	80032b6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003262:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d11f      	bne.n	80032b6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327a:	f043 0201 	orr.w	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003282:	e018      	b.n	80032b6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d111      	bne.n	80032b6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f7fd ff28 	bl	800110c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032bc:	e00e      	b.n	80032dc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fb1e 	bl	800290c <HAL_ADC_ErrorCallback>
}
 80032d0:	e004      	b.n	80032dc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff faf6 	bl	80028e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003312:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f7ff faf0 	bl	800290c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a8:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033b4:	4013      	ands	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ca:	4a04      	ldr	r2, [pc, #16]	@ (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	60d3      	str	r3, [r2, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e4:	4b04      	ldr	r3, [pc, #16]	@ (80033f8 <__NVIC_GetPriorityGrouping+0x18>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	f003 0307 	and.w	r3, r3, #7
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	2b00      	cmp	r3, #0
 800340c:	db0b      	blt.n	8003426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4907      	ldr	r1, [pc, #28]	@ (8003434 <__NVIC_EnableIRQ+0x38>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2001      	movs	r0, #1
 800341e:	fa00 f202 	lsl.w	r2, r0, r2
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e100 	.word	0xe000e100

08003438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db0a      	blt.n	8003462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	490c      	ldr	r1, [pc, #48]	@ (8003484 <__NVIC_SetPriority+0x4c>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	440b      	add	r3, r1
 800345c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003460:	e00a      	b.n	8003478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4908      	ldr	r1, [pc, #32]	@ (8003488 <__NVIC_SetPriority+0x50>)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3b04      	subs	r3, #4
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	440b      	add	r3, r1
 8003476:	761a      	strb	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	@ 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f1c3 0307 	rsb	r3, r3, #7
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf28      	it	cs
 80034aa:	2304      	movcs	r3, #4
 80034ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d902      	bls.n	80034bc <NVIC_EncodePriority+0x30>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3b03      	subs	r3, #3
 80034ba:	e000      	b.n	80034be <NVIC_EncodePriority+0x32>
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	401a      	ands	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d4:	f04f 31ff 	mov.w	r1, #4294967295
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	43d9      	mvns	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	4313      	orrs	r3, r2
         );
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	@ 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003504:	d301      	bcc.n	800350a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003506:	2301      	movs	r3, #1
 8003508:	e00f      	b.n	800352a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350a:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <SysTick_Config+0x40>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003512:	210f      	movs	r1, #15
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f7ff ff8e 	bl	8003438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <SysTick_Config+0x40>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003522:	4b04      	ldr	r3, [pc, #16]	@ (8003534 <SysTick_Config+0x40>)
 8003524:	2207      	movs	r2, #7
 8003526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000e010 	.word	0xe000e010

08003538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff29 	bl	8003398 <__NVIC_SetPriorityGrouping>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800355c:	f7ff ff40 	bl	80033e0 <__NVIC_GetPriorityGrouping>
 8003560:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	f7ff ff90 	bl	800348c <NVIC_EncodePriority>
 800356c:	4602      	mov	r2, r0
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff5f 	bl	8003438 <__NVIC_SetPriority>
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff33 	bl	80033fc <__NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffa4 	bl	80034f4 <SysTick_Config>
 80035ac:	4603      	mov	r3, r0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e08d      	b.n	80036e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b47      	ldr	r3, [pc, #284]	@ (80036f0 <HAL_DMA_Init+0x138>)
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d80f      	bhi.n	80035f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	4b45      	ldr	r3, [pc, #276]	@ (80036f4 <HAL_DMA_Init+0x13c>)
 80035de:	4413      	add	r3, r2
 80035e0:	4a45      	ldr	r2, [pc, #276]	@ (80036f8 <HAL_DMA_Init+0x140>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	009a      	lsls	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a42      	ldr	r2, [pc, #264]	@ (80036fc <HAL_DMA_Init+0x144>)
 80035f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80035f4:	e00e      	b.n	8003614 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b40      	ldr	r3, [pc, #256]	@ (8003700 <HAL_DMA_Init+0x148>)
 80035fe:	4413      	add	r3, r2
 8003600:	4a3d      	ldr	r2, [pc, #244]	@ (80036f8 <HAL_DMA_Init+0x140>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	009a      	lsls	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a3c      	ldr	r2, [pc, #240]	@ (8003704 <HAL_DMA_Init+0x14c>)
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800362a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9b6 	bl	80039d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003674:	d102      	bne.n	800367c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003690:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <HAL_DMA_Init+0x104>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d80c      	bhi.n	80036bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9d6 	bl	8003a54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	e008      	b.n	80036ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40020407 	.word	0x40020407
 80036f4:	bffdfff8 	.word	0xbffdfff8
 80036f8:	cccccccd 	.word	0xcccccccd
 80036fc:	40020000 	.word	0x40020000
 8003700:	bffdfbf8 	.word	0xbffdfbf8
 8003704:	40020400 	.word	0x40020400

08003708 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_DMA_Start_IT+0x20>
 8003724:	2302      	movs	r3, #2
 8003726:	e066      	b.n	80037f6 <HAL_DMA_Start_IT+0xee>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d155      	bne.n	80037e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f8fb 	bl	800395c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 020e 	orr.w	r2, r2, #14
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e00f      	b.n	80037a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0204 	bic.w	r2, r2, #4
 800378e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 020a 	orr.w	r2, r2, #10
 800379e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e005      	b.n	80037f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
 80037f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2204      	movs	r2, #4
 8003820:	409a      	lsls	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d026      	beq.n	8003878 <HAL_DMA_IRQHandler+0x7a>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d021      	beq.n	8003878 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0204 	bic.w	r2, r2, #4
 8003850:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	f003 021f 	and.w	r2, r3, #31
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	2104      	movs	r1, #4
 8003860:	fa01 f202 	lsl.w	r2, r1, r2
 8003864:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	2b00      	cmp	r3, #0
 800386c:	d071      	beq.n	8003952 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003876:	e06c      	b.n	8003952 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2202      	movs	r2, #2
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02e      	beq.n	80038ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d029      	beq.n	80038ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 020a 	bic.w	r2, r2, #10
 80038b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	2102      	movs	r1, #2
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d038      	beq.n	8003952 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038e8:	e033      	b.n	8003952 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2208      	movs	r2, #8
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02a      	beq.n	8003954 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d025      	beq.n	8003954 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 020e 	bic.w	r2, r2, #14
 8003916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391c:	f003 021f 	and.w	r2, r3, #31
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003952:	bf00      	nop
 8003954:	bf00      	nop
}
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003972:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003984:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	f003 021f 	and.w	r2, r3, #31
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	2101      	movs	r1, #1
 8003994:	fa01 f202 	lsl.w	r2, r1, r2
 8003998:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d108      	bne.n	80039bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039ba:	e007      	b.n	80039cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d802      	bhi.n	80039f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80039ec:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	e001      	b.n	80039f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039f4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	3b08      	subs	r3, #8
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	009a      	lsls	r2, r3, #2
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a0b      	ldr	r2, [pc, #44]	@ (8003a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40020407 	.word	0x40020407
 8003a44:	40020800 	.word	0x40020800
 8003a48:	40020820 	.word	0x40020820
 8003a4c:	cccccccd 	.word	0xcccccccd
 8003a50:	40020880 	.word	0x40020880

08003a54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a08      	ldr	r2, [pc, #32]	@ (8003a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a76:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	1000823f 	.word	0x1000823f
 8003a98:	40020940 	.word	0x40020940

08003a9c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e147      	b.n	8003d3e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fe1a 	bl	80016fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0210 	bic.w	r2, r2, #16
 8003ad6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad8:	f7fe f844 	bl	8001b64 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ade:	e012      	b.n	8003b06 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ae0:	f7fe f840 	bl	8001b64 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b0a      	cmp	r3, #10
 8003aec:	d90b      	bls.n	8003b06 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	f043 0201 	orr.w	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e11b      	b.n	8003d3e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d0e5      	beq.n	8003ae0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b24:	f7fe f81e 	bl	8001b64 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b2a:	e012      	b.n	8003b52 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b2c:	f7fe f81a 	bl	8001b64 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b0a      	cmp	r3, #10
 8003b38:	d90b      	bls.n	8003b52 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0f5      	b.n	8003d3e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0e5      	beq.n	8003b2c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0202 	orr.w	r2, r2, #2
 8003b6e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a74      	ldr	r2, [pc, #464]	@ (8003d48 <HAL_FDCAN_Init+0x2ac>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d103      	bne.n	8003b82 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003b7a:	4a74      	ldr	r2, [pc, #464]	@ (8003d4c <HAL_FDCAN_Init+0x2b0>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7c1b      	ldrb	r3, [r3, #16]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d108      	bne.n	8003b9c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b98:	619a      	str	r2, [r3, #24]
 8003b9a:	e007      	b.n	8003bac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003baa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7c5b      	ldrb	r3, [r3, #17]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d108      	bne.n	8003bc6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bc2:	619a      	str	r2, [r3, #24]
 8003bc4:	e007      	b.n	8003bd6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bd4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7c9b      	ldrb	r3, [r3, #18]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d108      	bne.n	8003bf0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bec:	619a      	str	r2, [r3, #24]
 8003bee:	e007      	b.n	8003c00 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bfe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003c24:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0210 	bic.w	r2, r2, #16
 8003c34:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0204 	orr.w	r2, r2, #4
 8003c4c:	619a      	str	r2, [r3, #24]
 8003c4e:	e02c      	b.n	8003caa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d028      	beq.n	8003caa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d01c      	beq.n	8003c9a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c6e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0210 	orr.w	r2, r2, #16
 8003c7e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d110      	bne.n	8003caa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0220 	orr.w	r2, r2, #32
 8003c96:	619a      	str	r2, [r3, #24]
 8003c98:	e007      	b.n	8003caa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0220 	orr.w	r2, r2, #32
 8003ca8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cc2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cd2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cd4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cde:	d115      	bne.n	8003d0c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	3b01      	subs	r3, #1
 8003cec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003cee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003cf8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	3b01      	subs	r3, #1
 8003d02:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d08:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d0a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fb0e 	bl	8004344 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40006400 	.word	0x40006400
 8003d4c:	40006500 	.word	0x40006500

08003d50 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d110      	bne.n	8003d86 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e006      	b.n	8003d94 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8a:	f043 0204 	orr.w	r2, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
  }
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d12c      	bne.n	8003e12 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e023      	b.n	8003e20 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fafe 	bl	80043f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003e00:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003e04:	2201      	movs	r2, #1
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e006      	b.n	8003e20 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e16:	f043 0208 	orr.w	r2, r3, #8
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
  }
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e3a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d003      	beq.n	8003e4a <HAL_FDCAN_ActivateNotification+0x22>
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	f040 80c8 	bne.w	8003fda <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03b      	beq.n	8003ede <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d031      	beq.n	8003ede <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d027      	beq.n	8003ede <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01d      	beq.n	8003ede <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d013      	beq.n	8003ede <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d107      	bne.n	8003eee <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d13b      	bne.n	8003f7a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d131      	bne.n	8003f7a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d127      	bne.n	8003f7a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11d      	bne.n	8003f7a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d004      	beq.n	8003f52 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d113      	bne.n	8003f7a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0202 	orr.w	r2, r2, #2
 8003f88:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e006      	b.n	8003fe8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fde:	f043 0202 	orr.w	r2, r3, #2
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	@ 0x30
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004002:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004010:	4013      	ands	r3, r2
 8004012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004028:	4013      	ands	r3, r2
 800402a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	4013      	ands	r3, r2
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800404e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	6a3a      	ldr	r2, [r7, #32]
 8004058:	4013      	ands	r3, r2
 800405a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004062:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004066:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	4013      	ands	r3, r2
 8004072:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004082:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2240      	movs	r2, #64	@ 0x40
 80040a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f92d 	bl	8004304 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01a      	beq.n	80040ec <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d014      	beq.n	80040ec <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040ca:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80040e4:	6939      	ldr	r1, [r7, #16]
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8ed 	bl	80042c6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80040ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80040fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8ac 	bl	800425a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800410e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8ac 	bl	8004270 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004126:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8ac 	bl	8004286 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	0a5b      	lsrs	r3, r3, #9
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	0a5b      	lsrs	r3, r3, #9
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800414e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8a3 	bl	800429c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	09db      	lsrs	r3, r3, #7
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	09db      	lsrs	r3, r3, #7
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004176:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4013      	ands	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2280      	movs	r2, #128	@ 0x80
 800418c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f88d 	bl	80042b0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	0b5b      	lsrs	r3, r3, #13
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	0b5b      	lsrs	r3, r3, #13
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f88f 	bl	80042dc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	0bdb      	lsrs	r3, r3, #15
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	0bdb      	lsrs	r3, r3, #15
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80041de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f885 	bl	80042f0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	0b9b      	lsrs	r3, r3, #14
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d010      	beq.n	8004214 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	0b9b      	lsrs	r3, r3, #14
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004206:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004222:	69f9      	ldr	r1, [r7, #28]
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f881 	bl	800432c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f863 	bl	8004318 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004252:	bf00      	nop
 8004254:	3730      	adds	r7, #48	@ 0x30
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800434c:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800434e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800435e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004366:	041a      	lsls	r2, r3, #16
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004384:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438c:	061a      	lsls	r2, r3, #24
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e005      	b.n	80043d2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3304      	adds	r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3f3      	bcc.n	80043c6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	4000a400 	.word	0x4000a400

080043f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	@ 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800440e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004416:	4313      	orrs	r3, r2
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e00a      	b.n	8004432 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004424:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800442a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800442c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004430:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800443c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004442:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004448:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	3304      	adds	r3, #4
 8004470:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	3304      	adds	r3, #4
 800447c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e020      	b.n	80044c6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3303      	adds	r3, #3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3302      	adds	r3, #2
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	440b      	add	r3, r1
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800449c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	3301      	adds	r3, #1
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	440b      	add	r3, r1
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80044aa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	440a      	add	r2, r1
 80044b2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80044b4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3304      	adds	r3, #4
 80044be:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3304      	adds	r3, #4
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	4a06      	ldr	r2, [pc, #24]	@ (80044e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	461a      	mov	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d3d6      	bcc.n	8004484 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	3724      	adds	r7, #36	@ 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	08006308 	.word	0x08006308

080044e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044f6:	e15a      	b.n	80047ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2101      	movs	r1, #1
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 814c 	beq.w	80047a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d005      	beq.n	8004528 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004524:	2b02      	cmp	r3, #2
 8004526:	d130      	bne.n	800458a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800455e:	2201      	movs	r2, #1
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0201 	and.w	r2, r3, #1
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b03      	cmp	r3, #3
 8004594:	d017      	beq.n	80045c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	2203      	movs	r2, #3
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d123      	bne.n	800461a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	08da      	lsrs	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3208      	adds	r2, #8
 80045da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	220f      	movs	r2, #15
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	08da      	lsrs	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3208      	adds	r2, #8
 8004614:	6939      	ldr	r1, [r7, #16]
 8004616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	2203      	movs	r2, #3
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0203 	and.w	r2, r3, #3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80a6 	beq.w	80047a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465c:	4b5b      	ldr	r3, [pc, #364]	@ (80047cc <HAL_GPIO_Init+0x2e4>)
 800465e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004660:	4a5a      	ldr	r2, [pc, #360]	@ (80047cc <HAL_GPIO_Init+0x2e4>)
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	6613      	str	r3, [r2, #96]	@ 0x60
 8004668:	4b58      	ldr	r3, [pc, #352]	@ (80047cc <HAL_GPIO_Init+0x2e4>)
 800466a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004674:	4a56      	ldr	r2, [pc, #344]	@ (80047d0 <HAL_GPIO_Init+0x2e8>)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	3302      	adds	r3, #2
 800467c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	220f      	movs	r2, #15
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800469e:	d01f      	beq.n	80046e0 <HAL_GPIO_Init+0x1f8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a4c      	ldr	r2, [pc, #304]	@ (80047d4 <HAL_GPIO_Init+0x2ec>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d019      	beq.n	80046dc <HAL_GPIO_Init+0x1f4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a4b      	ldr	r2, [pc, #300]	@ (80047d8 <HAL_GPIO_Init+0x2f0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_GPIO_Init+0x1f0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a4a      	ldr	r2, [pc, #296]	@ (80047dc <HAL_GPIO_Init+0x2f4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00d      	beq.n	80046d4 <HAL_GPIO_Init+0x1ec>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a49      	ldr	r2, [pc, #292]	@ (80047e0 <HAL_GPIO_Init+0x2f8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d007      	beq.n	80046d0 <HAL_GPIO_Init+0x1e8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a48      	ldr	r2, [pc, #288]	@ (80047e4 <HAL_GPIO_Init+0x2fc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_GPIO_Init+0x1e4>
 80046c8:	2305      	movs	r3, #5
 80046ca:	e00a      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046cc:	2306      	movs	r3, #6
 80046ce:	e008      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046d0:	2304      	movs	r3, #4
 80046d2:	e006      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046d4:	2303      	movs	r3, #3
 80046d6:	e004      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046d8:	2302      	movs	r3, #2
 80046da:	e002      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_GPIO_Init+0x1fa>
 80046e0:	2300      	movs	r3, #0
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	f002 0203 	and.w	r2, r2, #3
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	4093      	lsls	r3, r2
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f2:	4937      	ldr	r1, [pc, #220]	@ (80047d0 <HAL_GPIO_Init+0x2e8>)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	3302      	adds	r3, #2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004700:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	43db      	mvns	r3, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4013      	ands	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004724:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	43db      	mvns	r3, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800474e:	4a26      	ldr	r2, [pc, #152]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004754:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004778:	4a1b      	ldr	r2, [pc, #108]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800477e:	4b1a      	ldr	r3, [pc, #104]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047a2:	4a11      	ldr	r2, [pc, #68]	@ (80047e8 <HAL_GPIO_Init+0x300>)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	3301      	adds	r3, #1
 80047ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f47f ae9d 	bne.w	80044f8 <HAL_GPIO_Init+0x10>
  }
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40010000 	.word	0x40010000
 80047d4:	48000400 	.word	0x48000400
 80047d8:	48000800 	.word	0x48000800
 80047dc:	48000c00 	.word	0x48000c00
 80047e0:	48001000 	.word	0x48001000
 80047e4:	48001400 	.word	0x48001400
 80047e8:	40010400 	.word	0x40010400

080047ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
 80047f8:	4613      	mov	r3, r2
 80047fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047fc:	787b      	ldrb	r3, [r7, #1]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004802:	887a      	ldrh	r2, [r7, #2]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004808:	e002      	b.n	8004810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4013      	ands	r3, r2
 8004834:	041a      	lsls	r2, r3, #16
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	43d9      	mvns	r1, r3
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	400b      	ands	r3, r1
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d141      	bne.n	80048e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800485e:	4b4b      	ldr	r3, [pc, #300]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486a:	d131      	bne.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800486c:	4b47      	ldr	r3, [pc, #284]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004872:	4a46      	ldr	r2, [pc, #280]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800487c:	4b43      	ldr	r3, [pc, #268]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004884:	4a41      	ldr	r2, [pc, #260]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800488a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800488c:	4b40      	ldr	r3, [pc, #256]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2232      	movs	r2, #50	@ 0x32
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	4a3f      	ldr	r2, [pc, #252]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a2:	e002      	b.n	80048aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048aa:	4b38      	ldr	r3, [pc, #224]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b6:	d102      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f2      	bne.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048be:	4b33      	ldr	r3, [pc, #204]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ca:	d158      	bne.n	800497e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e057      	b.n	8004980 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d0:	4b2e      	ldr	r3, [pc, #184]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d6:	4a2d      	ldr	r2, [pc, #180]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048e0:	e04d      	b.n	800497e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e8:	d141      	bne.n	800496e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ea:	4b28      	ldr	r3, [pc, #160]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f6:	d131      	bne.n	800495c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048f8:	4b24      	ldr	r3, [pc, #144]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fe:	4a23      	ldr	r2, [pc, #140]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004904:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004908:	4b20      	ldr	r3, [pc, #128]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004910:	4a1e      	ldr	r2, [pc, #120]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004918:	4b1d      	ldr	r3, [pc, #116]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2232      	movs	r2, #50	@ 0x32
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	4a1c      	ldr	r2, [pc, #112]	@ (8004994 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	0c9b      	lsrs	r3, r3, #18
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800492e:	e002      	b.n	8004936 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3b01      	subs	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004936:	4b15      	ldr	r3, [pc, #84]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004942:	d102      	bne.n	800494a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f2      	bne.n	8004930 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800494a:	4b10      	ldr	r3, [pc, #64]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004956:	d112      	bne.n	800497e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e011      	b.n	8004980 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800495c:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004962:	4a0a      	ldr	r2, [pc, #40]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800496c:	e007      	b.n	800497e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800496e:	4b07      	ldr	r3, [pc, #28]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004976:	4a05      	ldr	r2, [pc, #20]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800497c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40007000 	.word	0x40007000
 8004990:	20000000 	.word	0x20000000
 8004994:	431bde83 	.word	0x431bde83

08004998 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800499c:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4a04      	ldr	r2, [pc, #16]	@ (80049b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049a6:	6093      	str	r3, [r2, #8]
}
 80049a8:	bf00      	nop
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40007000 	.word	0x40007000

080049b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e2fe      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d075      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049d6:	4b97      	ldr	r3, [pc, #604]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e0:	4b94      	ldr	r3, [pc, #592]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b0c      	cmp	r3, #12
 80049ee:	d102      	bne.n	80049f6 <HAL_RCC_OscConfig+0x3e>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d002      	beq.n	80049fc <HAL_RCC_OscConfig+0x44>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	4b8d      	ldr	r3, [pc, #564]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d05b      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x108>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d157      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e2d9      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a1c:	d106      	bne.n	8004a2c <HAL_RCC_OscConfig+0x74>
 8004a1e:	4b85      	ldr	r3, [pc, #532]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a84      	ldr	r2, [pc, #528]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e01d      	b.n	8004a68 <HAL_RCC_OscConfig+0xb0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x98>
 8004a36:	4b7f      	ldr	r3, [pc, #508]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b7c      	ldr	r3, [pc, #496]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a7b      	ldr	r2, [pc, #492]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e00b      	b.n	8004a68 <HAL_RCC_OscConfig+0xb0>
 8004a50:	4b78      	ldr	r3, [pc, #480]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a77      	ldr	r2, [pc, #476]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b75      	ldr	r3, [pc, #468]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a74      	ldr	r2, [pc, #464]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fd f878 	bl	8001b64 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fd f874 	bl	8001b64 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	@ 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e29e      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0xc0>
 8004a96:	e014      	b.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fd f864 	bl	8001b64 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fd f860 	bl	8001b64 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	@ 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e28a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ab2:	4b60      	ldr	r3, [pc, #384]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xe8>
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d075      	beq.n	8004bba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ace:	4b59      	ldr	r3, [pc, #356]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad8:	4b56      	ldr	r3, [pc, #344]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	d102      	bne.n	8004aee <HAL_RCC_OscConfig+0x136>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d002      	beq.n	8004af4 <HAL_RCC_OscConfig+0x13c>
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d11f      	bne.n	8004b34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af4:	4b4f      	ldr	r3, [pc, #316]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCC_OscConfig+0x154>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e25d      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0c:	4b49      	ldr	r3, [pc, #292]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	061b      	lsls	r3, r3, #24
 8004b1a:	4946      	ldr	r1, [pc, #280]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b20:	4b45      	ldr	r3, [pc, #276]	@ (8004c38 <HAL_RCC_OscConfig+0x280>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fc ffd1 	bl	8001acc <HAL_InitTick>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d043      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e249      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d023      	beq.n	8004b84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a3c      	ldr	r2, [pc, #240]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd f80c 	bl	8001b64 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fd f808 	bl	8001b64 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e232      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b62:	4b34      	ldr	r3, [pc, #208]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	492d      	ldr	r1, [pc, #180]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
 8004b82:	e01a      	b.n	8004bba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b84:	4b2b      	ldr	r3, [pc, #172]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2a      	ldr	r2, [pc, #168]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fc ffe8 	bl	8001b64 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b98:	f7fc ffe4 	bl	8001b64 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e20e      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004baa:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x1e0>
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d041      	beq.n	8004c4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bce:	4b19      	ldr	r3, [pc, #100]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd4:	4a17      	ldr	r2, [pc, #92]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bde:	f7fc ffc1 	bl	8001b64 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be6:	f7fc ffbd 	bl	8001b64 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1e7      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0ef      	beq.n	8004be6 <HAL_RCC_OscConfig+0x22e>
 8004c06:	e020      	b.n	8004c4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c08:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0e:	4a09      	ldr	r2, [pc, #36]	@ (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fc ffa4 	bl	8001b64 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c1e:	e00d      	b.n	8004c3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fc ffa0 	bl	8001b64 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d906      	bls.n	8004c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e1ca      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ea      	bne.n	8004c20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a6 	beq.w	8004da4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c5c:	4b84      	ldr	r3, [pc, #528]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_OscConfig+0x2b4>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x2b6>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c72:	4b7f      	ldr	r3, [pc, #508]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c76:	4a7e      	ldr	r2, [pc, #504]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8e:	4b79      	ldr	r3, [pc, #484]	@ (8004e74 <HAL_RCC_OscConfig+0x4bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d118      	bne.n	8004ccc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c9a:	4b76      	ldr	r3, [pc, #472]	@ (8004e74 <HAL_RCC_OscConfig+0x4bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a75      	ldr	r2, [pc, #468]	@ (8004e74 <HAL_RCC_OscConfig+0x4bc>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca6:	f7fc ff5d 	bl	8001b64 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cae:	f7fc ff59 	bl	8001b64 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e183      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8004e74 <HAL_RCC_OscConfig+0x4bc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d108      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x32e>
 8004cd4:	4b66      	ldr	r3, [pc, #408]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cda:	4a65      	ldr	r2, [pc, #404]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce4:	e024      	b.n	8004d30 <HAL_RCC_OscConfig+0x378>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d110      	bne.n	8004d10 <HAL_RCC_OscConfig+0x358>
 8004cee:	4b60      	ldr	r3, [pc, #384]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf4:	4a5e      	ldr	r2, [pc, #376]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004cf6:	f043 0304 	orr.w	r3, r3, #4
 8004cfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d04:	4a5a      	ldr	r2, [pc, #360]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d0e:	e00f      	b.n	8004d30 <HAL_RCC_OscConfig+0x378>
 8004d10:	4b57      	ldr	r3, [pc, #348]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d16:	4a56      	ldr	r2, [pc, #344]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d20:	4b53      	ldr	r3, [pc, #332]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	4a52      	ldr	r2, [pc, #328]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d016      	beq.n	8004d66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fc ff14 	bl	8001b64 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3e:	e00a      	b.n	8004d56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d40:	f7fc ff10 	bl	8001b64 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e138      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d56:	4b46      	ldr	r3, [pc, #280]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ed      	beq.n	8004d40 <HAL_RCC_OscConfig+0x388>
 8004d64:	e015      	b.n	8004d92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d66:	f7fc fefd 	bl	8001b64 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fc fef9 	bl	8001b64 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e121      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d84:	4b3a      	ldr	r3, [pc, #232]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ed      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d92:	7ffb      	ldrb	r3, [r7, #31]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b35      	ldr	r3, [pc, #212]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9c:	4a34      	ldr	r2, [pc, #208]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0320 	and.w	r3, r3, #32
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d03c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004db8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fc fecc 	bl	8001b64 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd0:	f7fc fec8 	bl	8001b64 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e0f2      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004de2:	4b23      	ldr	r3, [pc, #140]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ef      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x418>
 8004df0:	e01b      	b.n	8004e2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004df2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fc feaf 	bl	8001b64 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0a:	f7fc feab 	bl	8001b64 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e0d5      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e1c:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ef      	bne.n	8004e0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 80c9 	beq.w	8004fc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e34:	4b0e      	ldr	r3, [pc, #56]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	f000 8083 	beq.w	8004f48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d15e      	bne.n	8004f08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a08      	ldr	r2, [pc, #32]	@ (8004e70 <HAL_RCC_OscConfig+0x4b8>)
 8004e50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fc fe85 	bl	8001b64 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e5c:	e00c      	b.n	8004e78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5e:	f7fc fe81 	bl	8001b64 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d905      	bls.n	8004e78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0ab      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e78:	4b55      	ldr	r3, [pc, #340]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ec      	bne.n	8004e5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e84:	4b52      	ldr	r3, [pc, #328]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	4b52      	ldr	r3, [pc, #328]	@ (8004fd4 <HAL_RCC_OscConfig+0x61c>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6a11      	ldr	r1, [r2, #32]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e94:	3a01      	subs	r2, #1
 8004e96:	0112      	lsls	r2, r2, #4
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e9e:	0212      	lsls	r2, r2, #8
 8004ea0:	4311      	orrs	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ea6:	0852      	lsrs	r2, r2, #1
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	0552      	lsls	r2, r2, #21
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004eb2:	0852      	lsrs	r2, r2, #1
 8004eb4:	3a01      	subs	r2, #1
 8004eb6:	0652      	lsls	r2, r2, #25
 8004eb8:	4311      	orrs	r1, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ebe:	06d2      	lsls	r2, r2, #27
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	4943      	ldr	r1, [pc, #268]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec8:	4b41      	ldr	r3, [pc, #260]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a40      	ldr	r2, [pc, #256]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ede:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fc fe40 	bl	8001b64 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fc fe3c 	bl	8001b64 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e066      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efa:	4b35      	ldr	r3, [pc, #212]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x530>
 8004f06:	e05e      	b.n	8004fc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f08:	4b31      	ldr	r3, [pc, #196]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a30      	ldr	r2, [pc, #192]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fc fe26 	bl	8001b64 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1c:	f7fc fe22 	bl	8001b64 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e04c      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2e:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f3a:	4b25      	ldr	r3, [pc, #148]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	4924      	ldr	r1, [pc, #144]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004f40:	4b25      	ldr	r3, [pc, #148]	@ (8004fd8 <HAL_RCC_OscConfig+0x620>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]
 8004f46:	e03e      	b.n	8004fc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e039      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f54:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd0 <HAL_RCC_OscConfig+0x618>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f003 0203 	and.w	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d12c      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	3b01      	subs	r3, #1
 8004f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d123      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d11b      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d113      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d109      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	019f800c 	.word	0x019f800c
 8004fd8:	feeefffc 	.word	0xfeeefffc

08004fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e11e      	b.n	8005232 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b91      	ldr	r3, [pc, #580]	@ (800523c <HAL_RCC_ClockConfig+0x260>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d910      	bls.n	8005024 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b8e      	ldr	r3, [pc, #568]	@ (800523c <HAL_RCC_ClockConfig+0x260>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 020f 	bic.w	r2, r3, #15
 800500a:	498c      	ldr	r1, [pc, #560]	@ (800523c <HAL_RCC_ClockConfig+0x260>)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	4313      	orrs	r3, r2
 8005010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b8a      	ldr	r3, [pc, #552]	@ (800523c <HAL_RCC_ClockConfig+0x260>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e106      	b.n	8005232 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d073      	beq.n	8005118 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d129      	bne.n	800508c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005038:	4b81      	ldr	r3, [pc, #516]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0f4      	b.n	8005232 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005048:	f000 f99e 	bl	8005388 <RCC_GetSysClockFreqFromPLLSource>
 800504c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4a7c      	ldr	r2, [pc, #496]	@ (8005244 <HAL_RCC_ClockConfig+0x268>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d93f      	bls.n	80050d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005056:	4b7a      	ldr	r3, [pc, #488]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800506a:	2b00      	cmp	r3, #0
 800506c:	d033      	beq.n	80050d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005072:	2b00      	cmp	r3, #0
 8005074:	d12f      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005076:	4b72      	ldr	r3, [pc, #456]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800507e:	4a70      	ldr	r2, [pc, #448]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005084:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005086:	2380      	movs	r3, #128	@ 0x80
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e024      	b.n	80050d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005094:	4b6a      	ldr	r3, [pc, #424]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d109      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0c6      	b.n	8005232 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a4:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0be      	b.n	8005232 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050b4:	f000 f8ce 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4a61      	ldr	r2, [pc, #388]	@ (8005244 <HAL_RCC_ClockConfig+0x268>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d909      	bls.n	80050d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050ca:	4a5d      	ldr	r2, [pc, #372]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 80050cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050d2:	2380      	movs	r3, #128	@ 0x80
 80050d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050d6:	4b5a      	ldr	r3, [pc, #360]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4957      	ldr	r1, [pc, #348]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e8:	f7fc fd3c 	bl	8001b64 <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f0:	f7fc fd38 	bl	8001b64 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e095      	b.n	8005232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	4b4e      	ldr	r3, [pc, #312]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 020c 	and.w	r2, r3, #12
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	429a      	cmp	r2, r3
 8005116:	d1eb      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d023      	beq.n	800516c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005130:	4b43      	ldr	r3, [pc, #268]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a42      	ldr	r2, [pc, #264]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005136:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800513a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005148:	4b3d      	ldr	r3, [pc, #244]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005150:	4a3b      	ldr	r2, [pc, #236]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005158:	4b39      	ldr	r3, [pc, #228]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4936      	ldr	r1, [pc, #216]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
 800516a:	e008      	b.n	800517e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b80      	cmp	r3, #128	@ 0x80
 8005170:	d105      	bne.n	800517e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005172:	4b33      	ldr	r3, [pc, #204]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	4a32      	ldr	r2, [pc, #200]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005178:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800517c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800517e:	4b2f      	ldr	r3, [pc, #188]	@ (800523c <HAL_RCC_ClockConfig+0x260>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d21d      	bcs.n	80051c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518c:	4b2b      	ldr	r3, [pc, #172]	@ (800523c <HAL_RCC_ClockConfig+0x260>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 020f 	bic.w	r2, r3, #15
 8005194:	4929      	ldr	r1, [pc, #164]	@ (800523c <HAL_RCC_ClockConfig+0x260>)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	4313      	orrs	r3, r2
 800519a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800519c:	f7fc fce2 	bl	8001b64 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7fc fcde 	bl	8001b64 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e03b      	b.n	8005232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_RCC_ClockConfig+0x260>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d1ed      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4917      	ldr	r1, [pc, #92]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f2:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	490f      	ldr	r1, [pc, #60]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005206:	f000 f825 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 800520a:	4602      	mov	r2, r0
 800520c:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <HAL_RCC_ClockConfig+0x264>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	490c      	ldr	r1, [pc, #48]	@ (8005248 <HAL_RCC_ClockConfig+0x26c>)
 8005218:	5ccb      	ldrb	r3, [r1, r3]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	4a0a      	ldr	r2, [pc, #40]	@ (800524c <HAL_RCC_ClockConfig+0x270>)
 8005224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005226:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <HAL_RCC_ClockConfig+0x274>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fc fc4e 	bl	8001acc <HAL_InitTick>
 8005230:	4603      	mov	r3, r0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40022000 	.word	0x40022000
 8005240:	40021000 	.word	0x40021000
 8005244:	04c4b400 	.word	0x04c4b400
 8005248:	080062f0 	.word	0x080062f0
 800524c:	20000000 	.word	0x20000000
 8005250:	2000000c 	.word	0x2000000c

08005254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800525a:	4b2c      	ldr	r3, [pc, #176]	@ (800530c <HAL_RCC_GetSysClockFreq+0xb8>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	2b04      	cmp	r3, #4
 8005264:	d102      	bne.n	800526c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005266:	4b2a      	ldr	r3, [pc, #168]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e047      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800526c:	4b27      	ldr	r3, [pc, #156]	@ (800530c <HAL_RCC_GetSysClockFreq+0xb8>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b08      	cmp	r3, #8
 8005276:	d102      	bne.n	800527e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005278:	4b26      	ldr	r3, [pc, #152]	@ (8005314 <HAL_RCC_GetSysClockFreq+0xc0>)
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	e03e      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800527e:	4b23      	ldr	r3, [pc, #140]	@ (800530c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b0c      	cmp	r3, #12
 8005288:	d136      	bne.n	80052f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800528a:	4b20      	ldr	r3, [pc, #128]	@ (800530c <HAL_RCC_GetSysClockFreq+0xb8>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005294:	4b1d      	ldr	r3, [pc, #116]	@ (800530c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	3301      	adds	r3, #1
 80052a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d10c      	bne.n	80052c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005314 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	4a16      	ldr	r2, [pc, #88]	@ (800530c <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b2:	68d2      	ldr	r2, [r2, #12]
 80052b4:	0a12      	lsrs	r2, r2, #8
 80052b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	617b      	str	r3, [r7, #20]
      break;
 80052c0:	e00c      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052c2:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	4a10      	ldr	r2, [pc, #64]	@ (800530c <HAL_RCC_GetSysClockFreq+0xb8>)
 80052cc:	68d2      	ldr	r2, [r2, #12]
 80052ce:	0a12      	lsrs	r2, r2, #8
 80052d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
      break;
 80052da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052dc:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <HAL_RCC_GetSysClockFreq+0xb8>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	0e5b      	lsrs	r3, r3, #25
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	3301      	adds	r3, #1
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	e001      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052fc:	693b      	ldr	r3, [r7, #16]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
 8005310:	00f42400 	.word	0x00f42400
 8005314:	007a1200 	.word	0x007a1200

08005318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800531c:	4b03      	ldr	r3, [pc, #12]	@ (800532c <HAL_RCC_GetHCLKFreq+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000000 	.word	0x20000000

08005330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005334:	f7ff fff0 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	4904      	ldr	r1, [pc, #16]	@ (8005358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000
 8005358:	08006300 	.word	0x08006300

0800535c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005360:	f7ff ffda 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	0adb      	lsrs	r3, r3, #11
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	4904      	ldr	r1, [pc, #16]	@ (8005384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005372:	5ccb      	ldrb	r3, [r1, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000
 8005384:	08006300 	.word	0x08006300

08005388 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800538e:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005398:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d10c      	bne.n	80053c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ac:	4a17      	ldr	r2, [pc, #92]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	4a14      	ldr	r2, [pc, #80]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b6:	68d2      	ldr	r2, [r2, #12]
 80053b8:	0a12      	lsrs	r2, r2, #8
 80053ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	617b      	str	r3, [r7, #20]
    break;
 80053c4:	e00c      	b.n	80053e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c6:	4a12      	ldr	r2, [pc, #72]	@ (8005410 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053d0:	68d2      	ldr	r2, [r2, #12]
 80053d2:	0a12      	lsrs	r2, r2, #8
 80053d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
    break;
 80053de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053e0:	4b09      	ldr	r3, [pc, #36]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	0e5b      	lsrs	r3, r3, #25
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	3301      	adds	r3, #1
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053fa:	687b      	ldr	r3, [r7, #4]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40021000 	.word	0x40021000
 800540c:	007a1200 	.word	0x007a1200
 8005410:	00f42400 	.word	0x00f42400

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800541c:	2300      	movs	r3, #0
 800541e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005420:	2300      	movs	r3, #0
 8005422:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8098 	beq.w	8005562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005432:	2300      	movs	r3, #0
 8005434:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005436:	4b43      	ldr	r3, [pc, #268]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10d      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005442:	4b40      	ldr	r3, [pc, #256]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005446:	4a3f      	ldr	r2, [pc, #252]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800544c:	6593      	str	r3, [r2, #88]	@ 0x58
 800544e:	4b3d      	ldr	r3, [pc, #244]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800545a:	2301      	movs	r3, #1
 800545c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800545e:	4b3a      	ldr	r3, [pc, #232]	@ (8005548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a39      	ldr	r2, [pc, #228]	@ (8005548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800546a:	f7fc fb7b 	bl	8001b64 <HAL_GetTick>
 800546e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005470:	e009      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005472:	f7fc fb77 	bl	8001b64 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d902      	bls.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	74fb      	strb	r3, [r7, #19]
        break;
 8005484:	e005      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005486:	4b30      	ldr	r3, [pc, #192]	@ (8005548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0ef      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005492:	7cfb      	ldrb	r3, [r7, #19]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d159      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005498:	4b2a      	ldr	r3, [pc, #168]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01e      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d019      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054b4:	4b23      	ldr	r3, [pc, #140]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054c0:	4b20      	ldr	r3, [pc, #128]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d016      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f2:	f7fc fb37 	bl	8001b64 <HAL_GetTick>
 80054f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f8:	e00b      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fa:	f7fc fb33 	bl	8001b64 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005508:	4293      	cmp	r3, r2
 800550a:	d902      	bls.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	74fb      	strb	r3, [r7, #19]
            break;
 8005510:	e006      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005512:	4b0c      	ldr	r3, [pc, #48]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0ec      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005526:	4b07      	ldr	r3, [pc, #28]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	4903      	ldr	r1, [pc, #12]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800553c:	e008      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800553e:	7cfb      	ldrb	r3, [r7, #19]
 8005540:	74bb      	strb	r3, [r7, #18]
 8005542:	e005      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005544:	40021000 	.word	0x40021000
 8005548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005550:	7c7b      	ldrb	r3, [r7, #17]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005556:	4ba6      	ldr	r3, [pc, #664]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555a:	4aa5      	ldr	r2, [pc, #660]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005560:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800556e:	4ba0      	ldr	r3, [pc, #640]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	f023 0203 	bic.w	r2, r3, #3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	499c      	ldr	r1, [pc, #624]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005590:	4b97      	ldr	r3, [pc, #604]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f023 020c 	bic.w	r2, r3, #12
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	4994      	ldr	r1, [pc, #592]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055b2:	4b8f      	ldr	r3, [pc, #572]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	498b      	ldr	r1, [pc, #556]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055d4:	4b86      	ldr	r3, [pc, #536]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	4983      	ldr	r1, [pc, #524]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055f6:	4b7e      	ldr	r3, [pc, #504]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	497a      	ldr	r1, [pc, #488]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005618:	4b75      	ldr	r3, [pc, #468]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	4972      	ldr	r1, [pc, #456]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800563a:	4b6d      	ldr	r3, [pc, #436]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005640:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	4969      	ldr	r1, [pc, #420]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800565c:	4b64      	ldr	r3, [pc, #400]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005662:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	4961      	ldr	r1, [pc, #388]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800567e:	4b5c      	ldr	r3, [pc, #368]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005684:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	4958      	ldr	r1, [pc, #352]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569c:	2b00      	cmp	r3, #0
 800569e:	d015      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056a0:	4b53      	ldr	r3, [pc, #332]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	4950      	ldr	r1, [pc, #320]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056be:	d105      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c0:	4b4b      	ldr	r3, [pc, #300]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4a4a      	ldr	r2, [pc, #296]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d015      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056d8:	4b45      	ldr	r3, [pc, #276]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	4942      	ldr	r1, [pc, #264]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f6:	d105      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f8:	4b3d      	ldr	r3, [pc, #244]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4a3c      	ldr	r2, [pc, #240]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005702:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d015      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005710:	4b37      	ldr	r3, [pc, #220]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005716:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	4934      	ldr	r1, [pc, #208]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800572e:	d105      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005730:	4b2f      	ldr	r3, [pc, #188]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4a2e      	ldr	r2, [pc, #184]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800573a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d015      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005748:	4b29      	ldr	r3, [pc, #164]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005756:	4926      	ldr	r1, [pc, #152]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005766:	d105      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005768:	4b21      	ldr	r3, [pc, #132]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a20      	ldr	r2, [pc, #128]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005772:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d015      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005780:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005786:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	4918      	ldr	r1, [pc, #96]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800579e:	d105      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a0:	4b13      	ldr	r3, [pc, #76]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4a12      	ldr	r2, [pc, #72]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057b8:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c6:	490a      	ldr	r1, [pc, #40]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d6:	d105      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057d8:	4b05      	ldr	r3, [pc, #20]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a04      	ldr	r2, [pc, #16]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000

080057f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e042      	b.n	800588c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580c:	2b00      	cmp	r3, #0
 800580e:	d106      	bne.n	800581e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f83b 	bl	8005894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2224      	movs	r2, #36	@ 0x24
 8005822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fafe 	bl	8005e40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f82f 	bl	80058a8 <UART_SetConfig>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e01b      	b.n	800588c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fb7d 	bl	8005f84 <UART_CheckIdleState>
 800588a:	4603      	mov	r3, r0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b08c      	sub	sp, #48	@ 0x30
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4bab      	ldr	r3, [pc, #684]	@ (8005b84 <UART_SetConfig+0x2dc>)
 80058d8:	4013      	ands	r3, r2
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4aa0      	ldr	r2, [pc, #640]	@ (8005b88 <UART_SetConfig+0x2e0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005910:	4313      	orrs	r3, r2
 8005912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800591e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005928:	430b      	orrs	r3, r1
 800592a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	f023 010f 	bic.w	r1, r3, #15
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a91      	ldr	r2, [pc, #580]	@ (8005b8c <UART_SetConfig+0x2e4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d125      	bne.n	8005998 <UART_SetConfig+0xf0>
 800594c:	4b90      	ldr	r3, [pc, #576]	@ (8005b90 <UART_SetConfig+0x2e8>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b03      	cmp	r3, #3
 8005958:	d81a      	bhi.n	8005990 <UART_SetConfig+0xe8>
 800595a:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <UART_SetConfig+0xb8>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005971 	.word	0x08005971
 8005964:	08005981 	.word	0x08005981
 8005968:	08005979 	.word	0x08005979
 800596c:	08005989 	.word	0x08005989
 8005970:	2301      	movs	r3, #1
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005976:	e0d6      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005978:	2302      	movs	r3, #2
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597e:	e0d2      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005980:	2304      	movs	r3, #4
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005986:	e0ce      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005988:	2308      	movs	r3, #8
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598e:	e0ca      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005990:	2310      	movs	r3, #16
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005996:	e0c6      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a7d      	ldr	r2, [pc, #500]	@ (8005b94 <UART_SetConfig+0x2ec>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d138      	bne.n	8005a14 <UART_SetConfig+0x16c>
 80059a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005b90 <UART_SetConfig+0x2e8>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a8:	f003 030c 	and.w	r3, r3, #12
 80059ac:	2b0c      	cmp	r3, #12
 80059ae:	d82d      	bhi.n	8005a0c <UART_SetConfig+0x164>
 80059b0:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <UART_SetConfig+0x110>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	08005a0d 	.word	0x08005a0d
 80059c0:	08005a0d 	.word	0x08005a0d
 80059c4:	08005a0d 	.word	0x08005a0d
 80059c8:	080059fd 	.word	0x080059fd
 80059cc:	08005a0d 	.word	0x08005a0d
 80059d0:	08005a0d 	.word	0x08005a0d
 80059d4:	08005a0d 	.word	0x08005a0d
 80059d8:	080059f5 	.word	0x080059f5
 80059dc:	08005a0d 	.word	0x08005a0d
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a05 	.word	0x08005a05
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f2:	e098      	b.n	8005b26 <UART_SetConfig+0x27e>
 80059f4:	2302      	movs	r3, #2
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fa:	e094      	b.n	8005b26 <UART_SetConfig+0x27e>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a02:	e090      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a0a:	e08c      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a12:	e088      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a5f      	ldr	r2, [pc, #380]	@ (8005b98 <UART_SetConfig+0x2f0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d125      	bne.n	8005a6a <UART_SetConfig+0x1c2>
 8005a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005b90 <UART_SetConfig+0x2e8>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a28:	2b30      	cmp	r3, #48	@ 0x30
 8005a2a:	d016      	beq.n	8005a5a <UART_SetConfig+0x1b2>
 8005a2c:	2b30      	cmp	r3, #48	@ 0x30
 8005a2e:	d818      	bhi.n	8005a62 <UART_SetConfig+0x1ba>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d00a      	beq.n	8005a4a <UART_SetConfig+0x1a2>
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d814      	bhi.n	8005a62 <UART_SetConfig+0x1ba>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <UART_SetConfig+0x19a>
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d008      	beq.n	8005a52 <UART_SetConfig+0x1aa>
 8005a40:	e00f      	b.n	8005a62 <UART_SetConfig+0x1ba>
 8005a42:	2300      	movs	r3, #0
 8005a44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a48:	e06d      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a50:	e069      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005a52:	2304      	movs	r3, #4
 8005a54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a58:	e065      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a60:	e061      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005a62:	2310      	movs	r3, #16
 8005a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a68:	e05d      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a4b      	ldr	r2, [pc, #300]	@ (8005b9c <UART_SetConfig+0x2f4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d125      	bne.n	8005ac0 <UART_SetConfig+0x218>
 8005a74:	4b46      	ldr	r3, [pc, #280]	@ (8005b90 <UART_SetConfig+0x2e8>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a80:	d016      	beq.n	8005ab0 <UART_SetConfig+0x208>
 8005a82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a84:	d818      	bhi.n	8005ab8 <UART_SetConfig+0x210>
 8005a86:	2b80      	cmp	r3, #128	@ 0x80
 8005a88:	d00a      	beq.n	8005aa0 <UART_SetConfig+0x1f8>
 8005a8a:	2b80      	cmp	r3, #128	@ 0x80
 8005a8c:	d814      	bhi.n	8005ab8 <UART_SetConfig+0x210>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <UART_SetConfig+0x1f0>
 8005a92:	2b40      	cmp	r3, #64	@ 0x40
 8005a94:	d008      	beq.n	8005aa8 <UART_SetConfig+0x200>
 8005a96:	e00f      	b.n	8005ab8 <UART_SetConfig+0x210>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a9e:	e042      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa6:	e03e      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aae:	e03a      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab6:	e036      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005abe:	e032      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a30      	ldr	r2, [pc, #192]	@ (8005b88 <UART_SetConfig+0x2e0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d12a      	bne.n	8005b20 <UART_SetConfig+0x278>
 8005aca:	4b31      	ldr	r3, [pc, #196]	@ (8005b90 <UART_SetConfig+0x2e8>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ad4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ad8:	d01a      	beq.n	8005b10 <UART_SetConfig+0x268>
 8005ada:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ade:	d81b      	bhi.n	8005b18 <UART_SetConfig+0x270>
 8005ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae4:	d00c      	beq.n	8005b00 <UART_SetConfig+0x258>
 8005ae6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aea:	d815      	bhi.n	8005b18 <UART_SetConfig+0x270>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <UART_SetConfig+0x250>
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af4:	d008      	beq.n	8005b08 <UART_SetConfig+0x260>
 8005af6:	e00f      	b.n	8005b18 <UART_SetConfig+0x270>
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005afe:	e012      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005b00:	2302      	movs	r3, #2
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b06:	e00e      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0e:	e00a      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005b10:	2308      	movs	r3, #8
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b16:	e006      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1e:	e002      	b.n	8005b26 <UART_SetConfig+0x27e>
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a17      	ldr	r2, [pc, #92]	@ (8005b88 <UART_SetConfig+0x2e0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	f040 80a8 	bne.w	8005c82 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d834      	bhi.n	8005ba4 <UART_SetConfig+0x2fc>
 8005b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <UART_SetConfig+0x298>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005ba5 	.word	0x08005ba5
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005ba5 	.word	0x08005ba5
 8005b50:	08005b73 	.word	0x08005b73
 8005b54:	08005ba5 	.word	0x08005ba5
 8005b58:	08005ba5 	.word	0x08005ba5
 8005b5c:	08005ba5 	.word	0x08005ba5
 8005b60:	08005b7b 	.word	0x08005b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7ff fbe4 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8005b68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b6a:	e021      	b.n	8005bb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <UART_SetConfig+0x2f8>)
 8005b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b70:	e01e      	b.n	8005bb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b72:	f7ff fb6f 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8005b76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b78:	e01a      	b.n	8005bb0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b80:	e016      	b.n	8005bb0 <UART_SetConfig+0x308>
 8005b82:	bf00      	nop
 8005b84:	cfff69f3 	.word	0xcfff69f3
 8005b88:	40008000 	.word	0x40008000
 8005b8c:	40013800 	.word	0x40013800
 8005b90:	40021000 	.word	0x40021000
 8005b94:	40004400 	.word	0x40004400
 8005b98:	40004800 	.word	0x40004800
 8005b9c:	40004c00 	.word	0x40004c00
 8005ba0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 812a 	beq.w	8005e0c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	4a9e      	ldr	r2, [pc, #632]	@ (8005e38 <UART_SetConfig+0x590>)
 8005bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d305      	bcc.n	8005be8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d903      	bls.n	8005bf0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bee:	e10d      	b.n	8005e0c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	60fa      	str	r2, [r7, #12]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	4a8e      	ldr	r2, [pc, #568]	@ (8005e38 <UART_SetConfig+0x590>)
 8005bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2200      	movs	r2, #0
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c12:	f7fa ff1f 	bl	8000a54 <__aeabi_uldivmod>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	020b      	lsls	r3, r1, #8
 8005c28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c2c:	0202      	lsls	r2, r0, #8
 8005c2e:	6979      	ldr	r1, [r7, #20]
 8005c30:	6849      	ldr	r1, [r1, #4]
 8005c32:	0849      	lsrs	r1, r1, #1
 8005c34:	2000      	movs	r0, #0
 8005c36:	460c      	mov	r4, r1
 8005c38:	4605      	mov	r5, r0
 8005c3a:	eb12 0804 	adds.w	r8, r2, r4
 8005c3e:	eb43 0905 	adc.w	r9, r3, r5
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	469a      	mov	sl, r3
 8005c4a:	4693      	mov	fp, r2
 8005c4c:	4652      	mov	r2, sl
 8005c4e:	465b      	mov	r3, fp
 8005c50:	4640      	mov	r0, r8
 8005c52:	4649      	mov	r1, r9
 8005c54:	f7fa fefe 	bl	8000a54 <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c66:	d308      	bcc.n	8005c7a <UART_SetConfig+0x3d2>
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c6e:	d204      	bcs.n	8005c7a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	60da      	str	r2, [r3, #12]
 8005c78:	e0c8      	b.n	8005e0c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c80:	e0c4      	b.n	8005e0c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c8a:	d167      	bne.n	8005d5c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d828      	bhi.n	8005ce6 <UART_SetConfig+0x43e>
 8005c94:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <UART_SetConfig+0x3f4>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc9 	.word	0x08005cc9
 8005ca4:	08005cd1 	.word	0x08005cd1
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd7 	.word	0x08005cd7
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005ce7 	.word	0x08005ce7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7ff fb36 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8005cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cc6:	e014      	b.n	8005cf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7ff fb48 	bl	800535c <HAL_RCC_GetPCLK2Freq>
 8005ccc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cce:	e010      	b.n	8005cf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e3c <UART_SetConfig+0x594>)
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7ff fabd 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8005cda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cdc:	e009      	b.n	8005cf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ce4:	e005      	b.n	8005cf2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8089 	beq.w	8005e0c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	4a4e      	ldr	r2, [pc, #312]	@ (8005e38 <UART_SetConfig+0x590>)
 8005d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d0c:	005a      	lsls	r2, r3, #1
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	441a      	add	r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	2b0f      	cmp	r3, #15
 8005d24:	d916      	bls.n	8005d54 <UART_SetConfig+0x4ac>
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2c:	d212      	bcs.n	8005d54 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f023 030f 	bic.w	r3, r3, #15
 8005d36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	8bfb      	ldrh	r3, [r7, #30]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	8bfa      	ldrh	r2, [r7, #30]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	e05b      	b.n	8005e0c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d5a:	e057      	b.n	8005e0c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d828      	bhi.n	8005db6 <UART_SetConfig+0x50e>
 8005d64:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <UART_SetConfig+0x4c4>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	08005db7 	.word	0x08005db7
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005db7 	.word	0x08005db7
 8005d84:	08005db7 	.word	0x08005db7
 8005d88:	08005db7 	.word	0x08005db7
 8005d8c:	08005daf 	.word	0x08005daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7ff face 	bl	8005330 <HAL_RCC_GetPCLK1Freq>
 8005d94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d96:	e014      	b.n	8005dc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7ff fae0 	bl	800535c <HAL_RCC_GetPCLK2Freq>
 8005d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d9e:	e010      	b.n	8005dc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da0:	4b26      	ldr	r3, [pc, #152]	@ (8005e3c <UART_SetConfig+0x594>)
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005da4:	e00d      	b.n	8005dc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da6:	f7ff fa55 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8005daa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dac:	e009      	b.n	8005dc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005db4:	e005      	b.n	8005dc2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005dc0:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d021      	beq.n	8005e0c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e38 <UART_SetConfig+0x590>)
 8005dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	441a      	add	r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	2b0f      	cmp	r3, #15
 8005df0:	d909      	bls.n	8005e06 <UART_SetConfig+0x55e>
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df8:	d205      	bcs.n	8005e06 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60da      	str	r2, [r3, #12]
 8005e04:	e002      	b.n	8005e0c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2200      	movs	r2, #0
 8005e26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3730      	adds	r7, #48	@ 0x30
 8005e30:	46bd      	mov	sp, r7
 8005e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e36:	bf00      	nop
 8005e38:	08006318 	.word	0x08006318
 8005e3c:	00f42400 	.word	0x00f42400

08005e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01a      	beq.n	8005f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f3e:	d10a      	bne.n	8005f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b098      	sub	sp, #96	@ 0x60
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f94:	f7fb fde6 	bl	8001b64 <HAL_GetTick>
 8005f98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d12f      	bne.n	8006008 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f88e 	bl	80060d8 <UART_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d022      	beq.n	8006008 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fca:	e853 3f00 	ldrex	r3, [r3]
 8005fce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e6      	bne.n	8005fc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e063      	b.n	80060d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b04      	cmp	r3, #4
 8006014:	d149      	bne.n	80060aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006016:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800601e:	2200      	movs	r2, #0
 8006020:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f857 	bl	80060d8 <UART_WaitOnFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d03c      	beq.n	80060aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	623b      	str	r3, [r7, #32]
   return(result);
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800604e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006050:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e6      	bne.n	8006030 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3308      	adds	r3, #8
 8006068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	60fb      	str	r3, [r7, #12]
   return(result);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006082:	61fa      	str	r2, [r7, #28]
 8006084:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	69b9      	ldr	r1, [r7, #24]
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	617b      	str	r3, [r7, #20]
   return(result);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e5      	bne.n	8006062 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e012      	b.n	80060d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3758      	adds	r7, #88	@ 0x58
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e8:	e04f      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d04b      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fb fd37 	bl	8001b64 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <UART_WaitOnFlagUntilTimeout+0x30>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e04e      	b.n	80061aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d037      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b80      	cmp	r3, #128	@ 0x80
 800611e:	d034      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b40      	cmp	r3, #64	@ 0x40
 8006124:	d031      	beq.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b08      	cmp	r3, #8
 8006132:	d110      	bne.n	8006156 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2208      	movs	r2, #8
 800613a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f838 	bl	80061b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2208      	movs	r2, #8
 8006146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e029      	b.n	80061aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006164:	d111      	bne.n	800618a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800616e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f81e 	bl	80061b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e00f      	b.n	80061aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4013      	ands	r3, r2
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	429a      	cmp	r2, r3
 8006198:	bf0c      	ite	eq
 800619a:	2301      	moveq	r3, #1
 800619c:	2300      	movne	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d0a0      	beq.n	80060ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b095      	sub	sp, #84	@ 0x54
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80061da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e6      	bne.n	80061ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3308      	adds	r3, #8
 80061f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006210:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e3      	bne.n	80061ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d118      	bne.n	800625e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	60bb      	str	r3, [r7, #8]
   return(result);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f023 0310 	bic.w	r3, r3, #16
 8006240:	647b      	str	r3, [r7, #68]	@ 0x44
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6979      	ldr	r1, [r7, #20]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	613b      	str	r3, [r7, #16]
   return(result);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e6      	bne.n	800622c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006272:	bf00      	nop
 8006274:	3754      	adds	r7, #84	@ 0x54
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <memset>:
 800627e:	4402      	add	r2, r0
 8006280:	4603      	mov	r3, r0
 8006282:	4293      	cmp	r3, r2
 8006284:	d100      	bne.n	8006288 <memset+0xa>
 8006286:	4770      	bx	lr
 8006288:	f803 1b01 	strb.w	r1, [r3], #1
 800628c:	e7f9      	b.n	8006282 <memset+0x4>
	...

08006290 <__libc_init_array>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4d0d      	ldr	r5, [pc, #52]	@ (80062c8 <__libc_init_array+0x38>)
 8006294:	4c0d      	ldr	r4, [pc, #52]	@ (80062cc <__libc_init_array+0x3c>)
 8006296:	1b64      	subs	r4, r4, r5
 8006298:	10a4      	asrs	r4, r4, #2
 800629a:	2600      	movs	r6, #0
 800629c:	42a6      	cmp	r6, r4
 800629e:	d109      	bne.n	80062b4 <__libc_init_array+0x24>
 80062a0:	4d0b      	ldr	r5, [pc, #44]	@ (80062d0 <__libc_init_array+0x40>)
 80062a2:	4c0c      	ldr	r4, [pc, #48]	@ (80062d4 <__libc_init_array+0x44>)
 80062a4:	f000 f818 	bl	80062d8 <_init>
 80062a8:	1b64      	subs	r4, r4, r5
 80062aa:	10a4      	asrs	r4, r4, #2
 80062ac:	2600      	movs	r6, #0
 80062ae:	42a6      	cmp	r6, r4
 80062b0:	d105      	bne.n	80062be <__libc_init_array+0x2e>
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b8:	4798      	blx	r3
 80062ba:	3601      	adds	r6, #1
 80062bc:	e7ee      	b.n	800629c <__libc_init_array+0xc>
 80062be:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c2:	4798      	blx	r3
 80062c4:	3601      	adds	r6, #1
 80062c6:	e7f2      	b.n	80062ae <__libc_init_array+0x1e>
 80062c8:	08006338 	.word	0x08006338
 80062cc:	08006338 	.word	0x08006338
 80062d0:	08006338 	.word	0x08006338
 80062d4:	0800633c 	.word	0x0800633c

080062d8 <_init>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	bf00      	nop
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr

080062e4 <_fini>:
 80062e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e6:	bf00      	nop
 80062e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ea:	bc08      	pop	{r3}
 80062ec:	469e      	mov	lr, r3
 80062ee:	4770      	bx	lr
